
SUBMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084dc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08008668  08008668  00018668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088a8  080088a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080088a8  080088a8  000188a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088b0  080088b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088b0  080088b0  000188b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088b4  080088b4  000188b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080088b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  2000007c  08008934  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08008934  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015208  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003265  00000000  00000000  000352b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  00038520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  00039490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022529  00000000  00000000  0003a258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd4b  00000000  00000000  0005c781  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c67cd  00000000  00000000  0006c4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132c99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004380  00000000  00000000  00132d14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800864c 	.word	0x0800864c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800864c 	.word	0x0800864c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b972 	b.w	8000e8c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9e08      	ldr	r6, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	4688      	mov	r8, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14b      	bne.n	8000c66 <__udivmoddi4+0xa6>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4615      	mov	r5, r2
 8000bd2:	d967      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0720 	rsb	r7, r2, #32
 8000bde:	fa01 f302 	lsl.w	r3, r1, r2
 8000be2:	fa20 f707 	lsr.w	r7, r0, r7
 8000be6:	4095      	lsls	r5, r2
 8000be8:	ea47 0803 	orr.w	r8, r7, r3
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf8:	fa1f fc85 	uxth.w	ip, r5
 8000bfc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c04:	fb07 f10c 	mul.w	r1, r7, ip
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18eb      	adds	r3, r5, r3
 8000c0e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c12:	f080 811b 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8118 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c1c:	3f02      	subs	r7, #2
 8000c1e:	442b      	add	r3, r5
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x290>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x290>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	442c      	add	r4, r5
 8000c4c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c50:	eba4 040c 	sub.w	r4, r4, ip
 8000c54:	2700      	movs	r7, #0
 8000c56:	b11e      	cbz	r6, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c60:	4639      	mov	r1, r7
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xbe>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	f000 80eb 	beq.w	8000e46 <__udivmoddi4+0x286>
 8000c70:	2700      	movs	r7, #0
 8000c72:	e9c6 0100 	strd	r0, r1, [r6]
 8000c76:	4638      	mov	r0, r7
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f783 	clz	r7, r3
 8000c82:	2f00      	cmp	r7, #0
 8000c84:	d147      	bne.n	8000d16 <__udivmoddi4+0x156>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd0>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80fa 	bhi.w	8000e84 <__udivmoddi4+0x2c4>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	4698      	mov	r8, r3
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000c9e:	e9c6 4800 	strd	r4, r8, [r6]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xe8>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 808f 	bne.w	8000dd0 <__udivmoddi4+0x210>
 8000cb2:	1b49      	subs	r1, r1, r5
 8000cb4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb8:	fa1f f885 	uxth.w	r8, r5
 8000cbc:	2701      	movs	r7, #1
 8000cbe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cc2:	0c23      	lsrs	r3, r4, #16
 8000cc4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x124>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x122>
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	f200 80cd 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000ce2:	4684      	mov	ip, r0
 8000ce4:	1a59      	subs	r1, r3, r1
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf4:	fb08 f800 	mul.w	r8, r8, r0
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x14c>
 8000cfc:	192c      	adds	r4, r5, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x14a>
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	f200 80b6 	bhi.w	8000e76 <__udivmoddi4+0x2b6>
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	eba4 0408 	sub.w	r4, r4, r8
 8000d10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d14:	e79f      	b.n	8000c56 <__udivmoddi4+0x96>
 8000d16:	f1c7 0c20 	rsb	ip, r7, #32
 8000d1a:	40bb      	lsls	r3, r7
 8000d1c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d20:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d24:	fa01 f407 	lsl.w	r4, r1, r7
 8000d28:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d2c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d30:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d34:	4325      	orrs	r5, r4
 8000d36:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d3a:	0c2c      	lsrs	r4, r5, #16
 8000d3c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d40:	fa1f fa8e 	uxth.w	sl, lr
 8000d44:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d48:	fb09 f40a 	mul.w	r4, r9, sl
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d52:	fa00 f107 	lsl.w	r1, r0, r7
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b0>
 8000d58:	eb1e 0303 	adds.w	r3, lr, r3
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	f080 8087 	bcs.w	8000e72 <__udivmoddi4+0x2b2>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f240 8084 	bls.w	8000e72 <__udivmoddi4+0x2b2>
 8000d6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6e:	4473      	add	r3, lr
 8000d70:	1b1b      	subs	r3, r3, r4
 8000d72:	b2ad      	uxth	r5, r5
 8000d74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d78:	fb08 3310 	mls	r3, r8, r0, r3
 8000d7c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d80:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d84:	45a2      	cmp	sl, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1da>
 8000d88:	eb1e 0404 	adds.w	r4, lr, r4
 8000d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d90:	d26b      	bcs.n	8000e6a <__udivmoddi4+0x2aa>
 8000d92:	45a2      	cmp	sl, r4
 8000d94:	d969      	bls.n	8000e6a <__udivmoddi4+0x2aa>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4474      	add	r4, lr
 8000d9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	eba4 040a 	sub.w	r4, r4, sl
 8000da6:	454c      	cmp	r4, r9
 8000da8:	46c2      	mov	sl, r8
 8000daa:	464b      	mov	r3, r9
 8000dac:	d354      	bcc.n	8000e58 <__udivmoddi4+0x298>
 8000dae:	d051      	beq.n	8000e54 <__udivmoddi4+0x294>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d069      	beq.n	8000e88 <__udivmoddi4+0x2c8>
 8000db4:	ebb1 050a 	subs.w	r5, r1, sl
 8000db8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dbc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc0:	40fd      	lsrs	r5, r7
 8000dc2:	40fc      	lsrs	r4, r7
 8000dc4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dcc:	2700      	movs	r7, #0
 8000dce:	e747      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000dd0:	f1c2 0320 	rsb	r3, r2, #32
 8000dd4:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd8:	4095      	lsls	r5, r2
 8000dda:	fa01 f002 	lsl.w	r0, r1, r2
 8000dde:	fa21 f303 	lsr.w	r3, r1, r3
 8000de2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de6:	4338      	orrs	r0, r7
 8000de8:	0c01      	lsrs	r1, r0, #16
 8000dea:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dee:	fa1f f885 	uxth.w	r8, r5
 8000df2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb07 f308 	mul.w	r3, r7, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	fa04 f402 	lsl.w	r4, r4, r2
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x256>
 8000e06:	1869      	adds	r1, r5, r1
 8000e08:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e0c:	d22f      	bcs.n	8000e6e <__udivmoddi4+0x2ae>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d92d      	bls.n	8000e6e <__udivmoddi4+0x2ae>
 8000e12:	3f02      	subs	r7, #2
 8000e14:	4429      	add	r1, r5
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	b281      	uxth	r1, r0
 8000e1a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb00 f308 	mul.w	r3, r0, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x27e>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e34:	d217      	bcs.n	8000e66 <__udivmoddi4+0x2a6>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d915      	bls.n	8000e66 <__udivmoddi4+0x2a6>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1ac9      	subs	r1, r1, r3
 8000e40:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e44:	e73b      	b.n	8000cbe <__udivmoddi4+0xfe>
 8000e46:	4637      	mov	r7, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e709      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e4c:	4607      	mov	r7, r0
 8000e4e:	e6e7      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e50:	4618      	mov	r0, r3
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e54:	4541      	cmp	r1, r8
 8000e56:	d2ab      	bcs.n	8000db0 <__udivmoddi4+0x1f0>
 8000e58:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e5c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e60:	3801      	subs	r0, #1
 8000e62:	4613      	mov	r3, r2
 8000e64:	e7a4      	b.n	8000db0 <__udivmoddi4+0x1f0>
 8000e66:	4660      	mov	r0, ip
 8000e68:	e7e9      	b.n	8000e3e <__udivmoddi4+0x27e>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	e795      	b.n	8000d9a <__udivmoddi4+0x1da>
 8000e6e:	4667      	mov	r7, ip
 8000e70:	e7d1      	b.n	8000e16 <__udivmoddi4+0x256>
 8000e72:	4681      	mov	r9, r0
 8000e74:	e77c      	b.n	8000d70 <__udivmoddi4+0x1b0>
 8000e76:	3802      	subs	r0, #2
 8000e78:	442c      	add	r4, r5
 8000e7a:	e747      	b.n	8000d0c <__udivmoddi4+0x14c>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	442b      	add	r3, r5
 8000e82:	e72f      	b.n	8000ce4 <__udivmoddi4+0x124>
 8000e84:	4638      	mov	r0, r7
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xda>
 8000e88:	4637      	mov	r7, r6
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0xa0>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <GAS_Can_txSetting>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan);
//void GAS_Can_recieveMessage(CAN_HandleTypeDef *hcan);

void GAS_Can_txSetting(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
	/*
	 * CAN tx set function
	 * set ID, IDE, DLC
	 */
	canTxHeader.ExtId = STM32_ID;
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <GAS_Can_txSetting+0x28>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <GAS_Can_txSetting+0x2c>)
 8000e9a:	6053      	str	r3, [r2, #4]
	canTxHeader.IDE	= CAN_ID_EXT;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <GAS_Can_txSetting+0x2c>)
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	609a      	str	r2, [r3, #8]
	canTxHeader.RTR	= CAN_RTR_DATA;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <GAS_Can_txSetting+0x2c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
	canTxHeader.DLC	=	8;
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <GAS_Can_txSetting+0x2c>)
 8000eaa:	2208      	movs	r2, #8
 8000eac:	611a      	str	r2, [r3, #16]


}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	200000c4 	.word	0x200000c4

08000ec0 <GAS_Can_rxSetting>:

void GAS_Can_rxSetting(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	 * CAN rx set function
	 * IdHigh, IdLow for each 16bit in 29bit ID
	 * Set different FIFO and FilterBank
	 *
	 */
	sFilterConfig.FilterIdHigh = (STM32_ID2<<3)>>16;				/*first 2byte in 29bit (shift need to IED,RTR,0)*/
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <GAS_Can_rxSetting+0xbc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	0c1b      	lsrs	r3, r3, #16
 8000ecc:	4a2c      	ldr	r2, [pc, #176]	; (8000f80 <GAS_Can_rxSetting+0xc0>)
 8000ece:	6013      	str	r3, [r2, #0]
	sFilterConfig.FilterIdLow = (0xffff & (STM32_ID2 << 3)) | (1<<2);	/*second 2byte in 29bit + IDE (shift need to IED,RTR,0/)*/
 8000ed0:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <GAS_Can_rxSetting+0xbc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	4a28      	ldr	r2, [pc, #160]	; (8000f80 <GAS_Can_rxSetting+0xc0>)
 8000ede:	6053      	str	r3, [r2, #4]
	sFilterConfig.FilterMaskIdHigh = (0x0fffffff<<3)>>16;
 8000ee0:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <GAS_Can_rxSetting+0xc0>)
 8000ee2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000ee6:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow =(0xffff & (0x0FFFFFFF << 3)) | (1<<2);
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <GAS_Can_rxSetting+0xc0>)
 8000eea:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8000eee:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ef0:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <GAS_Can_rxSetting+0xc0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank = 0;
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <GAS_Can_rxSetting+0xc0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <GAS_Can_rxSetting+0xc0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <GAS_Can_rxSetting+0xc0>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <GAS_Can_rxSetting+0xc0>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <GAS_Can_rxSetting+0xc0>)
 8000f10:	220e      	movs	r2, #14
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24

	 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000f14:	491a      	ldr	r1, [pc, #104]	; (8000f80 <GAS_Can_rxSetting+0xc0>)
 8000f16:	481b      	ldr	r0, [pc, #108]	; (8000f84 <GAS_Can_rxSetting+0xc4>)
 8000f18:	f002 fb36 	bl	8003588 <HAL_CAN_ConfigFilter>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <GAS_Can_rxSetting+0x66>
	  {
	    /* Filter configuration Error */
	    Error_Handler();
 8000f22:	f001 fa67 	bl	80023f4 <Error_Handler>
	  }

	 sFilterConfig2.FilterIdHigh = 0x0000;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <GAS_Can_rxSetting+0xc8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
	 sFilterConfig2.FilterIdLow = (0xffff & (0x0237 << 3)) | (1<<2);
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <GAS_Can_rxSetting+0xc8>)
 8000f2e:	f241 12bc 	movw	r2, #4540	; 0x11bc
 8000f32:	605a      	str	r2, [r3, #4]
	 sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <GAS_Can_rxSetting+0xc8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
 	 sFilterConfig2.FilterMaskIdLow = (0xffff & (0x0237 << 3)) | (1<<2);
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <GAS_Can_rxSetting+0xc8>)
 8000f3c:	f241 12bc 	movw	r2, #4540	; 0x11bc
 8000f40:	60da      	str	r2, [r3, #12]
	 sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <GAS_Can_rxSetting+0xc8>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	611a      	str	r2, [r3, #16]
	 sFilterConfig2.FilterBank = 1;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <GAS_Can_rxSetting+0xc8>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	615a      	str	r2, [r3, #20]
	 sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <GAS_Can_rxSetting+0xc8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
	 sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <GAS_Can_rxSetting+0xc8>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	61da      	str	r2, [r3, #28]
	 sFilterConfig2.FilterActivation = ENABLE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <GAS_Can_rxSetting+0xc8>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	621a      	str	r2, [r3, #32]
	 sFilterConfig2.SlaveStartFilterBank = 15;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <GAS_Can_rxSetting+0xc8>)
 8000f62:	220f      	movs	r2, #15
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24

	 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8000f66:	4908      	ldr	r1, [pc, #32]	; (8000f88 <GAS_Can_rxSetting+0xc8>)
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <GAS_Can_rxSetting+0xc4>)
 8000f6a:	f002 fb0d 	bl	8003588 <HAL_CAN_ConfigFilter>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <GAS_Can_rxSetting+0xb8>
	 {
	     /* Filter configuration Error */
	     Error_Handler();
 8000f74:	f001 fa3e 	bl	80023f4 <Error_Handler>
	 }
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	2000009c 	.word	0x2000009c
 8000f84:	200002f4 	.word	0x200002f4
 8000f88:	2000011c 	.word	0x2000011c

08000f8c <GAS_Can_init>:

void GAS_Can_init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	/*
	 * GAS_CAN_init
	 * ActiveNotification for Rx message pending
	 */
	GAS_Can_txSetting();
 8000f90:	f7ff ff7e 	bl	8000e90 <GAS_Can_txSetting>
	GAS_Can_rxSetting();
 8000f94:	f7ff ff94 	bl	8000ec0 <GAS_Can_rxSetting>
	HAL_CAN_Start(&hcan2);
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <GAS_Can_init+0x3c>)
 8000f9a:	f002 fbd5 	bl	8003748 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <GAS_Can_init+0x3c>)
 8000fa2:	f002 fe37 	bl	8003c14 <HAL_CAN_ActivateNotification>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <GAS_Can_init+0x24>
	{
	  Error_Handler();
 8000fac:	f001 fa22 	bl	80023f4 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000fb0:	2110      	movs	r1, #16
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <GAS_Can_init+0x3c>)
 8000fb4:	f002 fe2e 	bl	8003c14 <HAL_CAN_ActivateNotification>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <GAS_Can_init+0x36>
	{
	  Error_Handler();
 8000fbe:	f001 fa19 	bl	80023f4 <Error_Handler>
	}


}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200002f4 	.word	0x200002f4

08000fcc <HAL_CAN_RxFifo0MsgPendingCallback>:
}



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	/*
	 * CAN recieve data interrupt function
	 * Check Instance then recieve data in stm32_2.RxData
	 */
	if(hcan->Instance == CAN2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d105      	bne.n	8000fea <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, stm32_2.RxData);
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f002 fd03 	bl	80039f0 <HAL_CAN_GetRxMessage>

	}
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40006800 	.word	0x40006800
 8000ff8:	20000114 	.word	0x20000114
 8000ffc:	200000f8 	.word	0x200000f8

08001000 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	/*
	* CAN recieve data interrupt function
	* Check Instance then recieve data in stm32_2.RxData
	*/
	if(hcan->Instance == CAN2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d105      	bne.n	800101e <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &canRxHeader, TC237.RxData);
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8001016:	2101      	movs	r1, #1
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f002 fce9 	bl	80039f0 <HAL_CAN_GetRxMessage>

	}
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40006800 	.word	0x40006800
 800102c:	200000e4 	.word	0x200000e4
 8001030:	200000f8 	.word	0x200000f8

08001034 <GAS_PWM_inputInit>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);
void GAS_PWM_changeOutput_ch1(uint16_t input);
void GAS_PWM_Check(TIM_HandleTypeDef *htim, pwmIn_t *pwmIn);

void GAS_PWM_inputInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 8001038:	2100      	movs	r1, #0
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <GAS_PWM_inputInit+0x38>)
 800103c:	f004 fb48 	bl	80056d0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8001040:	2104      	movs	r1, #4
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <GAS_PWM_inputInit+0x38>)
 8001044:	f004 fb44 	bl	80056d0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001048:	2100      	movs	r1, #0
 800104a:	4809      	ldr	r0, [pc, #36]	; (8001070 <GAS_PWM_inputInit+0x3c>)
 800104c:	f004 fb40 	bl	80056d0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001050:	2104      	movs	r1, #4
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <GAS_PWM_inputInit+0x3c>)
 8001054:	f004 fb3c 	bl	80056d0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001058:	2100      	movs	r1, #0
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <GAS_PWM_inputInit+0x40>)
 800105c:	f004 fb38 	bl	80056d0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001060:	2104      	movs	r1, #4
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <GAS_PWM_inputInit+0x40>)
 8001064:	f004 fb34 	bl	80056d0 <HAL_TIM_IC_Start_IT>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000338 	.word	0x20000338
 8001070:	200003f8 	.word	0x200003f8
 8001074:	20000378 	.word	0x20000378

08001078 <HAL_TIM_IC_CaptureCallback>:
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);

}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	/*
	 * For PWM input function
	 * One PWM input per one htim channel(because of TIM counter)
	 * Period, width, duty cycle, frequency can be calculated.
	 */
	if(htim ->Instance == TIM8)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d106      	bne.n	8001098 <HAL_TIM_IC_CaptureCallback+0x20>
	{
		GAS_PWM_Check(htim, &pwmIn1);
 800108a:	4912      	ldr	r1, [pc, #72]	; (80010d4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f82d 	bl	80010ec <GAS_PWM_Check>
		pwmChangeFlag = 1;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
	}
	if(htim ->Instance == TIM1){
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <HAL_TIM_IC_CaptureCallback+0x64>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d106      	bne.n	80010b0 <HAL_TIM_IC_CaptureCallback+0x38>
		GAS_PWM_Check(htim, &pwmIn2);
 80010a2:	490f      	ldr	r1, [pc, #60]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x68>)
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 f821 	bl	80010ec <GAS_PWM_Check>
		pwmChangeFlag = 1;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
	}
	if(htim ->Instance == TIM4){
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d106      	bne.n	80010c8 <HAL_TIM_IC_CaptureCallback+0x50>
		GAS_PWM_Check2(htim, &pwmIn3);
 80010ba:	490b      	ldr	r1, [pc, #44]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x70>)
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 f85d 	bl	800117c <GAS_PWM_Check2>
		pwmChangeFlag = 1;
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
	}
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40010400 	.word	0x40010400
 80010d4:	20000144 	.word	0x20000144
 80010d8:	20000098 	.word	0x20000098
 80010dc:	40010000 	.word	0x40010000
 80010e0:	2000017c 	.word	0x2000017c
 80010e4:	40000800 	.word	0x40000800
 80010e8:	20000160 	.word	0x20000160

080010ec <GAS_PWM_Check>:
	 * Change duty cycle by changing register CCR directly
	 */
	TIM1->CCR1=input/10;
}

void GAS_PWM_Check(TIM_HandleTypeDef *htim, pwmIn_t *pwmIn){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]

			if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7f1b      	ldrb	r3, [r3, #28]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d10e      	bne.n	800111c <GAS_PWM_Check+0x30>
			{
				pwmIn->RisingEdgeValue = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 80010fe:	2100      	movs	r1, #0
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f004 fdeb 	bl	8005cdc <HAL_TIM_ReadCapturedValue>
 8001106:	4602      	mov	r2, r0
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	601a      	str	r2, [r3, #0]
				TIM1->CNT = 0;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <GAS_PWM_Check+0x88>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
				pwmIn->Period=pwmIn->RisingEdgeValue;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	609a      	str	r2, [r3, #8]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime)/(SeraMaxWidth-SeraRisingTime));
				if(pwmIn->angle>=3600)pwmIn->angle=0;

			}

}
 800111a:	e026      	b.n	800116a <GAS_PWM_Check+0x7e>
			else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7f1b      	ldrb	r3, [r3, #28]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d122      	bne.n	800116a <GAS_PWM_Check+0x7e>
				pwmIn->FallingEdgeValue=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001124:	2104      	movs	r1, #4
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f004 fdd8 	bl	8005cdc <HAL_TIM_ReadCapturedValue>
 800112c:	4602      	mov	r2, r0
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	605a      	str	r2, [r3, #4]
				pwmIn->Width=pwmIn->FallingEdgeValue;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	60da      	str	r2, [r3, #12]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime)/(SeraMaxWidth-SeraRisingTime));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	f5a3 2368 	sub.w	r3, r3, #950272	; 0xe8000
 800114a:	f5a3 6369 	sub.w	r3, r3, #3728	; 0xe90
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <GAS_PWM_Check+0x8c>)
 8001150:	fba2 2303 	umull	r2, r3, r2, r3
 8001154:	09da      	lsrs	r2, r3, #7
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	619a      	str	r2, [r3, #24]
				if(pwmIn->angle>=3600)pwmIn->angle=0;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001162:	d302      	bcc.n	800116a <GAS_PWM_Check+0x7e>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40010000 	.word	0x40010000
 8001178:	04101fff 	.word	0x04101fff

0800117c <GAS_PWM_Check2>:

void GAS_PWM_Check2(TIM_HandleTypeDef *htim, pwmIn_t *pwmIn){
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]

			if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7f1b      	ldrb	r3, [r3, #28]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d10e      	bne.n	80011ac <GAS_PWM_Check2+0x30>
			{
				pwmIn->RisingEdgeValue = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 800118e:	2100      	movs	r1, #0
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f004 fda3 	bl	8005cdc <HAL_TIM_ReadCapturedValue>
 8001196:	4602      	mov	r2, r0
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	601a      	str	r2, [r3, #0]
				TIM1->CNT = 0;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <GAS_PWM_Check2+0x8c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
				pwmIn->Period=pwmIn->RisingEdgeValue;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	609a      	str	r2, [r3, #8]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime2)/(SeraMaxWidth2-SeraRisingTime2));
				if(pwmIn->angle>=3600)pwmIn->angle=0;

			}

}
 80011aa:	e029      	b.n	8001200 <GAS_PWM_Check2+0x84>
			else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7f1b      	ldrb	r3, [r3, #28]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d125      	bne.n	8001200 <GAS_PWM_Check2+0x84>
				pwmIn->FallingEdgeValue=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80011b4:	2104      	movs	r1, #4
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f004 fd90 	bl	8005cdc <HAL_TIM_ReadCapturedValue>
 80011bc:	4602      	mov	r2, r0
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	605a      	str	r2, [r3, #4]
				pwmIn->Width=pwmIn->FallingEdgeValue;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	60da      	str	r2, [r3, #12]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime2)/(SeraMaxWidth2-SeraRisingTime2));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	f5a3 23e9 	sub.w	r3, r3, #477184	; 0x74800
 80011da:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <GAS_PWM_Check2+0x90>)
 80011e0:	fba2 1203 	umull	r1, r2, r2, r3
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	085b      	lsrs	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	0ada      	lsrs	r2, r3, #11
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	619a      	str	r2, [r3, #24]
				if(pwmIn->angle>=3600)pwmIn->angle=0;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80011f8:	d302      	bcc.n	8001200 <GAS_PWM_Check2+0x84>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010000 	.word	0x40010000
 800120c:	0420c521 	.word	0x0420c521

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001274:	d301      	bcc.n	800127a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001276:	2301      	movs	r3, #1
 8001278:	e00f      	b.n	800129a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <SysTick_Config+0x40>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001282:	210f      	movs	r1, #15
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f7ff ffc2 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SysTick_Config+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SysTick_Config+0x40>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <GAS_Scheduler_init>:
void GAS_Scheduler_taskCounter_1000ms(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void GAS_Schduler(void);

void GAS_Scheduler_init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <GAS_Scheduler_init+0x38>)
 80012ae:	f004 f9b5 	bl	800561c <HAL_TIM_Base_Start_IT>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <GAS_Scheduler_init+0x14>
	  {
		  Error_Handler();
 80012b8:	f001 f89c 	bl	80023f4 <Error_Handler>
	  }
	SysTick_Config(SystemCoreClock/1000);
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <GAS_Scheduler_init+0x3c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <GAS_Scheduler_init+0x40>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	099b      	lsrs	r3, r3, #6
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ffcb 	bl	8001264 <SysTick_Config>

//********CAN initialization********
	GAS_Can_init();
 80012ce:	f7ff fe5d 	bl	8000f8c <GAS_Can_init>

//********PWM initialization********
	GAS_PWM_inputInit();
 80012d2:	f7ff feaf 	bl	8001034 <GAS_PWM_inputInit>
//	GAS_PWM_outputInit();

//********Shock initialization*******
	GAS_Shock_init();
 80012d6:	f000 f8ad 	bl	8001434 <GAS_Shock_init>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200003b8 	.word	0x200003b8
 80012e4:	20000008 	.word	0x20000008
 80012e8:	10624dd3 	.word	0x10624dd3

080012ec <GAS_Scheduler_taskCounter_1ms>:



void GAS_Scheduler_taskCounter_1ms(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
//	GAS_Vadc_dmaIn();
//	GAS_Vadc_getValue();
	if (pwmChangeFlag){
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <GAS_Scheduler_taskCounter_1ms+0x28>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00a      	beq.n	8001310 <GAS_Scheduler_taskCounter_1ms+0x24>
		GAS_Shock_Run(&pwmIn1, &pwmIn2 ,pwmChangeFlag);
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <GAS_Scheduler_taskCounter_1ms+0x28>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	4905      	ldr	r1, [pc, #20]	; (8001318 <GAS_Scheduler_taskCounter_1ms+0x2c>)
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <GAS_Scheduler_taskCounter_1ms+0x30>)
 8001306:	f000 fafd 	bl	8001904 <GAS_Shock_Run>
		pwmChangeFlag = False;
 800130a:	4b02      	ldr	r3, [pc, #8]	; (8001314 <GAS_Scheduler_taskCounter_1ms+0x28>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
	}
//	GAS_PWM_changeOutput_ch1(ValueOfADC[0]);
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000098 	.word	0x20000098
 8001318:	2000017c 	.word	0x2000017c
 800131c:	20000144 	.word	0x20000144

08001320 <GAS_Scheduler_taskCounter_10ms>:

void GAS_Scheduler_taskCounter_10ms(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
//	GAS_Can_sendMessage();

}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <GAS_Scheduler_taskCounter_100ms>:

void GAS_Scheduler_taskCounter_100ms(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <GAS_Scheduler_taskCounter_1000ms>:
void GAS_Scheduler_taskCounter_1000ms(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	gTimerCnt++;
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_SYSTICK_Callback+0x7c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <HAL_SYSTICK_Callback+0x7c>)
 8001358:	6013      	str	r3, [r2, #0]
			gTask.flag_1ms=True;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_SYSTICK_Callback+0x80>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
			if(gTimerCnt % 10 == 0)
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_SYSTICK_Callback+0x7c>)
 8001362:	6819      	ldr	r1, [r3, #0]
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_SYSTICK_Callback+0x84>)
 8001366:	fb83 2301 	smull	r2, r3, r3, r1
 800136a:	109a      	asrs	r2, r3, #2
 800136c:	17cb      	asrs	r3, r1, #31
 800136e:	1ad2      	subs	r2, r2, r3
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	1aca      	subs	r2, r1, r3
 800137a:	2a00      	cmp	r2, #0
 800137c:	d102      	bne.n	8001384 <HAL_SYSTICK_Callback+0x38>
			{
				gTask.flag_10ms=True;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_SYSTICK_Callback+0x80>)
 8001380:	2201      	movs	r2, #1
 8001382:	705a      	strb	r2, [r3, #1]
			}
			if(gTimerCnt % 100 == 0)
 8001384:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <HAL_SYSTICK_Callback+0x7c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_SYSTICK_Callback+0x88>)
 800138a:	fb83 1302 	smull	r1, r3, r3, r2
 800138e:	1159      	asrs	r1, r3, #5
 8001390:	17d3      	asrs	r3, r2, #31
 8001392:	1acb      	subs	r3, r1, r3
 8001394:	2164      	movs	r1, #100	; 0x64
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <HAL_SYSTICK_Callback+0x5a>
			{
				gTask.flag_100ms=True;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_SYSTICK_Callback+0x80>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	709a      	strb	r2, [r3, #2]
			}

			if(gTimerCnt == 1000)
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_SYSTICK_Callback+0x7c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ae:	d105      	bne.n	80013bc <HAL_SYSTICK_Callback+0x70>
			{
				gTask.flag_1000ms=True;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_SYSTICK_Callback+0x80>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	70da      	strb	r2, [r3, #3]
				gTimerCnt = 0;
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <HAL_SYSTICK_Callback+0x7c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
			}
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	200001a0 	.word	0x200001a0
 80013cc:	20000198 	.word	0x20000198
 80013d0:	66666667 	.word	0x66666667
 80013d4:	51eb851f 	.word	0x51eb851f

080013d8 <GAS_Scheduler>:
//		gTimerCnt = 0;
//	}
//}

void GAS_Scheduler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0


	if(gTask.flag_1ms == True)
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <GAS_Scheduler+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d104      	bne.n	80013f0 <GAS_Scheduler+0x18>
	{
		gTask.flag_1ms = False;
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <GAS_Scheduler+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
		GAS_Scheduler_taskCounter_1ms();
 80013ec:	f7ff ff7e 	bl	80012ec <GAS_Scheduler_taskCounter_1ms>
	}

	if(gTask.flag_10ms == True)
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <GAS_Scheduler+0x58>)
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d104      	bne.n	8001404 <GAS_Scheduler+0x2c>
	{
		gTask.flag_10ms = False;
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <GAS_Scheduler+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	705a      	strb	r2, [r3, #1]
		GAS_Scheduler_taskCounter_10ms();
 8001400:	f7ff ff8e 	bl	8001320 <GAS_Scheduler_taskCounter_10ms>
	}

	if(gTask.flag_100ms == True)
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <GAS_Scheduler+0x58>)
 8001406:	789b      	ldrb	r3, [r3, #2]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b01      	cmp	r3, #1
 800140c:	d104      	bne.n	8001418 <GAS_Scheduler+0x40>
	{
		gTask.flag_100ms = False;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <GAS_Scheduler+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	709a      	strb	r2, [r3, #2]
		GAS_Scheduler_taskCounter_100ms();
 8001414:	f7ff ff8b 	bl	800132e <GAS_Scheduler_taskCounter_100ms>
	}

	if(gTask.flag_1000ms == True)
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <GAS_Scheduler+0x58>)
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d104      	bne.n	800142c <GAS_Scheduler+0x54>
	{
		gTask.flag_1000ms = False;
 8001422:	4b03      	ldr	r3, [pc, #12]	; (8001430 <GAS_Scheduler+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	70da      	strb	r2, [r3, #3]
		GAS_Scheduler_taskCounter_1000ms();
 8001428:	f7ff ff88 	bl	800133c <GAS_Scheduler_taskCounter_1000ms>
	}

//	GAS_Can_recieveMessage(&hcan);
//	HAL_CAN_IRQHandler(&hcan);
//	  pin_state=HAL_GPIO_ReadPin(GPIO_PIN_8);
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000198 	.word	0x20000198

08001434 <GAS_Shock_init>:
float GAS_Shock_calculateRoll(float Rd, float Ld, int Location);
static float heaveCalc(int RW, int d);
void GAS_Shock_parse(ShockAngle *angle);
void GAS_Shock_Run(pwmIn_t *pwmIn1, pwmIn_t *pwmIn2 ,int isUpdated);

void GAS_Shock_init(int angleR, int angleL){
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	angle.initAngleR = angleR;
 800143e:	4a06      	ldr	r2, [pc, #24]	; (8001458 <GAS_Shock_init+0x24>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6013      	str	r3, [r2, #0]
	angle.initAngleL = angleL;
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <GAS_Shock_init+0x24>)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	6053      	str	r3, [r2, #4]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200001a4 	.word	0x200001a4
 800145c:	00000000 	.word	0x00000000

08001460 <GAS_Shock_parse>:

void GAS_Shock_parse(ShockAngle *angle){
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	int initAngle=907;
 8001468:	f240 338b 	movw	r3, #907	; 0x38b
 800146c:	60fb      	str	r3, [r7, #12]
	angle->parsedAngleR = (initAngle + angle->AngleR - angle->initAngleR)*PI/3600;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	441a      	add	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe fff5 	bl	800046c <__aeabi_i2d>
 8001482:	a421      	add	r4, pc, #132	; (adr r4, 8001508 <GAS_Shock_parse+0xa8>)
 8001484:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001488:	461a      	mov	r2, r3
 800148a:	4623      	mov	r3, r4
 800148c:	f7ff f858 	bl	8000540 <__aeabi_dmul>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	a31d      	add	r3, pc, #116	; (adr r3, 8001510 <GAS_Shock_parse+0xb0>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7ff f979 	bl	8000794 <__aeabi_ddiv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	4618      	mov	r0, r3
 80014a8:	4621      	mov	r1, r4
 80014aa:	f7ff fb21 	bl	8000af0 <__aeabi_d2f>
 80014ae:	4602      	mov	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	611a      	str	r2, [r3, #16]
	angle->parsedAngleL = (initAngle + angle->AngleL - angle->initAngleL)*PI/3600;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	441a      	add	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ffd2 	bl	800046c <__aeabi_i2d>
 80014c8:	a40f      	add	r4, pc, #60	; (adr r4, 8001508 <GAS_Shock_parse+0xa8>)
 80014ca:	e9d4 3400 	ldrd	r3, r4, [r4]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4623      	mov	r3, r4
 80014d2:	f7ff f835 	bl	8000540 <__aeabi_dmul>
 80014d6:	4603      	mov	r3, r0
 80014d8:	460c      	mov	r4, r1
 80014da:	4618      	mov	r0, r3
 80014dc:	4621      	mov	r1, r4
 80014de:	a30c      	add	r3, pc, #48	; (adr r3, 8001510 <GAS_Shock_parse+0xb0>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f956 	bl	8000794 <__aeabi_ddiv>
 80014e8:	4603      	mov	r3, r0
 80014ea:	460c      	mov	r4, r1
 80014ec:	4618      	mov	r0, r3
 80014ee:	4621      	mov	r1, r4
 80014f0:	f7ff fafe 	bl	8000af0 <__aeabi_d2f>
 80014f4:	4602      	mov	r2, r0
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	615a      	str	r2, [r3, #20]
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd90      	pop	{r4, r7, pc}
 8001502:	bf00      	nop
 8001504:	f3af 8000 	nop.w
 8001508:	4d12d84a 	.word	0x4d12d84a
 800150c:	400921fb 	.word	0x400921fb
 8001510:	00000000 	.word	0x00000000
 8001514:	40ac2000 	.word	0x40ac2000

08001518 <GAS_Shock_calculateRoll>:

float GAS_Shock_calculateRoll(float Rd, float Ld, int Location){
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001522:	edc7 0a02 	vstr	s1, [r7, #8]
 8001526:	6078      	str	r0, [r7, #4]
	int d1=0,d2=0;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
	if (Location == Shock_Front){
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d119      	bne.n	800156a <GAS_Shock_calculateRoll+0x52>
		d1 = rollCalc(RockerWing_F,RockerShaft_F,Rd);
 8001536:	ed97 0a03 	vldr	s0, [r7, #12]
 800153a:	2191      	movs	r1, #145	; 0x91
 800153c:	2034      	movs	r0, #52	; 0x34
 800153e:	f000 f83f 	bl	80015c0 <rollCalc>
 8001542:	eef0 7a40 	vmov.f32	s15, s0
 8001546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800154a:	ee17 3a90 	vmov	r3, s15
 800154e:	617b      	str	r3, [r7, #20]
		d2 = rollCalc(RockerWing_F,RockerShaft_F,Ld);
 8001550:	ed97 0a02 	vldr	s0, [r7, #8]
 8001554:	2191      	movs	r1, #145	; 0x91
 8001556:	2034      	movs	r0, #52	; 0x34
 8001558:	f000 f832 	bl	80015c0 <rollCalc>
 800155c:	eef0 7a40 	vmov.f32	s15, s0
 8001560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001564:	ee17 3a90 	vmov	r3, s15
 8001568:	613b      	str	r3, [r7, #16]
	}
	if (Location == Shock_Rear){
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d119      	bne.n	80015a4 <GAS_Shock_calculateRoll+0x8c>
		d1 = rollCalc(RockerWing_R,RockerShaft_R,Rd);
 8001570:	ed97 0a03 	vldr	s0, [r7, #12]
 8001574:	21a0      	movs	r1, #160	; 0xa0
 8001576:	2047      	movs	r0, #71	; 0x47
 8001578:	f000 f822 	bl	80015c0 <rollCalc>
 800157c:	eef0 7a40 	vmov.f32	s15, s0
 8001580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001584:	ee17 3a90 	vmov	r3, s15
 8001588:	617b      	str	r3, [r7, #20]
		d2 = rollCalc(RockerWing_R,RockerShaft_R,Ld);
 800158a:	ed97 0a02 	vldr	s0, [r7, #8]
 800158e:	21a0      	movs	r1, #160	; 0xa0
 8001590:	2047      	movs	r0, #71	; 0x47
 8001592:	f000 f815 	bl	80015c0 <rollCalc>
 8001596:	eef0 7a40 	vmov.f32	s15, s0
 800159a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800159e:	ee17 3a90 	vmov	r3, s15
 80015a2:	613b      	str	r3, [r7, #16]
	}
	return d1+d2;
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4413      	add	r3, r2
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80015b2:	eeb0 0a67 	vmov.f32	s0, s15
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	0000      	movs	r0, r0
	...

080015c0 <rollCalc>:

static float rollCalc(int RW,int RS, float d){
 80015c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c4:	ed2d 8b02 	vpush	{d8}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	ed87 0a01 	vstr	s0, [r7, #4]

	return ((RW*cos(i)+sqrt(pow(RS,2)-pow(RW*sin(i),2)))-(RW*cos(i+d)+sqrt(pow(RS,2)-pow(RW*sin(i+d),2))));
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f7fe ff49 	bl	800046c <__aeabi_i2d>
 80015da:	4604      	mov	r4, r0
 80015dc:	460d      	mov	r5, r1
 80015de:	4b72      	ldr	r3, [pc, #456]	; (80017a8 <rollCalc+0x1e8>)
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff55 	bl	8000490 <__aeabi_f2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	ec43 2b10 	vmov	d0, r2, r3
 80015ee:	f004 ffb3 	bl	8006558 <cos>
 80015f2:	ec53 2b10 	vmov	r2, r3, d0
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7fe ffa1 	bl	8000540 <__aeabi_dmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	460c      	mov	r4, r1
 8001602:	4625      	mov	r5, r4
 8001604:	461c      	mov	r4, r3
 8001606:	68b8      	ldr	r0, [r7, #8]
 8001608:	f7fe ff30 	bl	800046c <__aeabi_i2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	ed9f 1b63 	vldr	d1, [pc, #396]	; 80017a0 <rollCalc+0x1e0>
 8001614:	ec43 2b10 	vmov	d0, r2, r3
 8001618:	f005 f82a 	bl	8006670 <pow>
 800161c:	ec5b ab10 	vmov	sl, fp, d0
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7fe ff23 	bl	800046c <__aeabi_i2d>
 8001626:	4680      	mov	r8, r0
 8001628:	4689      	mov	r9, r1
 800162a:	4b5f      	ldr	r3, [pc, #380]	; (80017a8 <rollCalc+0x1e8>)
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff2f 	bl	8000490 <__aeabi_f2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	ec43 2b10 	vmov	d0, r2, r3
 800163a:	f004 ffd1 	bl	80065e0 <sin>
 800163e:	ec53 2b10 	vmov	r2, r3, d0
 8001642:	4640      	mov	r0, r8
 8001644:	4649      	mov	r1, r9
 8001646:	f7fe ff7b 	bl	8000540 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	ec43 2b17 	vmov	d7, r2, r3
 8001652:	ed9f 1b53 	vldr	d1, [pc, #332]	; 80017a0 <rollCalc+0x1e0>
 8001656:	eeb0 0a47 	vmov.f32	s0, s14
 800165a:	eef0 0a67 	vmov.f32	s1, s15
 800165e:	f005 f807 	bl	8006670 <pow>
 8001662:	ec53 2b10 	vmov	r2, r3, d0
 8001666:	4650      	mov	r0, sl
 8001668:	4659      	mov	r1, fp
 800166a:	f7fe fdb1 	bl	80001d0 <__aeabi_dsub>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	ec43 2b17 	vmov	d7, r2, r3
 8001676:	eeb0 0a47 	vmov.f32	s0, s14
 800167a:	eef0 0a67 	vmov.f32	s1, s15
 800167e:	f005 f967 	bl	8006950 <sqrt>
 8001682:	ec53 2b10 	vmov	r2, r3, d0
 8001686:	4620      	mov	r0, r4
 8001688:	4629      	mov	r1, r5
 800168a:	f7fe fda3 	bl	80001d4 <__adddf3>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4625      	mov	r5, r4
 8001694:	461c      	mov	r4, r3
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f7fe fee8 	bl	800046c <__aeabi_i2d>
 800169c:	4680      	mov	r8, r0
 800169e:	4689      	mov	r9, r1
 80016a0:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80017ac <rollCalc+0x1ec>
 80016a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ac:	ee17 0a90 	vmov	r0, s15
 80016b0:	f7fe feee 	bl	8000490 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	ec43 2b10 	vmov	d0, r2, r3
 80016bc:	f004 ff4c 	bl	8006558 <cos>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4640      	mov	r0, r8
 80016c6:	4649      	mov	r1, r9
 80016c8:	f7fe ff3a 	bl	8000540 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4690      	mov	r8, r2
 80016d2:	4699      	mov	r9, r3
 80016d4:	68b8      	ldr	r0, [r7, #8]
 80016d6:	f7fe fec9 	bl	800046c <__aeabi_i2d>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	ed9f 1b30 	vldr	d1, [pc, #192]	; 80017a0 <rollCalc+0x1e0>
 80016e2:	ec43 2b10 	vmov	d0, r2, r3
 80016e6:	f004 ffc3 	bl	8006670 <pow>
 80016ea:	eeb0 8a40 	vmov.f32	s16, s0
 80016ee:	eef0 8a60 	vmov.f32	s17, s1
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f7fe feba 	bl	800046c <__aeabi_i2d>
 80016f8:	4682      	mov	sl, r0
 80016fa:	468b      	mov	fp, r1
 80016fc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80017ac <rollCalc+0x1ec>
 8001700:	edd7 7a01 	vldr	s15, [r7, #4]
 8001704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001708:	ee17 0a90 	vmov	r0, s15
 800170c:	f7fe fec0 	bl	8000490 <__aeabi_f2d>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	ec43 2b10 	vmov	d0, r2, r3
 8001718:	f004 ff62 	bl	80065e0 <sin>
 800171c:	ec53 2b10 	vmov	r2, r3, d0
 8001720:	4650      	mov	r0, sl
 8001722:	4659      	mov	r1, fp
 8001724:	f7fe ff0c 	bl	8000540 <__aeabi_dmul>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	ec43 2b17 	vmov	d7, r2, r3
 8001730:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80017a0 <rollCalc+0x1e0>
 8001734:	eeb0 0a47 	vmov.f32	s0, s14
 8001738:	eef0 0a67 	vmov.f32	s1, s15
 800173c:	f004 ff98 	bl	8006670 <pow>
 8001740:	ec53 2b10 	vmov	r2, r3, d0
 8001744:	ec51 0b18 	vmov	r0, r1, d8
 8001748:	f7fe fd42 	bl	80001d0 <__aeabi_dsub>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	ec43 2b17 	vmov	d7, r2, r3
 8001754:	eeb0 0a47 	vmov.f32	s0, s14
 8001758:	eef0 0a67 	vmov.f32	s1, s15
 800175c:	f005 f8f8 	bl	8006950 <sqrt>
 8001760:	ec53 2b10 	vmov	r2, r3, d0
 8001764:	4640      	mov	r0, r8
 8001766:	4649      	mov	r1, r9
 8001768:	f7fe fd34 	bl	80001d4 <__adddf3>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f7fe fd2c 	bl	80001d0 <__aeabi_dsub>
 8001778:	4603      	mov	r3, r0
 800177a:	460c      	mov	r4, r1
 800177c:	4618      	mov	r0, r3
 800177e:	4621      	mov	r1, r4
 8001780:	f7ff f9b6 	bl	8000af0 <__aeabi_d2f>
 8001784:	4603      	mov	r3, r0
 8001786:	ee07 3a90 	vmov	s15, r3
}
 800178a:	eeb0 0a67 	vmov.f32	s0, s15
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	ecbd 8b02 	vpop	{d8}
 8001796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800179a:	bf00      	nop
 800179c:	f3af 8000 	nop.w
 80017a0:	00000000 	.word	0x00000000
 80017a4:	40000000 	.word	0x40000000
 80017a8:	42b56666 	.word	0x42b56666
 80017ac:	42b56666 	.word	0x42b56666

080017b0 <GAS_Shock_calculateHeave>:

int GAS_Shock_calculateHeave(float Rd, float Ld, int Location){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80017ba:	edc7 0a02 	vstr	s1, [r7, #8]
 80017be:	6078      	str	r0, [r7, #4]
	int d1,d2;
	if (Location == Shock_Front){
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d11f      	bne.n	8001806 <GAS_Shock_calculateHeave+0x56>
		d1 = heaveCalc(RockerWing_F,Rd);
 80017c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ce:	ee17 1a90 	vmov	r1, s15
 80017d2:	2034      	movs	r0, #52	; 0x34
 80017d4:	f000 f842 	bl	800185c <heaveCalc>
 80017d8:	eef0 7a40 	vmov.f32	s15, s0
 80017dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e0:	ee17 3a90 	vmov	r3, s15
 80017e4:	617b      	str	r3, [r7, #20]
		d2 = heaveCalc(RockerWing_F,Ld);
 80017e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ee:	ee17 1a90 	vmov	r1, s15
 80017f2:	2034      	movs	r0, #52	; 0x34
 80017f4:	f000 f832 	bl	800185c <heaveCalc>
 80017f8:	eef0 7a40 	vmov.f32	s15, s0
 80017fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001800:	ee17 3a90 	vmov	r3, s15
 8001804:	613b      	str	r3, [r7, #16]
	}
	if (Location == Shock_Rear){
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d11f      	bne.n	800184c <GAS_Shock_calculateHeave+0x9c>
		d1 = heaveCalc(RockerWingH_R,Rd);
 800180c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001814:	ee17 1a90 	vmov	r1, s15
 8001818:	2040      	movs	r0, #64	; 0x40
 800181a:	f000 f81f 	bl	800185c <heaveCalc>
 800181e:	eef0 7a40 	vmov.f32	s15, s0
 8001822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001826:	ee17 3a90 	vmov	r3, s15
 800182a:	617b      	str	r3, [r7, #20]
		d2 = heaveCalc(RockerWingH_R,Ld);
 800182c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001834:	ee17 1a90 	vmov	r1, s15
 8001838:	2040      	movs	r0, #64	; 0x40
 800183a:	f000 f80f 	bl	800185c <heaveCalc>
 800183e:	eef0 7a40 	vmov.f32	s15, s0
 8001842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001846:	ee17 3a90 	vmov	r3, s15
 800184a:	613b      	str	r3, [r7, #16]
	}
	return d1+d2;
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4413      	add	r3, r2
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <heaveCalc>:

static float heaveCalc(int RW, int d){
 800185c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]

	return (52*cos(i-d)-RW*cos(i));
 8001868:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80018f8 <heaveCalc+0x9c>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	ee07 3a90 	vmov	s15, r3
 8001872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187a:	ee17 0a90 	vmov	r0, s15
 800187e:	f7fe fe07 	bl	8000490 <__aeabi_f2d>
 8001882:	4603      	mov	r3, r0
 8001884:	460c      	mov	r4, r1
 8001886:	ec44 3b10 	vmov	d0, r3, r4
 800188a:	f004 fe65 	bl	8006558 <cos>
 800188e:	ec51 0b10 	vmov	r0, r1, d0
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <heaveCalc+0xa0>)
 8001898:	f7fe fe52 	bl	8000540 <__aeabi_dmul>
 800189c:	4603      	mov	r3, r0
 800189e:	460c      	mov	r4, r1
 80018a0:	4625      	mov	r5, r4
 80018a2:	461c      	mov	r4, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7fe fde1 	bl	800046c <__aeabi_i2d>
 80018aa:	4680      	mov	r8, r0
 80018ac:	4689      	mov	r9, r1
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <heaveCalc+0xa4>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fded 	bl	8000490 <__aeabi_f2d>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	ec43 2b10 	vmov	d0, r2, r3
 80018be:	f004 fe4b 	bl	8006558 <cos>
 80018c2:	ec53 2b10 	vmov	r2, r3, d0
 80018c6:	4640      	mov	r0, r8
 80018c8:	4649      	mov	r1, r9
 80018ca:	f7fe fe39 	bl	8000540 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4620      	mov	r0, r4
 80018d4:	4629      	mov	r1, r5
 80018d6:	f7fe fc7b 	bl	80001d0 <__aeabi_dsub>
 80018da:	4603      	mov	r3, r0
 80018dc:	460c      	mov	r4, r1
 80018de:	4618      	mov	r0, r3
 80018e0:	4621      	mov	r1, r4
 80018e2:	f7ff f905 	bl	8000af0 <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	ee07 3a90 	vmov	s15, r3
}
 80018ec:	eeb0 0a67 	vmov.f32	s0, s15
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018f8:	42b56666 	.word	0x42b56666
 80018fc:	404a0000 	.word	0x404a0000
 8001900:	42b56666 	.word	0x42b56666

08001904 <GAS_Shock_Run>:

void GAS_Shock_Run(pwmIn_t *pwmIn1, pwmIn_t *pwmIn2 ,int isUpdated){
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]

	uint32_t TxMailBox;

	angle.AngleR = (3600*(pwmIn1->Width-SeraRisingTime)/(SeraMaxWidth-SeraRisingTime));
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	f5a3 2368 	sub.w	r3, r3, #950272	; 0xe8000
 8001920:	f5a3 6369 	sub.w	r3, r3, #3728	; 0xe90
 8001924:	4a32      	ldr	r2, [pc, #200]	; (80019f0 <GAS_Shock_Run+0xec>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	09db      	lsrs	r3, r3, #7
 800192c:	461a      	mov	r2, r3
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <GAS_Shock_Run+0xf0>)
 8001930:	609a      	str	r2, [r3, #8]
	if(angle.AngleR>=3600)angle.AngleR=0;
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <GAS_Shock_Run+0xf0>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800193a:	db02      	blt.n	8001942 <GAS_Shock_Run+0x3e>
 800193c:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <GAS_Shock_Run+0xf0>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]

	angle.AngleL = (3600*(pwmIn2->Width-SeraRisingTime)/(SeraMaxWidth-SeraRisingTime));
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800194a:	fb02 f303 	mul.w	r3, r2, r3
 800194e:	f5a3 2368 	sub.w	r3, r3, #950272	; 0xe8000
 8001952:	f5a3 6369 	sub.w	r3, r3, #3728	; 0xe90
 8001956:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <GAS_Shock_Run+0xec>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	09db      	lsrs	r3, r3, #7
 800195e:	461a      	mov	r2, r3
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <GAS_Shock_Run+0xf0>)
 8001962:	60da      	str	r2, [r3, #12]
	if(angle.AngleL>=3600)angle.AngleL=0;
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <GAS_Shock_Run+0xf0>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800196c:	db02      	blt.n	8001974 <GAS_Shock_Run+0x70>
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <GAS_Shock_Run+0xf0>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]

	GAS_Shock_parse(&angle);
 8001974:	481f      	ldr	r0, [pc, #124]	; (80019f4 <GAS_Shock_Run+0xf0>)
 8001976:	f7ff fd73 	bl	8001460 <GAS_Shock_parse>

	stm32_1.B.isUpdated = isUpdated;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <GAS_Shock_Run+0xf4>)
 800197e:	6013      	str	r3, [r2, #0]
	stm32_1.B.Sensor0 = GAS_Shock_calculateRoll(angle.parsedAngleR,angle.parsedAngleL,LOCATION);
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <GAS_Shock_Run+0xf0>)
 8001982:	edd3 7a04 	vldr	s15, [r3, #16]
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <GAS_Shock_Run+0xf0>)
 8001988:	ed93 7a05 	vldr	s14, [r3, #20]
 800198c:	2000      	movs	r0, #0
 800198e:	eef0 0a47 	vmov.f32	s1, s14
 8001992:	eeb0 0a67 	vmov.f32	s0, s15
 8001996:	f7ff fdbf 	bl	8001518 <GAS_Shock_calculateRoll>
 800199a:	eef0 7a40 	vmov.f32	s15, s0
 800199e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a2:	ee17 3a90 	vmov	r3, s15
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <GAS_Shock_Run+0xf4>)
 80019aa:	809a      	strh	r2, [r3, #4]
	stm32_1.B.Sensor1 = GAS_Shock_calculateHeave(angle.parsedAngleR,angle.parsedAngleL,LOCATION);
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <GAS_Shock_Run+0xf0>)
 80019ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <GAS_Shock_Run+0xf0>)
 80019b4:	ed93 7a05 	vldr	s14, [r3, #20]
 80019b8:	2000      	movs	r0, #0
 80019ba:	eef0 0a47 	vmov.f32	s1, s14
 80019be:	eeb0 0a67 	vmov.f32	s0, s15
 80019c2:	f7ff fef5 	bl	80017b0 <GAS_Shock_calculateHeave>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <GAS_Shock_Run+0xf4>)
 80019cc:	80da      	strh	r2, [r3, #6]
	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 80019ce:	480b      	ldr	r0, [pc, #44]	; (80019fc <GAS_Shock_Run+0xf8>)
 80019d0:	f001 ffd9 	bl	8003986 <HAL_CAN_GetTxMailboxesFreeLevel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	617b      	str	r3, [r7, #20]
	HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, &stm32_1.TxData[0], &TxMailBox);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <GAS_Shock_Run+0xf4>)
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <GAS_Shock_Run+0xfc>)
 80019e0:	4806      	ldr	r0, [pc, #24]	; (80019fc <GAS_Shock_Run+0xf8>)
 80019e2:	f001 fef5 	bl	80037d0 <HAL_CAN_AddTxMessage>

}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	04101fff 	.word	0x04101fff
 80019f4:	200001a4 	.word	0x200001a4
 80019f8:	200000dc 	.word	0x200000dc
 80019fc:	200002f4 	.word	0x200002f4
 8001a00:	200000c4 	.word	0x200000c4

08001a04 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a18:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <MX_ADC1_Init+0x9c>)
 8001a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <MX_ADC1_Init+0xa0>)
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a66:	f001 fa31 	bl	8002ecc <HAL_ADC_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a70:	f000 fcc0 	bl	80023f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a80:	463b      	mov	r3, r7
 8001a82:	4619      	mov	r1, r3
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_ADC1_Init+0x98>)
 8001a86:	f001 fa65 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a90:	f000 fcb0 	bl	80023f4 <Error_Handler>
  }

}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000204 	.word	0x20000204
 8001aa0:	40012000 	.word	0x40012000
 8001aa4:	0f000001 	.word	0x0f000001

08001aa8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001abc:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <MX_ADC2_Init+0x9c>)
 8001abe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001ac2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ac6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001aea:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <MX_ADC2_Init+0xa0>)
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b08:	480d      	ldr	r0, [pc, #52]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001b0a:	f001 f9df 	bl	8002ecc <HAL_ADC_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001b14:	f000 fc6e 	bl	80023f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b24:	463b      	mov	r3, r7
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_ADC2_Init+0x98>)
 8001b2a:	f001 fa13 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001b34:	f000 fc5e 	bl	80023f4 <Error_Handler>
  }

}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200001bc 	.word	0x200001bc
 8001b44:	40012100 	.word	0x40012100
 8001b48:	0f000001 	.word	0x0f000001

08001b4c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b52:	463b      	mov	r3, r7
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001b60:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <MX_ADC3_Init+0x9c>)
 8001b62:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001b66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b6a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b8c:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <MX_ADC3_Init+0xa0>)
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b92:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001bac:	480d      	ldr	r0, [pc, #52]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001bae:	f001 f98d 	bl	8002ecc <HAL_ADC_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001bb8:	f000 fc1c 	bl	80023f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bc8:	463b      	mov	r3, r7
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_ADC3_Init+0x98>)
 8001bce:	f001 f9c1 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001bd8:	f000 fc0c 	bl	80023f4 <Error_Handler>
  }

}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2000024c 	.word	0x2000024c
 8001be8:	40012200 	.word	0x40012200
 8001bec:	0f000001 	.word	0x0f000001

08001bf0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b092      	sub	sp, #72	; 0x48
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a91      	ldr	r2, [pc, #580]	; (8001e54 <HAL_ADC_MspInit+0x264>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	f040 808d 	bne.w	8001d2e <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	633b      	str	r3, [r7, #48]	; 0x30
 8001c18:	4b8f      	ldr	r3, [pc, #572]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	4a8e      	ldr	r2, [pc, #568]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	6453      	str	r3, [r2, #68]	; 0x44
 8001c24:	4b8c      	ldr	r3, [pc, #560]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c34:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a87      	ldr	r2, [pc, #540]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c40:	4b85      	ldr	r3, [pc, #532]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c50:	4b81      	ldr	r3, [pc, #516]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	4a80      	ldr	r2, [pc, #512]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5c:	4b7e      	ldr	r3, [pc, #504]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6c:	4b7a      	ldr	r3, [pc, #488]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a79      	ldr	r2, [pc, #484]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30
 8001c78:	4b77      	ldr	r3, [pc, #476]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c84:	233f      	movs	r3, #63	; 0x3f
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c94:	4619      	mov	r1, r3
 8001c96:	4871      	ldr	r0, [pc, #452]	; (8001e5c <HAL_ADC_MspInit+0x26c>)
 8001c98:	f002 fe8c 	bl	80049b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001c9c:	23fe      	movs	r3, #254	; 0xfe
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cac:	4619      	mov	r1, r3
 8001cae:	486c      	ldr	r0, [pc, #432]	; (8001e60 <HAL_ADC_MspInit+0x270>)
 8001cb0:	f002 fe80 	bl	80049b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4867      	ldr	r0, [pc, #412]	; (8001e64 <HAL_ADC_MspInit+0x274>)
 8001cc8:	f002 fe74 	bl	80049b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ccc:	4b66      	ldr	r3, [pc, #408]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001cce:	4a67      	ldr	r2, [pc, #412]	; (8001e6c <HAL_ADC_MspInit+0x27c>)
 8001cd0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cd2:	4b65      	ldr	r3, [pc, #404]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cd8:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cde:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ce4:	4b60      	ldr	r3, [pc, #384]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cec:	4b5e      	ldr	r3, [pc, #376]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001cee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cf2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cf4:	4b5c      	ldr	r3, [pc, #368]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001cf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cfa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cfc:	4b5a      	ldr	r3, [pc, #360]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d02:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d04:	4b58      	ldr	r3, [pc, #352]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d0a:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d10:	4855      	ldr	r0, [pc, #340]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001d12:	f002 fb67 	bl	80043e4 <HAL_DMA_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001d1c:	f000 fb6a 	bl	80023f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a51      	ldr	r2, [pc, #324]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
 8001d26:	4a50      	ldr	r2, [pc, #320]	; (8001e68 <HAL_ADC_MspInit+0x278>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001d2c:	e08e      	b.n	8001e4c <HAL_ADC_MspInit+0x25c>
  else if(adcHandle->Instance==ADC2)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a4f      	ldr	r2, [pc, #316]	; (8001e70 <HAL_ADC_MspInit+0x280>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d142      	bne.n	8001dbe <HAL_ADC_MspInit+0x1ce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	4a45      	ldr	r2, [pc, #276]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d46:	6453      	str	r3, [r2, #68]	; 0x44
 8001d48:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d50:	623b      	str	r3, [r7, #32]
 8001d52:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	4a3e      	ldr	r2, [pc, #248]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6313      	str	r3, [r2, #48]	; 0x30
 8001d64:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	4a37      	ldr	r2, [pc, #220]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d80:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d90:	2303      	movs	r3, #3
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	482f      	ldr	r0, [pc, #188]	; (8001e5c <HAL_ADC_MspInit+0x26c>)
 8001da0:	f002 fe08 	bl	80049b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001da4:	233e      	movs	r3, #62	; 0x3e
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da8:	2303      	movs	r3, #3
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001db4:	4619      	mov	r1, r3
 8001db6:	482a      	ldr	r0, [pc, #168]	; (8001e60 <HAL_ADC_MspInit+0x270>)
 8001db8:	f002 fdfc 	bl	80049b4 <HAL_GPIO_Init>
}
 8001dbc:	e046      	b.n	8001e4c <HAL_ADC_MspInit+0x25c>
  else if(adcHandle->Instance==ADC3)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a2c      	ldr	r2, [pc, #176]	; (8001e74 <HAL_ADC_MspInit+0x284>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d141      	bne.n	8001e4c <HAL_ADC_MspInit+0x25c>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd6:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6313      	str	r3, [r2, #48]	; 0x30
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_ADC_MspInit+0x268>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e20:	2303      	movs	r3, #3
 8001e22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480b      	ldr	r0, [pc, #44]	; (8001e5c <HAL_ADC_MspInit+0x26c>)
 8001e30:	f002 fdc0 	bl	80049b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e34:	230e      	movs	r3, #14
 8001e36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <HAL_ADC_MspInit+0x270>)
 8001e48:	f002 fdb4 	bl	80049b4 <HAL_GPIO_Init>
}
 8001e4c:	bf00      	nop
 8001e4e:	3748      	adds	r7, #72	; 0x48
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40012000 	.word	0x40012000
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400
 8001e68:	20000294 	.word	0x20000294
 8001e6c:	40026410 	.word	0x40026410
 8001e70:	40012100 	.word	0x40012100
 8001e74:	40012200 	.word	0x40012200

08001e78 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8001e7c:	4b17      	ldr	r3, [pc, #92]	; (8001edc <MX_CAN2_Init+0x64>)
 8001e7e:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <MX_CAN2_Init+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <MX_CAN2_Init+0x64>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <MX_CAN2_Init+0x64>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <MX_CAN2_Init+0x64>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <MX_CAN2_Init+0x64>)
 8001e96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e9a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <MX_CAN2_Init+0x64>)
 8001e9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ea2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <MX_CAN2_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <MX_CAN2_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <MX_CAN2_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <MX_CAN2_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <MX_CAN2_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <MX_CAN2_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <MX_CAN2_Init+0x64>)
 8001eca:	f001 fa61 	bl	8003390 <HAL_CAN_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001ed4:	f000 fa8e 	bl	80023f4 <Error_Handler>
  }

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	200002f4 	.word	0x200002f4
 8001ee0:	40006800 	.word	0x40006800

08001ee4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a28      	ldr	r2, [pc, #160]	; (8001fa4 <HAL_CAN_MspInit+0xc0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d14a      	bne.n	8001f9c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001f6c:	2309      	movs	r3, #9
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	480d      	ldr	r0, [pc, #52]	; (8001fac <HAL_CAN_MspInit+0xc8>)
 8001f78:	f002 fd1c 	bl	80049b4 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2040      	movs	r0, #64	; 0x40
 8001f82:	f002 f968 	bl	8004256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001f86:	2040      	movs	r0, #64	; 0x40
 8001f88:	f002 f981 	bl	800428e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2041      	movs	r0, #65	; 0x41
 8001f92:	f002 f960 	bl	8004256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001f96:	2041      	movs	r0, #65	; 0x41
 8001f98:	f002 f979 	bl	800428e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	; 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40006800 	.word	0x40006800
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020400 	.word	0x40020400

08001fb0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_CRC_Init+0x20>)
 8001fb6:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <MX_CRC_Init+0x24>)
 8001fb8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_CRC_Init+0x20>)
 8001fbc:	f002 f987 	bl	80042ce <HAL_CRC_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001fc6:	f000 fa15 	bl	80023f4 <Error_Handler>
  }

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000031c 	.word	0x2000031c
 8001fd4:	40023000 	.word	0x40023000

08001fd8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <HAL_CRC_MspInit+0x3c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10d      	bne.n	8002006 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_CRC_MspInit+0x40>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <HAL_CRC_MspInit+0x40>)
 8001ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_CRC_MspInit+0x40>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40023000 	.word	0x40023000
 8002018:	40023800 	.word	0x40023800

0800201c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8002022:	463b      	mov	r3, r7
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <MX_DAC_Init+0x4c>)
 800202c:	4a0f      	ldr	r2, [pc, #60]	; (800206c <MX_DAC_Init+0x50>)
 800202e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002030:	480d      	ldr	r0, [pc, #52]	; (8002068 <MX_DAC_Init+0x4c>)
 8002032:	f002 f968 	bl	8004306 <HAL_DAC_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800203c:	f000 f9da 	bl	80023f4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002040:	2300      	movs	r3, #0
 8002042:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002048:	463b      	mov	r3, r7
 800204a:	2200      	movs	r2, #0
 800204c:	4619      	mov	r1, r3
 800204e:	4806      	ldr	r0, [pc, #24]	; (8002068 <MX_DAC_Init+0x4c>)
 8002050:	f002 f97b 	bl	800434a <HAL_DAC_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800205a:	f000 f9cb 	bl	80023f4 <Error_Handler>
  }

}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000324 	.word	0x20000324
 800206c:	40007400 	.word	0x40007400

08002070 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a17      	ldr	r2, [pc, #92]	; (80020ec <HAL_DAC_MspInit+0x7c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d127      	bne.n	80020e2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_DAC_MspInit+0x80>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <HAL_DAC_MspInit+0x80>)
 800209c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_DAC_MspInit+0x80>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_DAC_MspInit+0x80>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <HAL_DAC_MspInit+0x80>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_DAC_MspInit+0x80>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020ca:	2310      	movs	r3, #16
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ce:	2303      	movs	r3, #3
 80020d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	; (80020f4 <HAL_DAC_MspInit+0x84>)
 80020de:	f002 fc69 	bl	80049b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80020e2:	bf00      	nop
 80020e4:	3728      	adds	r7, #40	; 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40007400 	.word	0x40007400
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020000 	.word	0x40020000

080020f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_DMA_Init+0x3c>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <MX_DMA_Init+0x3c>)
 8002108:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_DMA_Init+0x3c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2038      	movs	r0, #56	; 0x38
 8002120:	f002 f899 	bl	8004256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002124:	2038      	movs	r0, #56	; 0x38
 8002126:	f002 f8b2 	bl	800428e <HAL_NVIC_EnableIRQ>

}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <MX_GPIO_Init>:
     PC12   ------> SPI3_MOSI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
 800214c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b5a      	ldr	r3, [pc, #360]	; (80022bc <MX_GPIO_Init+0x184>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a59      	ldr	r2, [pc, #356]	; (80022bc <MX_GPIO_Init+0x184>)
 8002158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b57      	ldr	r3, [pc, #348]	; (80022bc <MX_GPIO_Init+0x184>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b53      	ldr	r3, [pc, #332]	; (80022bc <MX_GPIO_Init+0x184>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a52      	ldr	r2, [pc, #328]	; (80022bc <MX_GPIO_Init+0x184>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b50      	ldr	r3, [pc, #320]	; (80022bc <MX_GPIO_Init+0x184>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <MX_GPIO_Init+0x184>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <MX_GPIO_Init+0x184>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b49      	ldr	r3, [pc, #292]	; (80022bc <MX_GPIO_Init+0x184>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	4b45      	ldr	r3, [pc, #276]	; (80022bc <MX_GPIO_Init+0x184>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a44      	ldr	r2, [pc, #272]	; (80022bc <MX_GPIO_Init+0x184>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b42      	ldr	r3, [pc, #264]	; (80022bc <MX_GPIO_Init+0x184>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	4b3e      	ldr	r3, [pc, #248]	; (80022bc <MX_GPIO_Init+0x184>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a3d      	ldr	r2, [pc, #244]	; (80022bc <MX_GPIO_Init+0x184>)
 80021c8:	f043 0308 	orr.w	r3, r3, #8
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <MX_GPIO_Init+0x184>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80021da:	2200      	movs	r2, #0
 80021dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021e0:	4837      	ldr	r0, [pc, #220]	; (80022c0 <MX_GPIO_Init+0x188>)
 80021e2:	f002 fd81 	bl	8004ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2104      	movs	r1, #4
 80021ea:	4836      	ldr	r0, [pc, #216]	; (80022c4 <MX_GPIO_Init+0x18c>)
 80021ec:	f002 fd7c 	bl	8004ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	482d      	ldr	r0, [pc, #180]	; (80022c0 <MX_GPIO_Init+0x188>)
 800220a:	f002 fbd3 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800220e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002220:	2301      	movs	r3, #1
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	4825      	ldr	r0, [pc, #148]	; (80022c0 <MX_GPIO_Init+0x188>)
 800222c:	f002 fbc2 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002242:	2306      	movs	r3, #6
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	481e      	ldr	r0, [pc, #120]	; (80022c8 <MX_GPIO_Init+0x190>)
 800224e:	f002 fbb1 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002252:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002264:	2306      	movs	r3, #6
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4619      	mov	r1, r3
 800226e:	4817      	ldr	r0, [pc, #92]	; (80022cc <MX_GPIO_Init+0x194>)
 8002270:	f002 fba0 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002274:	2304      	movs	r3, #4
 8002276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002278:	2301      	movs	r3, #1
 800227a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	4619      	mov	r1, r3
 800228a:	480e      	ldr	r0, [pc, #56]	; (80022c4 <MX_GPIO_Init+0x18c>)
 800228c:	f002 fb92 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002290:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002296:	2312      	movs	r3, #18
 8002298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800229a:	2301      	movs	r3, #1
 800229c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022a2:	2304      	movs	r3, #4
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	4804      	ldr	r0, [pc, #16]	; (80022c0 <MX_GPIO_Init+0x188>)
 80022ae:	f002 fb81 	bl	80049b4 <HAL_GPIO_Init>

}
 80022b2:	bf00      	nop
 80022b4:	3728      	adds	r7, #40	; 0x28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020400 	.word	0x40020400
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40020800 	.word	0x40020800

080022d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022d4:	f000 fd88 	bl	8002de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022d8:	f000 f820 	bl	800231c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022dc:	f7ff ff2c 	bl	8002138 <MX_GPIO_Init>
  MX_DMA_Init();
 80022e0:	f7ff ff0a 	bl	80020f8 <MX_DMA_Init>
  MX_ADC1_Init();
 80022e4:	f7ff fb8e 	bl	8001a04 <MX_ADC1_Init>
  MX_ADC2_Init();
 80022e8:	f7ff fbde 	bl	8001aa8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80022ec:	f7ff fc2e 	bl	8001b4c <MX_ADC3_Init>
  MX_CAN2_Init();
 80022f0:	f7ff fdc2 	bl	8001e78 <MX_CAN2_Init>
  MX_DAC_Init();
 80022f4:	f7ff fe92 	bl	800201c <MX_DAC_Init>
  MX_CRC_Init();
 80022f8:	f7ff fe5a 	bl	8001fb0 <MX_CRC_Init>
  MX_TIM1_Init();
 80022fc:	f000 f926 	bl	800254c <MX_TIM1_Init>
  MX_TIM3_Init();
 8002300:	f000 f9c4 	bl	800268c <MX_TIM3_Init>
  MX_TIM8_Init();
 8002304:	f000 fae8 	bl	80028d8 <MX_TIM8_Init>
  MX_TIM4_Init();
 8002308:	f000 fa4a 	bl	80027a0 <MX_TIM4_Init>
  MX_TIM12_Init();
 800230c:	f000 fb84 	bl	8002a18 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  GAS_Scheduler_init();
 8002310:	f7fe ffca 	bl	80012a8 <GAS_Scheduler_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 GAS_Scheduler();
 8002314:	f7ff f860 	bl	80013d8 <GAS_Scheduler>
  {
 8002318:	e7fc      	b.n	8002314 <main+0x44>
	...

0800231c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b094      	sub	sp, #80	; 0x50
 8002320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002322:	f107 0320 	add.w	r3, r7, #32
 8002326:	2230      	movs	r2, #48	; 0x30
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f004 f90c 	bl	8006548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	4b29      	ldr	r3, [pc, #164]	; (80023ec <SystemClock_Config+0xd0>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	4a28      	ldr	r2, [pc, #160]	; (80023ec <SystemClock_Config+0xd0>)
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234e:	6413      	str	r3, [r2, #64]	; 0x40
 8002350:	4b26      	ldr	r3, [pc, #152]	; (80023ec <SystemClock_Config+0xd0>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <SystemClock_Config+0xd4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <SystemClock_Config+0xd4>)
 8002366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <SystemClock_Config+0xd4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002378:	2301      	movs	r3, #1
 800237a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800237c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002382:	2302      	movs	r3, #2
 8002384:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002386:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800238a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800238c:	2304      	movs	r3, #4
 800238e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002390:	23a8      	movs	r3, #168	; 0xa8
 8002392:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002394:	2302      	movs	r3, #2
 8002396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002398:	2307      	movs	r3, #7
 800239a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239c:	f107 0320 	add.w	r3, r7, #32
 80023a0:	4618      	mov	r0, r3
 80023a2:	f002 fcbb 	bl	8004d1c <HAL_RCC_OscConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023ac:	f000 f822 	bl	80023f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b0:	230f      	movs	r3, #15
 80023b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b4:	2302      	movs	r3, #2
 80023b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	2105      	movs	r1, #5
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 ff14 	bl	80051fc <HAL_RCC_ClockConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023da:	f000 f80b 	bl	80023f4 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80023de:	f002 fff3 	bl	80053c8 <HAL_RCC_EnableCSS>
}
 80023e2:	bf00      	nop
 80023e4:	3750      	adds	r7, #80	; 0x50
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40007000 	.word	0x40007000

080023f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023fa:	e7fe      	b.n	80023fa <Error_Handler+0x6>

080023fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_MspInit+0x4c>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <HAL_MspInit+0x4c>)
 800240c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002410:	6453      	str	r3, [r2, #68]	; 0x44
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_MspInit+0x4c>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_MspInit+0x4c>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a08      	ldr	r2, [pc, #32]	; (8002448 <HAL_MspInit+0x4c>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_MspInit+0x4c>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002450:	f003 f89e 	bl	8005590 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <NMI_Handler+0x8>

08002456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <MemManage_Handler+0x4>

08002462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <UsageFault_Handler+0x4>

0800246e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800249c:	f000 fcf6 	bl	8002e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80024a0:	f001 ff0f 	bl	80042c2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <TIM1_CC_IRQHandler+0x10>)
 80024ae:	f003 f977 	bl	80057a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200003f8 	.word	0x200003f8

080024bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <TIM4_IRQHandler+0x10>)
 80024c2:	f003 f96d 	bl	80057a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000378 	.word	0x20000378

080024d0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <TIM8_CC_IRQHandler+0x10>)
 80024d6:	f003 f963 	bl	80057a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000338 	.word	0x20000338

080024e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <DMA2_Stream0_IRQHandler+0x10>)
 80024ea:	f002 f829 	bl	8004540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000294 	.word	0x20000294

080024f8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <CAN2_RX0_IRQHandler+0x10>)
 80024fe:	f001 fbaf 	bl	8003c60 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200002f4 	.word	0x200002f4

0800250c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <CAN2_RX1_IRQHandler+0x10>)
 8002512:	f001 fba5 	bl	8003c60 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200002f4 	.word	0x200002f4

08002520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <SystemInit+0x28>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	4a07      	ldr	r2, [pc, #28]	; (8002548 <SystemInit+0x28>)
 800252c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <SystemInit+0x28>)
 8002536:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800253a:	609a      	str	r2, [r3, #8]
#endif
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b090      	sub	sp, #64	; 0x40
 8002550:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002552:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 8002586:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <MX_TIM1_Init+0x138>)
 8002588:	4a3f      	ldr	r2, [pc, #252]	; (8002688 <MX_TIM1_Init+0x13c>)
 800258a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800258c:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <MX_TIM1_Init+0x138>)
 800258e:	22a7      	movs	r2, #167	; 0xa7
 8002590:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002592:	4b3c      	ldr	r3, [pc, #240]	; (8002684 <MX_TIM1_Init+0x138>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002598:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <MX_TIM1_Init+0x138>)
 800259a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800259e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a0:	4b38      	ldr	r3, [pc, #224]	; (8002684 <MX_TIM1_Init+0x138>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025a6:	4b37      	ldr	r3, [pc, #220]	; (8002684 <MX_TIM1_Init+0x138>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <MX_TIM1_Init+0x138>)
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025b2:	4834      	ldr	r0, [pc, #208]	; (8002684 <MX_TIM1_Init+0x138>)
 80025b4:	f003 f807 	bl	80055c6 <HAL_TIM_Base_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80025be:	f7ff ff19 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025cc:	4619      	mov	r1, r3
 80025ce:	482d      	ldr	r0, [pc, #180]	; (8002684 <MX_TIM1_Init+0x138>)
 80025d0:	f003 fa8a 	bl	8005ae8 <HAL_TIM_ConfigClockSource>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80025da:	f7ff ff0b 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80025de:	4829      	ldr	r0, [pc, #164]	; (8002684 <MX_TIM1_Init+0x138>)
 80025e0:	f003 f840 	bl	8005664 <HAL_TIM_IC_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80025ea:	f7ff ff03 	bl	80023f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80025ee:	2304      	movs	r3, #4
 80025f0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80025f2:	2350      	movs	r3, #80	; 0x50
 80025f4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80025fe:	f107 031c 	add.w	r3, r7, #28
 8002602:	4619      	mov	r1, r3
 8002604:	481f      	ldr	r0, [pc, #124]	; (8002684 <MX_TIM1_Init+0x138>)
 8002606:	f003 fb26 	bl	8005c56 <HAL_TIM_SlaveConfigSynchro>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002610:	f7ff fef0 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4619      	mov	r1, r3
 8002622:	4818      	ldr	r0, [pc, #96]	; (8002684 <MX_TIM1_Init+0x138>)
 8002624:	f003 fed6 	bl	80063d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 800262e:	f7ff fee1 	bl	80023f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002636:	2301      	movs	r3, #1
 8002638:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 800263e:	230f      	movs	r3, #15
 8002640:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2200      	movs	r2, #0
 8002646:	4619      	mov	r1, r3
 8002648:	480e      	ldr	r0, [pc, #56]	; (8002684 <MX_TIM1_Init+0x138>)
 800264a:	f003 f9b1 	bl	80059b0 <HAL_TIM_IC_ConfigChannel>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8002654:	f7ff fece 	bl	80023f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002658:	2302      	movs	r3, #2
 800265a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800265c:	2302      	movs	r3, #2
 800265e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	2204      	movs	r2, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4806      	ldr	r0, [pc, #24]	; (8002684 <MX_TIM1_Init+0x138>)
 800266c:	f003 f9a0 	bl	80059b0 <HAL_TIM_IC_ConfigChannel>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002676:	f7ff febd 	bl	80023f4 <Error_Handler>
  }

}
 800267a:	bf00      	nop
 800267c:	3740      	adds	r7, #64	; 0x40
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200003f8 	.word	0x200003f8
 8002688:	40010000 	.word	0x40010000

0800268c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b090      	sub	sp, #64	; 0x40
 8002690:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80026c6:	4b34      	ldr	r3, [pc, #208]	; (8002798 <MX_TIM3_Init+0x10c>)
 80026c8:	4a34      	ldr	r2, [pc, #208]	; (800279c <MX_TIM3_Init+0x110>)
 80026ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026cc:	4b32      	ldr	r3, [pc, #200]	; (8002798 <MX_TIM3_Init+0x10c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d2:	4b31      	ldr	r3, [pc, #196]	; (8002798 <MX_TIM3_Init+0x10c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80026d8:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <MX_TIM3_Init+0x10c>)
 80026da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e0:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <MX_TIM3_Init+0x10c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e6:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <MX_TIM3_Init+0x10c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026ec:	482a      	ldr	r0, [pc, #168]	; (8002798 <MX_TIM3_Init+0x10c>)
 80026ee:	f002 ff6a 	bl	80055c6 <HAL_TIM_Base_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80026f8:	f7ff fe7c 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002706:	4619      	mov	r1, r3
 8002708:	4823      	ldr	r0, [pc, #140]	; (8002798 <MX_TIM3_Init+0x10c>)
 800270a:	f003 f9ed 	bl	8005ae8 <HAL_TIM_ConfigClockSource>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002714:	f7ff fe6e 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002718:	481f      	ldr	r0, [pc, #124]	; (8002798 <MX_TIM3_Init+0x10c>)
 800271a:	f002 ffa3 	bl	8005664 <HAL_TIM_IC_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002724:	f7ff fe66 	bl	80023f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800272c:	2340      	movs	r3, #64	; 0x40
 800272e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002734:	f107 031c 	add.w	r3, r7, #28
 8002738:	4619      	mov	r1, r3
 800273a:	4817      	ldr	r0, [pc, #92]	; (8002798 <MX_TIM3_Init+0x10c>)
 800273c:	f003 fa8b 	bl	8005c56 <HAL_TIM_SlaveConfigSynchro>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8002746:	f7ff fe55 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	480f      	ldr	r0, [pc, #60]	; (8002798 <MX_TIM3_Init+0x10c>)
 800275a:	f003 fe3b 	bl	80063d4 <HAL_TIMEx_MasterConfigSynchronization>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8002764:	f7ff fe46 	bl	80023f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002768:	2300      	movs	r3, #0
 800276a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 800276c:	2303      	movs	r3, #3
 800276e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	2200      	movs	r2, #0
 800277c:	4619      	mov	r1, r3
 800277e:	4806      	ldr	r0, [pc, #24]	; (8002798 <MX_TIM3_Init+0x10c>)
 8002780:	f003 f916 	bl	80059b0 <HAL_TIM_IC_ConfigChannel>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800278a:	f7ff fe33 	bl	80023f4 <Error_Handler>
  }

}
 800278e:	bf00      	nop
 8002790:	3740      	adds	r7, #64	; 0x40
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200003b8 	.word	0x200003b8
 800279c:	40000400 	.word	0x40000400

080027a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b090      	sub	sp, #64	; 0x40
 80027a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 80027da:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <MX_TIM4_Init+0x130>)
 80027dc:	4a3d      	ldr	r2, [pc, #244]	; (80028d4 <MX_TIM4_Init+0x134>)
 80027de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 80027e0:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <MX_TIM4_Init+0x130>)
 80027e2:	22a7      	movs	r2, #167	; 0xa7
 80027e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e6:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <MX_TIM4_Init+0x130>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027ec:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <MX_TIM4_Init+0x130>)
 80027ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <MX_TIM4_Init+0x130>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fa:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <MX_TIM4_Init+0x130>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002800:	4833      	ldr	r0, [pc, #204]	; (80028d0 <MX_TIM4_Init+0x130>)
 8002802:	f002 fee0 	bl	80055c6 <HAL_TIM_Base_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800280c:	f7ff fdf2 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002814:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002816:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800281a:	4619      	mov	r1, r3
 800281c:	482c      	ldr	r0, [pc, #176]	; (80028d0 <MX_TIM4_Init+0x130>)
 800281e:	f003 f963 	bl	8005ae8 <HAL_TIM_ConfigClockSource>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002828:	f7ff fde4 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800282c:	4828      	ldr	r0, [pc, #160]	; (80028d0 <MX_TIM4_Init+0x130>)
 800282e:	f002 ff19 	bl	8005664 <HAL_TIM_IC_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002838:	f7ff fddc 	bl	80023f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800283c:	2304      	movs	r3, #4
 800283e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002840:	2350      	movs	r3, #80	; 0x50
 8002842:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	4619      	mov	r1, r3
 8002852:	481f      	ldr	r0, [pc, #124]	; (80028d0 <MX_TIM4_Init+0x130>)
 8002854:	f003 f9ff 	bl	8005c56 <HAL_TIM_SlaveConfigSynchro>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 800285e:	f7ff fdc9 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	4619      	mov	r1, r3
 8002870:	4817      	ldr	r0, [pc, #92]	; (80028d0 <MX_TIM4_Init+0x130>)
 8002872:	f003 fdaf 	bl	80063d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800287c:	f7ff fdba 	bl	80023f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002880:	2300      	movs	r3, #0
 8002882:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002884:	2301      	movs	r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 800288c:	230f      	movs	r3, #15
 800288e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	2200      	movs	r2, #0
 8002894:	4619      	mov	r1, r3
 8002896:	480e      	ldr	r0, [pc, #56]	; (80028d0 <MX_TIM4_Init+0x130>)
 8002898:	f003 f88a 	bl	80059b0 <HAL_TIM_IC_ConfigChannel>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 80028a2:	f7ff fda7 	bl	80023f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80028a6:	2302      	movs	r3, #2
 80028a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80028aa:	2302      	movs	r3, #2
 80028ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	2204      	movs	r2, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4805      	ldr	r0, [pc, #20]	; (80028d0 <MX_TIM4_Init+0x130>)
 80028ba:	f003 f879 	bl	80059b0 <HAL_TIM_IC_ConfigChannel>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM4_Init+0x128>
  {
    Error_Handler();
 80028c4:	f7ff fd96 	bl	80023f4 <Error_Handler>
  }

}
 80028c8:	bf00      	nop
 80028ca:	3740      	adds	r7, #64	; 0x40
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000378 	.word	0x20000378
 80028d4:	40000800 	.word	0x40000800

080028d8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b090      	sub	sp, #64	; 0x40
 80028dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]

  htim8.Instance = TIM8;
 8002912:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <MX_TIM8_Init+0x138>)
 8002914:	4a3f      	ldr	r2, [pc, #252]	; (8002a14 <MX_TIM8_Init+0x13c>)
 8002916:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8002918:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <MX_TIM8_Init+0x138>)
 800291a:	22a7      	movs	r2, #167	; 0xa7
 800291c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291e:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <MX_TIM8_Init+0x138>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002924:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <MX_TIM8_Init+0x138>)
 8002926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800292a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292c:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <MX_TIM8_Init+0x138>)
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002932:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <MX_TIM8_Init+0x138>)
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <MX_TIM8_Init+0x138>)
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800293e:	4834      	ldr	r0, [pc, #208]	; (8002a10 <MX_TIM8_Init+0x138>)
 8002940:	f002 fe41 	bl	80055c6 <HAL_TIM_Base_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800294a:	f7ff fd53 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800294e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002954:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002958:	4619      	mov	r1, r3
 800295a:	482d      	ldr	r0, [pc, #180]	; (8002a10 <MX_TIM8_Init+0x138>)
 800295c:	f003 f8c4 	bl	8005ae8 <HAL_TIM_ConfigClockSource>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8002966:	f7ff fd45 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800296a:	4829      	ldr	r0, [pc, #164]	; (8002a10 <MX_TIM8_Init+0x138>)
 800296c:	f002 fe7a 	bl	8005664 <HAL_TIM_IC_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8002976:	f7ff fd3d 	bl	80023f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800297a:	2304      	movs	r3, #4
 800297c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800297e:	2350      	movs	r3, #80	; 0x50
 8002980:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800298a:	f107 031c 	add.w	r3, r7, #28
 800298e:	4619      	mov	r1, r3
 8002990:	481f      	ldr	r0, [pc, #124]	; (8002a10 <MX_TIM8_Init+0x138>)
 8002992:	f003 f960 	bl	8005c56 <HAL_TIM_SlaveConfigSynchro>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 800299c:	f7ff fd2a 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	4818      	ldr	r0, [pc, #96]	; (8002a10 <MX_TIM8_Init+0x138>)
 80029b0:	f003 fd10 	bl	80063d4 <HAL_TIMEx_MasterConfigSynchronization>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 80029ba:	f7ff fd1b 	bl	80023f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80029c2:	2301      	movs	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80029ca:	230f      	movs	r3, #15
 80029cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2200      	movs	r2, #0
 80029d2:	4619      	mov	r1, r3
 80029d4:	480e      	ldr	r0, [pc, #56]	; (8002a10 <MX_TIM8_Init+0x138>)
 80029d6:	f002 ffeb 	bl	80059b0 <HAL_TIM_IC_ConfigChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 80029e0:	f7ff fd08 	bl	80023f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80029e4:	2302      	movs	r3, #2
 80029e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80029e8:	2302      	movs	r3, #2
 80029ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	2204      	movs	r2, #4
 80029f4:	4619      	mov	r1, r3
 80029f6:	4806      	ldr	r0, [pc, #24]	; (8002a10 <MX_TIM8_Init+0x138>)
 80029f8:	f002 ffda 	bl	80059b0 <HAL_TIM_IC_ConfigChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8002a02:	f7ff fcf7 	bl	80023f4 <Error_Handler>
  }

}
 8002a06:	bf00      	nop
 8002a08:	3740      	adds	r7, #64	; 0x40
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000338 	.word	0x20000338
 8002a14:	40010400 	.word	0x40010400

08002a18 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	; 0x38
 8002a1c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <MX_TIM12_Init+0x108>)
 8002a4a:	4a36      	ldr	r2, [pc, #216]	; (8002b24 <MX_TIM12_Init+0x10c>)
 8002a4c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 167;
 8002a4e:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <MX_TIM12_Init+0x108>)
 8002a50:	22a7      	movs	r2, #167	; 0xa7
 8002a52:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a54:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <MX_TIM12_Init+0x108>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <MX_TIM12_Init+0x108>)
 8002a5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a60:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a62:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <MX_TIM12_Init+0x108>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a68:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <MX_TIM12_Init+0x108>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002a6e:	482c      	ldr	r0, [pc, #176]	; (8002b20 <MX_TIM12_Init+0x108>)
 8002a70:	f002 fda9 	bl	80055c6 <HAL_TIM_Base_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8002a7a:	f7ff fcbb 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4825      	ldr	r0, [pc, #148]	; (8002b20 <MX_TIM12_Init+0x108>)
 8002a8c:	f003 f82c 	bl	8005ae8 <HAL_TIM_ConfigClockSource>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8002a96:	f7ff fcad 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8002a9a:	4821      	ldr	r0, [pc, #132]	; (8002b20 <MX_TIM12_Init+0x108>)
 8002a9c:	f002 fde2 	bl	8005664 <HAL_TIM_IC_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 8002aa6:	f7ff fca5 	bl	80023f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002aaa:	2304      	movs	r3, #4
 8002aac:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002aae:	2350      	movs	r3, #80	; 0x50
 8002ab0:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerFilter = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8002aba:	f107 0314 	add.w	r3, r7, #20
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4817      	ldr	r0, [pc, #92]	; (8002b20 <MX_TIM12_Init+0x108>)
 8002ac2:	f003 f8c8 	bl	8005c56 <HAL_TIM_SlaveConfigSynchro>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM12_Init+0xb8>
  {
    Error_Handler();
 8002acc:	f7ff fc92 	bl	80023f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8002adc:	230f      	movs	r3, #15
 8002ade:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	480e      	ldr	r0, [pc, #56]	; (8002b20 <MX_TIM12_Init+0x108>)
 8002ae8:	f002 ff62 	bl	80059b0 <HAL_TIM_IC_ConfigChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM12_Init+0xde>
  {
    Error_Handler();
 8002af2:	f7ff fc7f 	bl	80023f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002af6:	2302      	movs	r3, #2
 8002af8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002afa:	2302      	movs	r3, #2
 8002afc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	2204      	movs	r2, #4
 8002b06:	4619      	mov	r1, r3
 8002b08:	4805      	ldr	r0, [pc, #20]	; (8002b20 <MX_TIM12_Init+0x108>)
 8002b0a:	f002 ff51 	bl	80059b0 <HAL_TIM_IC_ConfigChannel>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 8002b14:	f7ff fc6e 	bl	80023f4 <Error_Handler>
  }

}
 8002b18:	bf00      	nop
 8002b1a:	3738      	adds	r7, #56	; 0x38
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000438 	.word	0x20000438
 8002b24:	40001800 	.word	0x40001800

08002b28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b092      	sub	sp, #72	; 0x48
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a8a      	ldr	r2, [pc, #552]	; (8002d70 <HAL_TIM_Base_MspInit+0x248>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d135      	bne.n	8002bb6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b4e:	4b89      	ldr	r3, [pc, #548]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4a88      	ldr	r2, [pc, #544]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5a:	4b86      	ldr	r3, [pc, #536]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6a:	4b82      	ldr	r3, [pc, #520]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a81      	ldr	r2, [pc, #516]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b7f      	ldr	r3, [pc, #508]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002b82:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2300      	movs	r3, #0
 8002b92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b94:	2301      	movs	r3, #1
 8002b96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4876      	ldr	r0, [pc, #472]	; (8002d78 <HAL_TIM_Base_MspInit+0x250>)
 8002ba0:	f001 ff08 	bl	80049b4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	201b      	movs	r0, #27
 8002baa:	f001 fb54 	bl	8004256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002bae:	201b      	movs	r0, #27
 8002bb0:	f001 fb6d 	bl	800428e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002bb4:	e0d8      	b.n	8002d68 <HAL_TIM_Base_MspInit+0x240>
  else if(tim_baseHandle->Instance==TIM3)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a70      	ldr	r2, [pc, #448]	; (8002d7c <HAL_TIM_Base_MspInit+0x254>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d12c      	bne.n	8002c1a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc4:	4b6b      	ldr	r3, [pc, #428]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	4a6a      	ldr	r2, [pc, #424]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002bca:	f043 0302 	orr.w	r3, r3, #2
 8002bce:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd0:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bdc:	2300      	movs	r3, #0
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
 8002be0:	4b64      	ldr	r3, [pc, #400]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	4a63      	ldr	r2, [pc, #396]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002be6:	f043 0302 	orr.w	r3, r3, #2
 8002bea:	6313      	str	r3, [r2, #48]	; 0x30
 8002bec:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c10:	4619      	mov	r1, r3
 8002c12:	485b      	ldr	r0, [pc, #364]	; (8002d80 <HAL_TIM_Base_MspInit+0x258>)
 8002c14:	f001 fece 	bl	80049b4 <HAL_GPIO_Init>
}
 8002c18:	e0a6      	b.n	8002d68 <HAL_TIM_Base_MspInit+0x240>
  else if(tim_baseHandle->Instance==TIM4)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a59      	ldr	r2, [pc, #356]	; (8002d84 <HAL_TIM_Base_MspInit+0x25c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d134      	bne.n	8002c8e <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c24:	2300      	movs	r3, #0
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	4b52      	ldr	r3, [pc, #328]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	4a51      	ldr	r2, [pc, #324]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002c2e:	f043 0304 	orr.w	r3, r3, #4
 8002c32:	6413      	str	r3, [r2, #64]	; 0x40
 8002c34:	4b4f      	ldr	r3, [pc, #316]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	4a4a      	ldr	r2, [pc, #296]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c50:	4b48      	ldr	r3, [pc, #288]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c5c:	2340      	movs	r3, #64	; 0x40
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c74:	4619      	mov	r1, r3
 8002c76:	4842      	ldr	r0, [pc, #264]	; (8002d80 <HAL_TIM_Base_MspInit+0x258>)
 8002c78:	f001 fe9c 	bl	80049b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	201e      	movs	r0, #30
 8002c82:	f001 fae8 	bl	8004256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c86:	201e      	movs	r0, #30
 8002c88:	f001 fb01 	bl	800428e <HAL_NVIC_EnableIRQ>
}
 8002c8c:	e06c      	b.n	8002d68 <HAL_TIM_Base_MspInit+0x240>
  else if(tim_baseHandle->Instance==TIM8)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a3d      	ldr	r2, [pc, #244]	; (8002d88 <HAL_TIM_Base_MspInit+0x260>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d135      	bne.n	8002d04 <HAL_TIM_Base_MspInit+0x1dc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	4a34      	ldr	r2, [pc, #208]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002ca2:	f043 0302 	orr.w	r3, r3, #2
 8002ca6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca8:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	4a2d      	ldr	r2, [pc, #180]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002cd0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cea:	4619      	mov	r1, r3
 8002cec:	4827      	ldr	r0, [pc, #156]	; (8002d8c <HAL_TIM_Base_MspInit+0x264>)
 8002cee:	f001 fe61 	bl	80049b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	202e      	movs	r0, #46	; 0x2e
 8002cf8:	f001 faad 	bl	8004256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002cfc:	202e      	movs	r0, #46	; 0x2e
 8002cfe:	f001 fac6 	bl	800428e <HAL_NVIC_EnableIRQ>
}
 8002d02:	e031      	b.n	8002d68 <HAL_TIM_Base_MspInit+0x240>
  else if(tim_baseHandle->Instance==TIM12)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <HAL_TIM_Base_MspInit+0x268>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d12c      	bne.n	8002d68 <HAL_TIM_Base_MspInit+0x240>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a10      	ldr	r2, [pc, #64]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_TIM_Base_MspInit+0x24c>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d54:	2300      	movs	r3, #0
 8002d56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002d58:	2309      	movs	r3, #9
 8002d5a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d60:	4619      	mov	r1, r3
 8002d62:	4807      	ldr	r0, [pc, #28]	; (8002d80 <HAL_TIM_Base_MspInit+0x258>)
 8002d64:	f001 fe26 	bl	80049b4 <HAL_GPIO_Init>
}
 8002d68:	bf00      	nop
 8002d6a:	3748      	adds	r7, #72	; 0x48
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40010000 	.word	0x40010000
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40020000 	.word	0x40020000
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	40020400 	.word	0x40020400
 8002d84:	40000800 	.word	0x40000800
 8002d88:	40010400 	.word	0x40010400
 8002d8c:	40020800 	.word	0x40020800
 8002d90:	40001800 	.word	0x40001800

08002d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d9a:	e003      	b.n	8002da4 <LoopCopyDataInit>

08002d9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002da0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002da2:	3104      	adds	r1, #4

08002da4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002da4:	480b      	ldr	r0, [pc, #44]	; (8002dd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002da8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002daa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dac:	d3f6      	bcc.n	8002d9c <CopyDataInit>
  ldr  r2, =_sbss
 8002dae:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002db0:	e002      	b.n	8002db8 <LoopFillZerobss>

08002db2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002db2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002db4:	f842 3b04 	str.w	r3, [r2], #4

08002db8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dbc:	d3f9      	bcc.n	8002db2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dbe:	f7ff fbaf 	bl	8002520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dc2:	f003 fb9d 	bl	8006500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dc6:	f7ff fa83 	bl	80022d0 <main>
  bx  lr    
 8002dca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002dcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002dd0:	080088b8 	.word	0x080088b8
  ldr  r0, =_sdata
 8002dd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002dd8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002ddc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002de0:	2000047c 	.word	0x2000047c

08002de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de4:	e7fe      	b.n	8002de4 <ADC_IRQHandler>
	...

08002de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_Init+0x40>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <HAL_Init+0x40>)
 8002df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_Init+0x40>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <HAL_Init+0x40>)
 8002dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_Init+0x40>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_Init+0x40>)
 8002e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e10:	2003      	movs	r0, #3
 8002e12:	f001 fa15 	bl	8004240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f000 f808 	bl	8002e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1c:	f7ff faee 	bl	80023fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023c00 	.word	0x40023c00

08002e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_InitTick+0x54>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_InitTick+0x58>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 fa2d 	bl	80042aa <HAL_SYSTICK_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00e      	b.n	8002e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d80a      	bhi.n	8002e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e60:	2200      	movs	r2, #0
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	f001 f9f5 	bl	8004256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <HAL_InitTick+0x5c>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000008 	.word	0x20000008
 8002e84:	20000010 	.word	0x20000010
 8002e88:	2000000c 	.word	0x2000000c

08002e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_IncTick+0x20>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_IncTick+0x24>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <HAL_IncTick+0x24>)
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000010 	.word	0x20000010
 8002eb0:	20000478 	.word	0x20000478

08002eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_GetTick+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000478 	.word	0x20000478

08002ecc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e033      	b.n	8002f4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fe fe80 	bl	8001bf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d118      	bne.n	8002f3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f12:	f023 0302 	bic.w	r3, r3, #2
 8002f16:	f043 0202 	orr.w	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f93a 	bl	8003198 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	f043 0201 	orr.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
 8002f3a:	e001      	b.n	8002f40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1c>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e105      	b.n	800317c <HAL_ADC_ConfigChannel+0x228>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b09      	cmp	r3, #9
 8002f7e:	d925      	bls.n	8002fcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68d9      	ldr	r1, [r3, #12]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	3b1e      	subs	r3, #30
 8002f96:	2207      	movs	r2, #7
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68d9      	ldr	r1, [r3, #12]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	4603      	mov	r3, r0
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4403      	add	r3, r0
 8002fbe:	3b1e      	subs	r3, #30
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	e022      	b.n	8003012 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6919      	ldr	r1, [r3, #16]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	400a      	ands	r2, r1
 8002fee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6919      	ldr	r1, [r3, #16]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	4618      	mov	r0, r3
 8003002:	4603      	mov	r3, r0
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4403      	add	r3, r0
 8003008:	409a      	lsls	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b06      	cmp	r3, #6
 8003018:	d824      	bhi.n	8003064 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	3b05      	subs	r3, #5
 800302c:	221f      	movs	r2, #31
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	400a      	ands	r2, r1
 800303a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	4618      	mov	r0, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	3b05      	subs	r3, #5
 8003056:	fa00 f203 	lsl.w	r2, r0, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	635a      	str	r2, [r3, #52]	; 0x34
 8003062:	e04c      	b.n	80030fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d824      	bhi.n	80030b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	3b23      	subs	r3, #35	; 0x23
 800307e:	221f      	movs	r2, #31
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43da      	mvns	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	400a      	ands	r2, r1
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	4618      	mov	r0, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	3b23      	subs	r3, #35	; 0x23
 80030a8:	fa00 f203 	lsl.w	r2, r0, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
 80030b4:	e023      	b.n	80030fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	3b41      	subs	r3, #65	; 0x41
 80030c8:	221f      	movs	r2, #31
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	400a      	ands	r2, r1
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	4618      	mov	r0, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	3b41      	subs	r3, #65	; 0x41
 80030f2:	fa00 f203 	lsl.w	r2, r0, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030fe:	4b22      	ldr	r3, [pc, #136]	; (8003188 <HAL_ADC_ConfigChannel+0x234>)
 8003100:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a21      	ldr	r2, [pc, #132]	; (800318c <HAL_ADC_ConfigChannel+0x238>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d109      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x1cc>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b12      	cmp	r3, #18
 8003112:	d105      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_ADC_ConfigChannel+0x238>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d123      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x21e>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b10      	cmp	r3, #16
 8003130:	d003      	beq.n	800313a <HAL_ADC_ConfigChannel+0x1e6>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b11      	cmp	r3, #17
 8003138:	d11b      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b10      	cmp	r3, #16
 800314c:	d111      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_ADC_ConfigChannel+0x23c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <HAL_ADC_ConfigChannel+0x240>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	0c9a      	lsrs	r2, r3, #18
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003164:	e002      	b.n	800316c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3b01      	subs	r3, #1
 800316a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f9      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	40012300 	.word	0x40012300
 800318c:	40012000 	.word	0x40012000
 8003190:	20000008 	.word	0x20000008
 8003194:	431bde83 	.word	0x431bde83

08003198 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a0:	4b79      	ldr	r3, [pc, #484]	; (8003388 <ADC_Init+0x1f0>)
 80031a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	021a      	lsls	r2, r3, #8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	4a58      	ldr	r2, [pc, #352]	; (800338c <ADC_Init+0x1f4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d022      	beq.n	8003276 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800323e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6899      	ldr	r1, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6899      	ldr	r1, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	e00f      	b.n	8003296 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003294:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0202 	bic.w	r2, r2, #2
 80032a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6899      	ldr	r1, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7e1b      	ldrb	r3, [r3, #24]
 80032b0:	005a      	lsls	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	3b01      	subs	r3, #1
 80032f0:	035a      	lsls	r2, r3, #13
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	e007      	b.n	800330c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	3b01      	subs	r3, #1
 8003328:	051a      	lsls	r2, r3, #20
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6899      	ldr	r1, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800334e:	025a      	lsls	r2, r3, #9
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	029a      	lsls	r2, r3, #10
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40012300 	.word	0x40012300
 800338c:	0f000001 	.word	0x0f000001

08003390 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0ed      	b.n	800357e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fe fd98 	bl	8001ee4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0202 	bic.w	r2, r2, #2
 80033c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c4:	f7ff fd76 	bl	8002eb4 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033ca:	e012      	b.n	80033f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033cc:	f7ff fd72 	bl	8002eb4 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b0a      	cmp	r3, #10
 80033d8:	d90b      	bls.n	80033f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2205      	movs	r2, #5
 80033ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e0c5      	b.n	800357e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e5      	bne.n	80033cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003410:	f7ff fd50 	bl	8002eb4 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003416:	e012      	b.n	800343e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003418:	f7ff fd4c 	bl	8002eb4 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b0a      	cmp	r3, #10
 8003424:	d90b      	bls.n	800343e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2205      	movs	r2, #5
 8003436:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e09f      	b.n	800357e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0e5      	beq.n	8003418 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	7e1b      	ldrb	r3, [r3, #24]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d108      	bne.n	8003466 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e007      	b.n	8003476 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003474:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7e5b      	ldrb	r3, [r3, #25]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d108      	bne.n	8003490 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e007      	b.n	80034a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7e9b      	ldrb	r3, [r3, #26]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d108      	bne.n	80034ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0220 	orr.w	r2, r2, #32
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e007      	b.n	80034ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0220 	bic.w	r2, r2, #32
 80034c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	7edb      	ldrb	r3, [r3, #27]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d108      	bne.n	80034e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0210 	bic.w	r2, r2, #16
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	e007      	b.n	80034f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0210 	orr.w	r2, r2, #16
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	7f1b      	ldrb	r3, [r3, #28]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d108      	bne.n	800350e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0208 	orr.w	r2, r2, #8
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e007      	b.n	800351e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0208 	bic.w	r2, r2, #8
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	7f5b      	ldrb	r3, [r3, #29]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d108      	bne.n	8003538 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0204 	orr.w	r2, r2, #4
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	e007      	b.n	8003548 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0204 	bic.w	r2, r2, #4
 8003546:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	ea42 0103 	orr.w	r1, r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	1e5a      	subs	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800359e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d003      	beq.n	80035ae <HAL_CAN_ConfigFilter+0x26>
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	f040 80be 	bne.w	800372a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80035ae:	4b65      	ldr	r3, [pc, #404]	; (8003744 <HAL_CAN_ConfigFilter+0x1bc>)
 80035b0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035b8:	f043 0201 	orr.w	r2, r3, #1
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	431a      	orrs	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2201      	movs	r2, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	43db      	mvns	r3, r3
 8003600:	401a      	ands	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d123      	bne.n	8003658 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	43db      	mvns	r3, r3
 800361a:	401a      	ands	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003632:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3248      	adds	r2, #72	; 0x48
 8003638:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800364c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800364e:	6979      	ldr	r1, [r7, #20]
 8003650:	3348      	adds	r3, #72	; 0x48
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	440b      	add	r3, r1
 8003656:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d122      	bne.n	80036a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	431a      	orrs	r2, r3
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003680:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	3248      	adds	r2, #72	; 0x48
 8003686:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800369a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800369c:	6979      	ldr	r1, [r7, #20]
 800369e:	3348      	adds	r3, #72	; 0x48
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	440b      	add	r3, r1
 80036a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	401a      	ands	r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80036c0:	e007      	b.n	80036d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	401a      	ands	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80036ec:	e007      	b.n	80036fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d107      	bne.n	8003716 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	431a      	orrs	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800371c:	f023 0201 	bic.w	r2, r3, #1
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e006      	b.n	8003738 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
  }
}
 8003738:	4618      	mov	r0, r3
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40006400 	.word	0x40006400

08003748 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d12e      	bne.n	80037ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003774:	f7ff fb9e 	bl	8002eb4 <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800377a:	e012      	b.n	80037a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800377c:	f7ff fb9a 	bl	8002eb4 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b0a      	cmp	r3, #10
 8003788:	d90b      	bls.n	80037a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2205      	movs	r2, #5
 800379a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e012      	b.n	80037c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e5      	bne.n	800377c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e006      	b.n	80037c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037ee:	7ffb      	ldrb	r3, [r7, #31]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d003      	beq.n	80037fc <HAL_CAN_AddTxMessage+0x2c>
 80037f4:	7ffb      	ldrb	r3, [r7, #31]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	f040 80b8 	bne.w	800396c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80a0 	beq.w	800395c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	0e1b      	lsrs	r3, r3, #24
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d907      	bls.n	800383c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e09e      	b.n	800397a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800383c:	2201      	movs	r2, #1
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	409a      	lsls	r2, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10d      	bne.n	800386a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003858:	68f9      	ldr	r1, [r7, #12]
 800385a:	6809      	ldr	r1, [r1, #0]
 800385c:	431a      	orrs	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	3318      	adds	r3, #24
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	440b      	add	r3, r1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e00f      	b.n	800388a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003874:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800387a:	68f9      	ldr	r1, [r7, #12]
 800387c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800387e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	3318      	adds	r3, #24
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	440b      	add	r3, r1
 8003888:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6819      	ldr	r1, [r3, #0]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	3318      	adds	r3, #24
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	440b      	add	r3, r1
 800389a:	3304      	adds	r3, #4
 800389c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	7d1b      	ldrb	r3, [r3, #20]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d111      	bne.n	80038ca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	3318      	adds	r3, #24
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	4413      	add	r3, r2
 80038b2:	3304      	adds	r3, #4
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	6811      	ldr	r1, [r2, #0]
 80038ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	3318      	adds	r3, #24
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	440b      	add	r3, r1
 80038c6:	3304      	adds	r3, #4
 80038c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3307      	adds	r3, #7
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	061a      	lsls	r2, r3, #24
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3306      	adds	r3, #6
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	041b      	lsls	r3, r3, #16
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3305      	adds	r3, #5
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	3204      	adds	r2, #4
 80038ea:	7812      	ldrb	r2, [r2, #0]
 80038ec:	4610      	mov	r0, r2
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	6811      	ldr	r1, [r2, #0]
 80038f2:	ea43 0200 	orr.w	r2, r3, r0
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	440b      	add	r3, r1
 80038fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003900:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3303      	adds	r3, #3
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	061a      	lsls	r2, r3, #24
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3302      	adds	r3, #2
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	041b      	lsls	r3, r3, #16
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3301      	adds	r3, #1
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	4313      	orrs	r3, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	7812      	ldrb	r2, [r2, #0]
 8003922:	4610      	mov	r0, r2
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	6811      	ldr	r1, [r2, #0]
 8003928:	ea43 0200 	orr.w	r2, r3, r0
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	440b      	add	r3, r1
 8003932:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003936:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3318      	adds	r3, #24
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	4413      	add	r3, r2
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	6811      	ldr	r1, [r2, #0]
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	3318      	adds	r3, #24
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	440b      	add	r3, r1
 8003956:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e00e      	b.n	800397a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e006      	b.n	800397a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	3724      	adds	r7, #36	; 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003998:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800399a:	7afb      	ldrb	r3, [r7, #11]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d002      	beq.n	80039a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80039a0:	7afb      	ldrb	r3, [r7, #11]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d11d      	bne.n	80039e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3301      	adds	r3, #1
 80039cc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3301      	adds	r3, #1
 80039e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80039e2:	68fb      	ldr	r3, [r7, #12]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d003      	beq.n	8003a14 <HAL_CAN_GetRxMessage+0x24>
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	f040 80f3 	bne.w	8003bfa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10e      	bne.n	8003a38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d116      	bne.n	8003a56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0e7      	b.n	8003c08 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d107      	bne.n	8003a56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0d8      	b.n	8003c08 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	331b      	adds	r3, #27
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	4413      	add	r3, r2
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0204 	and.w	r2, r3, #4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10c      	bne.n	8003a8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	331b      	adds	r3, #27
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	4413      	add	r3, r2
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	0d5b      	lsrs	r3, r3, #21
 8003a84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e00b      	b.n	8003aa6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	331b      	adds	r3, #27
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	4413      	add	r3, r2
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	331b      	adds	r3, #27
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	4413      	add	r3, r2
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0202 	and.w	r2, r3, #2
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	331b      	adds	r3, #27
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3304      	adds	r3, #4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	331b      	adds	r3, #27
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	4413      	add	r3, r2
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	331b      	adds	r3, #27
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	0a1a      	lsrs	r2, r3, #8
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	0c1a      	lsrs	r2, r3, #16
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	3302      	adds	r3, #2
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	0e1a      	lsrs	r2, r3, #24
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	3303      	adds	r3, #3
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	0a1a      	lsrs	r2, r3, #8
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	3305      	adds	r3, #5
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	0c1a      	lsrs	r2, r3, #16
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	3306      	adds	r3, #6
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	0e1a      	lsrs	r2, r3, #24
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	3307      	adds	r3, #7
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d108      	bne.n	8003be6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0220 	orr.w	r2, r2, #32
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	e007      	b.n	8003bf6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0220 	orr.w	r2, r2, #32
 8003bf4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e006      	b.n	8003c08 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c24:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d002      	beq.n	8003c32 <HAL_CAN_ActivateNotification+0x1e>
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d109      	bne.n	8003c46 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6959      	ldr	r1, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e006      	b.n	8003c54 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
  }
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	; 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d07c      	beq.n	8003da0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d023      	beq.n	8003cf8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f97d 	bl	8003fc2 <HAL_CAN_TxMailbox0CompleteCallback>
 8003cc8:	e016      	b.n	8003cf8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
 8003cdc:	e00c      	b.n	8003cf8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf0:	e002      	b.n	8003cf8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f983 	bl	8003ffe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d024      	beq.n	8003d4c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f95d 	bl	8003fd6 <HAL_CAN_TxMailbox1CompleteCallback>
 8003d1c:	e016      	b.n	8003d4c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d30:	e00c      	b.n	8003d4c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
 8003d44:	e002      	b.n	8003d4c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f963 	bl	8004012 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d024      	beq.n	8003da0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f93d 	bl	8003fea <HAL_CAN_TxMailbox2CompleteCallback>
 8003d70:	e016      	b.n	8003da0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
 8003d84:	e00c      	b.n	8003da0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
 8003d98:	e002      	b.n	8003da0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f943 	bl	8004026 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00c      	beq.n	8003dc4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d006      	beq.n	8003de6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2208      	movs	r2, #8
 8003dde:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f92a 	bl	800403a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d009      	beq.n	8003e04 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd f8e4 	bl	8000fcc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00c      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2210      	movs	r2, #16
 8003e26:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d006      	beq.n	8003e4a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2208      	movs	r2, #8
 8003e42:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f902 	bl	800404e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd f8cc 	bl	8001000 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d006      	beq.n	8003e8a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2210      	movs	r2, #16
 8003e82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f8ec 	bl	8004062 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00b      	beq.n	8003eac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8e5 	bl	8004076 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d075      	beq.n	8003fa2 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d06c      	beq.n	8003f9a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	f043 0302 	orr.w	r3, r3, #2
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d03d      	beq.n	8003f9a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d038      	beq.n	8003f9a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f2e:	2b30      	cmp	r3, #48	; 0x30
 8003f30:	d017      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x302>
 8003f32:	2b30      	cmp	r3, #48	; 0x30
 8003f34:	d804      	bhi.n	8003f40 <HAL_CAN_IRQHandler+0x2e0>
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d009      	beq.n	8003f4e <HAL_CAN_IRQHandler+0x2ee>
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d00c      	beq.n	8003f58 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f3e:	e024      	b.n	8003f8a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003f40:	2b50      	cmp	r3, #80	; 0x50
 8003f42:	d018      	beq.n	8003f76 <HAL_CAN_IRQHandler+0x316>
 8003f44:	2b60      	cmp	r3, #96	; 0x60
 8003f46:	d01b      	beq.n	8003f80 <HAL_CAN_IRQHandler+0x320>
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d00f      	beq.n	8003f6c <HAL_CAN_IRQHandler+0x30c>
            break;
 8003f4c:	e01d      	b.n	8003f8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	f043 0308 	orr.w	r3, r3, #8
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f56:	e018      	b.n	8003f8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	f043 0310 	orr.w	r3, r3, #16
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f60:	e013      	b.n	8003f8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	f043 0320 	orr.w	r3, r3, #32
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f6a:	e00e      	b.n	8003f8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f74:	e009      	b.n	8003f8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f7e:	e004      	b.n	8003f8a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f88:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699a      	ldr	r2, [r3, #24]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f98:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f868 	bl	800408a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003fba:	bf00      	nop
 8003fbc:	3728      	adds	r7, #40	; 0x28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <__NVIC_SetPriorityGrouping>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040b0:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <__NVIC_SetPriorityGrouping+0x44>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040bc:	4013      	ands	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040d2:	4a04      	ldr	r2, [pc, #16]	; (80040e4 <__NVIC_SetPriorityGrouping+0x44>)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	60d3      	str	r3, [r2, #12]
}
 80040d8:	bf00      	nop
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	e000ed00 	.word	0xe000ed00

080040e8 <__NVIC_GetPriorityGrouping>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040ec:	4b04      	ldr	r3, [pc, #16]	; (8004100 <__NVIC_GetPriorityGrouping+0x18>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	0a1b      	lsrs	r3, r3, #8
 80040f2:	f003 0307 	and.w	r3, r3, #7
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000ed00 	.word	0xe000ed00

08004104 <__NVIC_EnableIRQ>:
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800410e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004112:	2b00      	cmp	r3, #0
 8004114:	db0b      	blt.n	800412e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	f003 021f 	and.w	r2, r3, #31
 800411c:	4907      	ldr	r1, [pc, #28]	; (800413c <__NVIC_EnableIRQ+0x38>)
 800411e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	2001      	movs	r0, #1
 8004126:	fa00 f202 	lsl.w	r2, r0, r2
 800412a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	e000e100 	.word	0xe000e100

08004140 <__NVIC_SetPriority>:
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	6039      	str	r1, [r7, #0]
 800414a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800414c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004150:	2b00      	cmp	r3, #0
 8004152:	db0a      	blt.n	800416a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	b2da      	uxtb	r2, r3
 8004158:	490c      	ldr	r1, [pc, #48]	; (800418c <__NVIC_SetPriority+0x4c>)
 800415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415e:	0112      	lsls	r2, r2, #4
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	440b      	add	r3, r1
 8004164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004168:	e00a      	b.n	8004180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	b2da      	uxtb	r2, r3
 800416e:	4908      	ldr	r1, [pc, #32]	; (8004190 <__NVIC_SetPriority+0x50>)
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	3b04      	subs	r3, #4
 8004178:	0112      	lsls	r2, r2, #4
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	440b      	add	r3, r1
 800417e:	761a      	strb	r2, [r3, #24]
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	e000e100 	.word	0xe000e100
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <NVIC_EncodePriority>:
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	; 0x24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f1c3 0307 	rsb	r3, r3, #7
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	bf28      	it	cs
 80041b2:	2304      	movcs	r3, #4
 80041b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	3304      	adds	r3, #4
 80041ba:	2b06      	cmp	r3, #6
 80041bc:	d902      	bls.n	80041c4 <NVIC_EncodePriority+0x30>
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3b03      	subs	r3, #3
 80041c2:	e000      	b.n	80041c6 <NVIC_EncodePriority+0x32>
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43da      	mvns	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	401a      	ands	r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041dc:	f04f 31ff 	mov.w	r1, #4294967295
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	fa01 f303 	lsl.w	r3, r1, r3
 80041e6:	43d9      	mvns	r1, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ec:	4313      	orrs	r3, r2
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3724      	adds	r7, #36	; 0x24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <SysTick_Config>:
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3b01      	subs	r3, #1
 8004208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800420c:	d301      	bcc.n	8004212 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800420e:	2301      	movs	r3, #1
 8004210:	e00f      	b.n	8004232 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004212:	4a0a      	ldr	r2, [pc, #40]	; (800423c <SysTick_Config+0x40>)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3b01      	subs	r3, #1
 8004218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800421a:	210f      	movs	r1, #15
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	f7ff ff8e 	bl	8004140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <SysTick_Config+0x40>)
 8004226:	2200      	movs	r2, #0
 8004228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800422a:	4b04      	ldr	r3, [pc, #16]	; (800423c <SysTick_Config+0x40>)
 800422c:	2207      	movs	r2, #7
 800422e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	e000e010 	.word	0xe000e010

08004240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ff29 	bl	80040a0 <__NVIC_SetPriorityGrouping>
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004256:	b580      	push	{r7, lr}
 8004258:	b086      	sub	sp, #24
 800425a:	af00      	add	r7, sp, #0
 800425c:	4603      	mov	r3, r0
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004268:	f7ff ff3e 	bl	80040e8 <__NVIC_GetPriorityGrouping>
 800426c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	6978      	ldr	r0, [r7, #20]
 8004274:	f7ff ff8e 	bl	8004194 <NVIC_EncodePriority>
 8004278:	4602      	mov	r2, r0
 800427a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800427e:	4611      	mov	r1, r2
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ff5d 	bl	8004140 <__NVIC_SetPriority>
}
 8004286:	bf00      	nop
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	4603      	mov	r3, r0
 8004296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff ff31 	bl	8004104 <__NVIC_EnableIRQ>
}
 80042a2:	bf00      	nop
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff ffa2 	bl	80041fc <SysTick_Config>
 80042b8:	4603      	mov	r3, r0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80042c6:	f7fd f841 	bl	800134c <HAL_SYSTICK_Callback>
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e00e      	b.n	80042fe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	795b      	ldrb	r3, [r3, #5]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d105      	bne.n	80042f6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7fd fe71 	bl	8001fd8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e014      	b.n	8004342 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	791b      	ldrb	r3, [r3, #4]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d105      	bne.n	800432e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fd fea1 	bl	8002070 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800434a:	b480      	push	{r7}
 800434c:	b087      	sub	sp, #28
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	795b      	ldrb	r3, [r3, #5]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_DAC_ConfigChannel+0x20>
 8004366:	2302      	movs	r3, #2
 8004368:	e036      	b.n	80043d8 <HAL_DAC_ConfigChannel+0x8e>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2202      	movs	r2, #2
 8004374:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800437e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4013      	ands	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6819      	ldr	r1, [r3, #0]
 80043b8:	22c0      	movs	r2, #192	; 0xc0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	43da      	mvns	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	400a      	ands	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043f0:	f7fe fd60 	bl	8002eb4 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e099      	b.n	8004534 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0201 	bic.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004420:	e00f      	b.n	8004442 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004422:	f7fe fd47 	bl	8002eb4 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b05      	cmp	r3, #5
 800442e:	d908      	bls.n	8004442 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2203      	movs	r2, #3
 800443a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e078      	b.n	8004534 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e8      	bne.n	8004422 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4b38      	ldr	r3, [pc, #224]	; (800453c <HAL_DMA_Init+0x158>)
 800445c:	4013      	ands	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800446e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800447a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004486:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2b04      	cmp	r3, #4
 800449a:	d107      	bne.n	80044ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	4313      	orrs	r3, r2
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f023 0307 	bic.w	r3, r3, #7
 80044c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d117      	bne.n	8004506 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00e      	beq.n	8004506 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f9e9 	bl	80048c0 <DMA_CheckFifoParam>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2240      	movs	r2, #64	; 0x40
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004502:	2301      	movs	r3, #1
 8004504:	e016      	b.n	8004534 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9a0 	bl	8004854 <DMA_CalcBaseAndBitshift>
 8004514:	4603      	mov	r3, r0
 8004516:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	223f      	movs	r2, #63	; 0x3f
 800451e:	409a      	lsls	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	f010803f 	.word	0xf010803f

08004540 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800454c:	4b92      	ldr	r3, [pc, #584]	; (8004798 <HAL_DMA_IRQHandler+0x258>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a92      	ldr	r2, [pc, #584]	; (800479c <HAL_DMA_IRQHandler+0x25c>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	0a9b      	lsrs	r3, r3, #10
 8004558:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456a:	2208      	movs	r2, #8
 800456c:	409a      	lsls	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4013      	ands	r3, r2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01a      	beq.n	80045ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d013      	beq.n	80045ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0204 	bic.w	r2, r2, #4
 8004592:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004598:	2208      	movs	r2, #8
 800459a:	409a      	lsls	r2, r3
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	f043 0201 	orr.w	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b0:	2201      	movs	r2, #1
 80045b2:	409a      	lsls	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d012      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	2201      	movs	r2, #1
 80045d0:	409a      	lsls	r2, r3
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f043 0202 	orr.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e6:	2204      	movs	r2, #4
 80045e8:	409a      	lsls	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d012      	beq.n	8004618 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	2204      	movs	r2, #4
 8004606:	409a      	lsls	r2, r3
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004610:	f043 0204 	orr.w	r2, r3, #4
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461c:	2210      	movs	r2, #16
 800461e:	409a      	lsls	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4013      	ands	r3, r2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d043      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d03c      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463a:	2210      	movs	r2, #16
 800463c:	409a      	lsls	r2, r3
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d018      	beq.n	8004682 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d024      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
 800466e:	e01f      	b.n	80046b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01b      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	4798      	blx	r3
 8004680:	e016      	b.n	80046b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d107      	bne.n	80046a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0208 	bic.w	r2, r2, #8
 800469e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b4:	2220      	movs	r2, #32
 80046b6:	409a      	lsls	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 808e 	beq.w	80047de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8086 	beq.w	80047de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d6:	2220      	movs	r2, #32
 80046d8:	409a      	lsls	r2, r3
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	d136      	bne.n	8004758 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0216 	bic.w	r2, r2, #22
 80046f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004708:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d103      	bne.n	800471a <HAL_DMA_IRQHandler+0x1da>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0208 	bic.w	r2, r2, #8
 8004728:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472e:	223f      	movs	r2, #63	; 0x3f
 8004730:	409a      	lsls	r2, r3
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800474a:	2b00      	cmp	r3, #0
 800474c:	d07d      	beq.n	800484a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	4798      	blx	r3
        }
        return;
 8004756:	e078      	b.n	800484a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d01c      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d108      	bne.n	8004786 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004778:	2b00      	cmp	r3, #0
 800477a:	d030      	beq.n	80047de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4798      	blx	r3
 8004784:	e02b      	b.n	80047de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d027      	beq.n	80047de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	4798      	blx	r3
 8004796:	e022      	b.n	80047de <HAL_DMA_IRQHandler+0x29e>
 8004798:	20000008 	.word	0x20000008
 800479c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10f      	bne.n	80047ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0210 	bic.w	r2, r2, #16
 80047bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d032      	beq.n	800484c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d022      	beq.n	8004838 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2205      	movs	r2, #5
 80047f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	3301      	adds	r3, #1
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	429a      	cmp	r2, r3
 8004814:	d307      	bcc.n	8004826 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f2      	bne.n	800480a <HAL_DMA_IRQHandler+0x2ca>
 8004824:	e000      	b.n	8004828 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004826:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
 8004848:	e000      	b.n	800484c <HAL_DMA_IRQHandler+0x30c>
        return;
 800484a:	bf00      	nop
    }
  }
}
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop

08004854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	3b10      	subs	r3, #16
 8004864:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	091b      	lsrs	r3, r3, #4
 800486c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800486e:	4a13      	ldr	r2, [pc, #76]	; (80048bc <DMA_CalcBaseAndBitshift+0x68>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b03      	cmp	r3, #3
 8004880:	d909      	bls.n	8004896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800488a:	f023 0303 	bic.w	r3, r3, #3
 800488e:	1d1a      	adds	r2, r3, #4
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	659a      	str	r2, [r3, #88]	; 0x58
 8004894:	e007      	b.n	80048a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800489e:	f023 0303 	bic.w	r3, r3, #3
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	aaaaaaab 	.word	0xaaaaaaab
 80048bc:	08008678 	.word	0x08008678

080048c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d11f      	bne.n	800491a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d855      	bhi.n	800498c <DMA_CheckFifoParam+0xcc>
 80048e0:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <DMA_CheckFifoParam+0x28>)
 80048e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	080048f9 	.word	0x080048f9
 80048ec:	0800490b 	.word	0x0800490b
 80048f0:	080048f9 	.word	0x080048f9
 80048f4:	0800498d 	.word	0x0800498d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d045      	beq.n	8004990 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004908:	e042      	b.n	8004990 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004912:	d13f      	bne.n	8004994 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004918:	e03c      	b.n	8004994 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004922:	d121      	bne.n	8004968 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b03      	cmp	r3, #3
 8004928:	d836      	bhi.n	8004998 <DMA_CheckFifoParam+0xd8>
 800492a:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <DMA_CheckFifoParam+0x70>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004941 	.word	0x08004941
 8004934:	08004947 	.word	0x08004947
 8004938:	08004941 	.word	0x08004941
 800493c:	08004959 	.word	0x08004959
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      break;
 8004944:	e02f      	b.n	80049a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d024      	beq.n	800499c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004956:	e021      	b.n	800499c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004960:	d11e      	bne.n	80049a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004966:	e01b      	b.n	80049a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d902      	bls.n	8004974 <DMA_CheckFifoParam+0xb4>
 800496e:	2b03      	cmp	r3, #3
 8004970:	d003      	beq.n	800497a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004972:	e018      	b.n	80049a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
      break;
 8004978:	e015      	b.n	80049a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00e      	beq.n	80049a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
      break;
 800498a:	e00b      	b.n	80049a4 <DMA_CheckFifoParam+0xe4>
      break;
 800498c:	bf00      	nop
 800498e:	e00a      	b.n	80049a6 <DMA_CheckFifoParam+0xe6>
      break;
 8004990:	bf00      	nop
 8004992:	e008      	b.n	80049a6 <DMA_CheckFifoParam+0xe6>
      break;
 8004994:	bf00      	nop
 8004996:	e006      	b.n	80049a6 <DMA_CheckFifoParam+0xe6>
      break;
 8004998:	bf00      	nop
 800499a:	e004      	b.n	80049a6 <DMA_CheckFifoParam+0xe6>
      break;
 800499c:	bf00      	nop
 800499e:	e002      	b.n	80049a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80049a0:	bf00      	nop
 80049a2:	e000      	b.n	80049a6 <DMA_CheckFifoParam+0xe6>
      break;
 80049a4:	bf00      	nop
    }
  } 
  
  return status; 
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	; 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ca:	2300      	movs	r3, #0
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	e16b      	b.n	8004ca8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049d0:	2201      	movs	r2, #1
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4013      	ands	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	f040 815a 	bne.w	8004ca2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d00b      	beq.n	8004a0e <HAL_GPIO_Init+0x5a>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d007      	beq.n	8004a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a02:	2b11      	cmp	r3, #17
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b12      	cmp	r3, #18
 8004a0c:	d130      	bne.n	8004a70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	2203      	movs	r2, #3
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4013      	ands	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a44:	2201      	movs	r2, #1
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 0201 	and.w	r2, r3, #1
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d003      	beq.n	8004ab0 <HAL_GPIO_Init+0xfc>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b12      	cmp	r3, #18
 8004aae:	d123      	bne.n	8004af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	08da      	lsrs	r2, r3, #3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3208      	adds	r2, #8
 8004ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	220f      	movs	r2, #15
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	08da      	lsrs	r2, r3, #3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3208      	adds	r2, #8
 8004af2:	69b9      	ldr	r1, [r7, #24]
 8004af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	2203      	movs	r2, #3
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 0203 	and.w	r2, r3, #3
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80b4 	beq.w	8004ca2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	4b5f      	ldr	r3, [pc, #380]	; (8004cbc <HAL_GPIO_Init+0x308>)
 8004b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b42:	4a5e      	ldr	r2, [pc, #376]	; (8004cbc <HAL_GPIO_Init+0x308>)
 8004b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b48:	6453      	str	r3, [r2, #68]	; 0x44
 8004b4a:	4b5c      	ldr	r3, [pc, #368]	; (8004cbc <HAL_GPIO_Init+0x308>)
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b56:	4a5a      	ldr	r2, [pc, #360]	; (8004cc0 <HAL_GPIO_Init+0x30c>)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	089b      	lsrs	r3, r3, #2
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	220f      	movs	r2, #15
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43db      	mvns	r3, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a51      	ldr	r2, [pc, #324]	; (8004cc4 <HAL_GPIO_Init+0x310>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d02b      	beq.n	8004bda <HAL_GPIO_Init+0x226>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a50      	ldr	r2, [pc, #320]	; (8004cc8 <HAL_GPIO_Init+0x314>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d025      	beq.n	8004bd6 <HAL_GPIO_Init+0x222>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a4f      	ldr	r2, [pc, #316]	; (8004ccc <HAL_GPIO_Init+0x318>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01f      	beq.n	8004bd2 <HAL_GPIO_Init+0x21e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a4e      	ldr	r2, [pc, #312]	; (8004cd0 <HAL_GPIO_Init+0x31c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d019      	beq.n	8004bce <HAL_GPIO_Init+0x21a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a4d      	ldr	r2, [pc, #308]	; (8004cd4 <HAL_GPIO_Init+0x320>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <HAL_GPIO_Init+0x216>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a4c      	ldr	r2, [pc, #304]	; (8004cd8 <HAL_GPIO_Init+0x324>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00d      	beq.n	8004bc6 <HAL_GPIO_Init+0x212>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a4b      	ldr	r2, [pc, #300]	; (8004cdc <HAL_GPIO_Init+0x328>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <HAL_GPIO_Init+0x20e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a4a      	ldr	r2, [pc, #296]	; (8004ce0 <HAL_GPIO_Init+0x32c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <HAL_GPIO_Init+0x20a>
 8004bba:	2307      	movs	r3, #7
 8004bbc:	e00e      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	e00c      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bc2:	2306      	movs	r3, #6
 8004bc4:	e00a      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bc6:	2305      	movs	r3, #5
 8004bc8:	e008      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bca:	2304      	movs	r3, #4
 8004bcc:	e006      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e004      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e002      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	f002 0203 	and.w	r2, r2, #3
 8004be2:	0092      	lsls	r2, r2, #2
 8004be4:	4093      	lsls	r3, r2
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bec:	4934      	ldr	r1, [pc, #208]	; (8004cc0 <HAL_GPIO_Init+0x30c>)
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	089b      	lsrs	r3, r3, #2
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bfa:	4b3a      	ldr	r3, [pc, #232]	; (8004ce4 <HAL_GPIO_Init+0x330>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c1e:	4a31      	ldr	r2, [pc, #196]	; (8004ce4 <HAL_GPIO_Init+0x330>)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c24:	4b2f      	ldr	r3, [pc, #188]	; (8004ce4 <HAL_GPIO_Init+0x330>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c48:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <HAL_GPIO_Init+0x330>)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c4e:	4b25      	ldr	r3, [pc, #148]	; (8004ce4 <HAL_GPIO_Init+0x330>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c72:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <HAL_GPIO_Init+0x330>)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c78:	4b1a      	ldr	r3, [pc, #104]	; (8004ce4 <HAL_GPIO_Init+0x330>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c9c:	4a11      	ldr	r2, [pc, #68]	; (8004ce4 <HAL_GPIO_Init+0x330>)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	f67f ae90 	bls.w	80049d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	3724      	adds	r7, #36	; 0x24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40013800 	.word	0x40013800
 8004cc4:	40020000 	.word	0x40020000
 8004cc8:	40020400 	.word	0x40020400
 8004ccc:	40020800 	.word	0x40020800
 8004cd0:	40020c00 	.word	0x40020c00
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40021400 	.word	0x40021400
 8004cdc:	40021800 	.word	0x40021800
 8004ce0:	40021c00 	.word	0x40021c00
 8004ce4:	40013c00 	.word	0x40013c00

08004ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	807b      	strh	r3, [r7, #2]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cf8:	787b      	ldrb	r3, [r7, #1]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cfe:	887a      	ldrh	r2, [r7, #2]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d04:	e003      	b.n	8004d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	041a      	lsls	r2, r3, #16
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	619a      	str	r2, [r3, #24]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e25b      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d075      	beq.n	8004e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d3a:	4ba3      	ldr	r3, [pc, #652]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d00c      	beq.n	8004d60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d46:	4ba0      	ldr	r3, [pc, #640]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d112      	bne.n	8004d78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d52:	4b9d      	ldr	r3, [pc, #628]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d5e:	d10b      	bne.n	8004d78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d60:	4b99      	ldr	r3, [pc, #612]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d05b      	beq.n	8004e24 <HAL_RCC_OscConfig+0x108>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d157      	bne.n	8004e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e236      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d80:	d106      	bne.n	8004d90 <HAL_RCC_OscConfig+0x74>
 8004d82:	4b91      	ldr	r3, [pc, #580]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a90      	ldr	r2, [pc, #576]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e01d      	b.n	8004dcc <HAL_RCC_OscConfig+0xb0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d98:	d10c      	bne.n	8004db4 <HAL_RCC_OscConfig+0x98>
 8004d9a:	4b8b      	ldr	r3, [pc, #556]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a8a      	ldr	r2, [pc, #552]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	4b88      	ldr	r3, [pc, #544]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a87      	ldr	r2, [pc, #540]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e00b      	b.n	8004dcc <HAL_RCC_OscConfig+0xb0>
 8004db4:	4b84      	ldr	r3, [pc, #528]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a83      	ldr	r2, [pc, #524]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	4b81      	ldr	r3, [pc, #516]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a80      	ldr	r2, [pc, #512]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d013      	beq.n	8004dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd4:	f7fe f86e 	bl	8002eb4 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ddc:	f7fe f86a 	bl	8002eb4 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b64      	cmp	r3, #100	; 0x64
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e1fb      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dee:	4b76      	ldr	r3, [pc, #472]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0xc0>
 8004dfa:	e014      	b.n	8004e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfc:	f7fe f85a 	bl	8002eb4 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e04:	f7fe f856 	bl	8002eb4 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b64      	cmp	r3, #100	; 0x64
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e1e7      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e16:	4b6c      	ldr	r3, [pc, #432]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0xe8>
 8004e22:	e000      	b.n	8004e26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d063      	beq.n	8004efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e32:	4b65      	ldr	r3, [pc, #404]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e3e:	4b62      	ldr	r3, [pc, #392]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d11c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e4a:	4b5f      	ldr	r3, [pc, #380]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d116      	bne.n	8004e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e56:	4b5c      	ldr	r3, [pc, #368]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_RCC_OscConfig+0x152>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d001      	beq.n	8004e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e1bb      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6e:	4b56      	ldr	r3, [pc, #344]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4952      	ldr	r1, [pc, #328]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e82:	e03a      	b.n	8004efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d020      	beq.n	8004ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e8c:	4b4f      	ldr	r3, [pc, #316]	; (8004fcc <HAL_RCC_OscConfig+0x2b0>)
 8004e8e:	2201      	movs	r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fe f80f 	bl	8002eb4 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e9a:	f7fe f80b 	bl	8002eb4 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e19c      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eac:	4b46      	ldr	r3, [pc, #280]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb8:	4b43      	ldr	r3, [pc, #268]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4940      	ldr	r1, [pc, #256]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	600b      	str	r3, [r1, #0]
 8004ecc:	e015      	b.n	8004efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ece:	4b3f      	ldr	r3, [pc, #252]	; (8004fcc <HAL_RCC_OscConfig+0x2b0>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fd ffee 	bl	8002eb4 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004edc:	f7fd ffea 	bl	8002eb4 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e17b      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eee:	4b36      	ldr	r3, [pc, #216]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d030      	beq.n	8004f68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f0e:	4b30      	ldr	r3, [pc, #192]	; (8004fd0 <HAL_RCC_OscConfig+0x2b4>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fd ffce 	bl	8002eb4 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f1c:	f7fd ffca 	bl	8002eb4 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e15b      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2e:	4b26      	ldr	r3, [pc, #152]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCC_OscConfig+0x200>
 8004f3a:	e015      	b.n	8004f68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f3c:	4b24      	ldr	r3, [pc, #144]	; (8004fd0 <HAL_RCC_OscConfig+0x2b4>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f42:	f7fd ffb7 	bl	8002eb4 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f4a:	f7fd ffb3 	bl	8002eb4 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e144      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f0      	bne.n	8004f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80a0 	beq.w	80050b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7a:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10f      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f86:	2300      	movs	r3, #0
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	4a0e      	ldr	r2, [pc, #56]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6413      	str	r3, [r2, #64]	; 0x40
 8004f96:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <HAL_RCC_OscConfig+0x2ac>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_OscConfig+0x2b8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d121      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <HAL_RCC_OscConfig+0x2b8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a07      	ldr	r2, [pc, #28]	; (8004fd4 <HAL_RCC_OscConfig+0x2b8>)
 8004fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fbe:	f7fd ff79 	bl	8002eb4 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc4:	e011      	b.n	8004fea <HAL_RCC_OscConfig+0x2ce>
 8004fc6:	bf00      	nop
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	42470000 	.word	0x42470000
 8004fd0:	42470e80 	.word	0x42470e80
 8004fd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd8:	f7fd ff6c 	bl	8002eb4 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e0fd      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fea:	4b81      	ldr	r3, [pc, #516]	; (80051f0 <HAL_RCC_OscConfig+0x4d4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d106      	bne.n	800500c <HAL_RCC_OscConfig+0x2f0>
 8004ffe:	4b7d      	ldr	r3, [pc, #500]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	4a7c      	ldr	r2, [pc, #496]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	6713      	str	r3, [r2, #112]	; 0x70
 800500a:	e01c      	b.n	8005046 <HAL_RCC_OscConfig+0x32a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b05      	cmp	r3, #5
 8005012:	d10c      	bne.n	800502e <HAL_RCC_OscConfig+0x312>
 8005014:	4b77      	ldr	r3, [pc, #476]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	4a76      	ldr	r2, [pc, #472]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 800501a:	f043 0304 	orr.w	r3, r3, #4
 800501e:	6713      	str	r3, [r2, #112]	; 0x70
 8005020:	4b74      	ldr	r3, [pc, #464]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 8005022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005024:	4a73      	ldr	r2, [pc, #460]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	6713      	str	r3, [r2, #112]	; 0x70
 800502c:	e00b      	b.n	8005046 <HAL_RCC_OscConfig+0x32a>
 800502e:	4b71      	ldr	r3, [pc, #452]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	4a70      	ldr	r2, [pc, #448]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	6713      	str	r3, [r2, #112]	; 0x70
 800503a:	4b6e      	ldr	r3, [pc, #440]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	4a6d      	ldr	r2, [pc, #436]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 8005040:	f023 0304 	bic.w	r3, r3, #4
 8005044:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d015      	beq.n	800507a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504e:	f7fd ff31 	bl	8002eb4 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005054:	e00a      	b.n	800506c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005056:	f7fd ff2d 	bl	8002eb4 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f241 3288 	movw	r2, #5000	; 0x1388
 8005064:	4293      	cmp	r3, r2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e0bc      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506c:	4b61      	ldr	r3, [pc, #388]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0ee      	beq.n	8005056 <HAL_RCC_OscConfig+0x33a>
 8005078:	e014      	b.n	80050a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507a:	f7fd ff1b 	bl	8002eb4 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005080:	e00a      	b.n	8005098 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005082:	f7fd ff17 	bl	8002eb4 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005090:	4293      	cmp	r3, r2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e0a6      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005098:	4b56      	ldr	r3, [pc, #344]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1ee      	bne.n	8005082 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d105      	bne.n	80050b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050aa:	4b52      	ldr	r3, [pc, #328]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	4a51      	ldr	r2, [pc, #324]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 80050b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8092 	beq.w	80051e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050c0:	4b4c      	ldr	r3, [pc, #304]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 030c 	and.w	r3, r3, #12
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d05c      	beq.n	8005186 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d141      	bne.n	8005158 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d4:	4b48      	ldr	r3, [pc, #288]	; (80051f8 <HAL_RCC_OscConfig+0x4dc>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050da:	f7fd feeb 	bl	8002eb4 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050e2:	f7fd fee7 	bl	8002eb4 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e078      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f4:	4b3f      	ldr	r3, [pc, #252]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f0      	bne.n	80050e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69da      	ldr	r2, [r3, #28]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	019b      	lsls	r3, r3, #6
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	3b01      	subs	r3, #1
 800511a:	041b      	lsls	r3, r3, #16
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	061b      	lsls	r3, r3, #24
 8005124:	4933      	ldr	r1, [pc, #204]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 8005126:	4313      	orrs	r3, r2
 8005128:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800512a:	4b33      	ldr	r3, [pc, #204]	; (80051f8 <HAL_RCC_OscConfig+0x4dc>)
 800512c:	2201      	movs	r2, #1
 800512e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fd fec0 	bl	8002eb4 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005138:	f7fd febc 	bl	8002eb4 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e04d      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514a:	4b2a      	ldr	r3, [pc, #168]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0x41c>
 8005156:	e045      	b.n	80051e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005158:	4b27      	ldr	r3, [pc, #156]	; (80051f8 <HAL_RCC_OscConfig+0x4dc>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515e:	f7fd fea9 	bl	8002eb4 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005166:	f7fd fea5 	bl	8002eb4 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e036      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005178:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f0      	bne.n	8005166 <HAL_RCC_OscConfig+0x44a>
 8005184:	e02e      	b.n	80051e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e029      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005192:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <HAL_RCC_OscConfig+0x4d8>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d11c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d115      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051ba:	4013      	ands	r3, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10d      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d106      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051dc:	429a      	cmp	r2, r3
 80051de:	d001      	beq.n	80051e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40007000 	.word	0x40007000
 80051f4:	40023800 	.word	0x40023800
 80051f8:	42470060 	.word	0x42470060

080051fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e0cc      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005210:	4b68      	ldr	r3, [pc, #416]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d90c      	bls.n	8005238 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521e:	4b65      	ldr	r3, [pc, #404]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005226:	4b63      	ldr	r3, [pc, #396]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d001      	beq.n	8005238 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0b8      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d020      	beq.n	8005286 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005250:	4b59      	ldr	r3, [pc, #356]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	4a58      	ldr	r2, [pc, #352]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800525a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005268:	4b53      	ldr	r3, [pc, #332]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	4a52      	ldr	r2, [pc, #328]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005272:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005274:	4b50      	ldr	r3, [pc, #320]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	494d      	ldr	r1, [pc, #308]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	4313      	orrs	r3, r2
 8005284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d044      	beq.n	800531c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d107      	bne.n	80052aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529a:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d119      	bne.n	80052da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e07f      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d003      	beq.n	80052ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d107      	bne.n	80052ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ba:	4b3f      	ldr	r3, [pc, #252]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e06f      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ca:	4b3b      	ldr	r3, [pc, #236]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e067      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052da:	4b37      	ldr	r3, [pc, #220]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f023 0203 	bic.w	r2, r3, #3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	4934      	ldr	r1, [pc, #208]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052ec:	f7fd fde2 	bl	8002eb4 <HAL_GetTick>
 80052f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f2:	e00a      	b.n	800530a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f4:	f7fd fdde 	bl	8002eb4 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e04f      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800530a:	4b2b      	ldr	r3, [pc, #172]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 020c 	and.w	r2, r3, #12
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	429a      	cmp	r2, r3
 800531a:	d1eb      	bne.n	80052f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800531c:	4b25      	ldr	r3, [pc, #148]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d20c      	bcs.n	8005344 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532a:	4b22      	ldr	r3, [pc, #136]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e032      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4916      	ldr	r1, [pc, #88]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	4313      	orrs	r3, r2
 8005360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	490e      	ldr	r1, [pc, #56]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005382:	f000 f82d 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8005386:	4601      	mov	r1, r0
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <HAL_RCC_ClockConfig+0x1c0>)
 8005394:	5cd3      	ldrb	r3, [r2, r3]
 8005396:	fa21 f303 	lsr.w	r3, r1, r3
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <HAL_RCC_ClockConfig+0x1c4>)
 800539c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <HAL_RCC_ClockConfig+0x1c8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fd fd42 	bl	8002e2c <HAL_InitTick>

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40023c00 	.word	0x40023c00
 80053b8:	40023800 	.word	0x40023800
 80053bc:	08008668 	.word	0x08008668
 80053c0:	20000008 	.word	0x20000008
 80053c4:	2000000c 	.word	0x2000000c

080053c8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <HAL_RCC_EnableCSS+0x14>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
}
 80053d2:	bf00      	nop
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	4247004c 	.word	0x4247004c

080053e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	607b      	str	r3, [r7, #4]
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	2300      	movs	r3, #0
 80053f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053f6:	4b63      	ldr	r3, [pc, #396]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 030c 	and.w	r3, r3, #12
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d007      	beq.n	8005412 <HAL_RCC_GetSysClockFreq+0x32>
 8005402:	2b08      	cmp	r3, #8
 8005404:	d008      	beq.n	8005418 <HAL_RCC_GetSysClockFreq+0x38>
 8005406:	2b00      	cmp	r3, #0
 8005408:	f040 80b4 	bne.w	8005574 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800540c:	4b5e      	ldr	r3, [pc, #376]	; (8005588 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800540e:	60bb      	str	r3, [r7, #8]
       break;
 8005410:	e0b3      	b.n	800557a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005412:	4b5e      	ldr	r3, [pc, #376]	; (800558c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005414:	60bb      	str	r3, [r7, #8]
      break;
 8005416:	e0b0      	b.n	800557a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005418:	4b5a      	ldr	r3, [pc, #360]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005420:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005422:	4b58      	ldr	r3, [pc, #352]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d04a      	beq.n	80054c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800542e:	4b55      	ldr	r3, [pc, #340]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	099b      	lsrs	r3, r3, #6
 8005434:	f04f 0400 	mov.w	r4, #0
 8005438:	f240 11ff 	movw	r1, #511	; 0x1ff
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	ea03 0501 	and.w	r5, r3, r1
 8005444:	ea04 0602 	and.w	r6, r4, r2
 8005448:	4629      	mov	r1, r5
 800544a:	4632      	mov	r2, r6
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	f04f 0400 	mov.w	r4, #0
 8005454:	0154      	lsls	r4, r2, #5
 8005456:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800545a:	014b      	lsls	r3, r1, #5
 800545c:	4619      	mov	r1, r3
 800545e:	4622      	mov	r2, r4
 8005460:	1b49      	subs	r1, r1, r5
 8005462:	eb62 0206 	sbc.w	r2, r2, r6
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	f04f 0400 	mov.w	r4, #0
 800546e:	0194      	lsls	r4, r2, #6
 8005470:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005474:	018b      	lsls	r3, r1, #6
 8005476:	1a5b      	subs	r3, r3, r1
 8005478:	eb64 0402 	sbc.w	r4, r4, r2
 800547c:	f04f 0100 	mov.w	r1, #0
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	00e2      	lsls	r2, r4, #3
 8005486:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800548a:	00d9      	lsls	r1, r3, #3
 800548c:	460b      	mov	r3, r1
 800548e:	4614      	mov	r4, r2
 8005490:	195b      	adds	r3, r3, r5
 8005492:	eb44 0406 	adc.w	r4, r4, r6
 8005496:	f04f 0100 	mov.w	r1, #0
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	0262      	lsls	r2, r4, #9
 80054a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80054a4:	0259      	lsls	r1, r3, #9
 80054a6:	460b      	mov	r3, r1
 80054a8:	4614      	mov	r4, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	4621      	mov	r1, r4
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f04f 0400 	mov.w	r4, #0
 80054b4:	461a      	mov	r2, r3
 80054b6:	4623      	mov	r3, r4
 80054b8:	f7fb fb6a 	bl	8000b90 <__aeabi_uldivmod>
 80054bc:	4603      	mov	r3, r0
 80054be:	460c      	mov	r4, r1
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	e049      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054c4:	4b2f      	ldr	r3, [pc, #188]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	099b      	lsrs	r3, r3, #6
 80054ca:	f04f 0400 	mov.w	r4, #0
 80054ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	ea03 0501 	and.w	r5, r3, r1
 80054da:	ea04 0602 	and.w	r6, r4, r2
 80054de:	4629      	mov	r1, r5
 80054e0:	4632      	mov	r2, r6
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	f04f 0400 	mov.w	r4, #0
 80054ea:	0154      	lsls	r4, r2, #5
 80054ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054f0:	014b      	lsls	r3, r1, #5
 80054f2:	4619      	mov	r1, r3
 80054f4:	4622      	mov	r2, r4
 80054f6:	1b49      	subs	r1, r1, r5
 80054f8:	eb62 0206 	sbc.w	r2, r2, r6
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	0194      	lsls	r4, r2, #6
 8005506:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800550a:	018b      	lsls	r3, r1, #6
 800550c:	1a5b      	subs	r3, r3, r1
 800550e:	eb64 0402 	sbc.w	r4, r4, r2
 8005512:	f04f 0100 	mov.w	r1, #0
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	00e2      	lsls	r2, r4, #3
 800551c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005520:	00d9      	lsls	r1, r3, #3
 8005522:	460b      	mov	r3, r1
 8005524:	4614      	mov	r4, r2
 8005526:	195b      	adds	r3, r3, r5
 8005528:	eb44 0406 	adc.w	r4, r4, r6
 800552c:	f04f 0100 	mov.w	r1, #0
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	02a2      	lsls	r2, r4, #10
 8005536:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800553a:	0299      	lsls	r1, r3, #10
 800553c:	460b      	mov	r3, r1
 800553e:	4614      	mov	r4, r2
 8005540:	4618      	mov	r0, r3
 8005542:	4621      	mov	r1, r4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f04f 0400 	mov.w	r4, #0
 800554a:	461a      	mov	r2, r3
 800554c:	4623      	mov	r3, r4
 800554e:	f7fb fb1f 	bl	8000b90 <__aeabi_uldivmod>
 8005552:	4603      	mov	r3, r0
 8005554:	460c      	mov	r4, r1
 8005556:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	0c1b      	lsrs	r3, r3, #16
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	3301      	adds	r3, #1
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005570:	60bb      	str	r3, [r7, #8]
      break;
 8005572:	e002      	b.n	800557a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005576:	60bb      	str	r3, [r7, #8]
      break;
 8005578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800557a:	68bb      	ldr	r3, [r7, #8]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005584:	40023800 	.word	0x40023800
 8005588:	00f42400 	.word	0x00f42400
 800558c:	007a1200 	.word	0x007a1200

08005590 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005594:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559c:	2b80      	cmp	r3, #128	; 0x80
 800559e:	d104      	bne.n	80055aa <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80055a0:	f000 f80a 	bl	80055b8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80055a4:	4b03      	ldr	r3, [pc, #12]	; (80055b4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80055a6:	2280      	movs	r2, #128	; 0x80
 80055a8:	701a      	strb	r2, [r3, #0]
  }
}
 80055aa:	bf00      	nop
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800
 80055b4:	4002380e 	.word	0x4002380e

080055b8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e01d      	b.n	8005614 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fd fa9b 	bl	8002b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3304      	adds	r3, #4
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f000 fbd5 	bl	8005db4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b06      	cmp	r3, #6
 8005644:	d007      	beq.n	8005656 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e01d      	b.n	80056b2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f815 	bl	80056ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3304      	adds	r3, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f000 fb86 	bl	8005db4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b0c      	cmp	r3, #12
 80056de:	d841      	bhi.n	8005764 <HAL_TIM_IC_Start_IT+0x94>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <HAL_TIM_IC_Start_IT+0x18>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	0800571d 	.word	0x0800571d
 80056ec:	08005765 	.word	0x08005765
 80056f0:	08005765 	.word	0x08005765
 80056f4:	08005765 	.word	0x08005765
 80056f8:	0800572f 	.word	0x0800572f
 80056fc:	08005765 	.word	0x08005765
 8005700:	08005765 	.word	0x08005765
 8005704:	08005765 	.word	0x08005765
 8005708:	08005741 	.word	0x08005741
 800570c:	08005765 	.word	0x08005765
 8005710:	08005765 	.word	0x08005765
 8005714:	08005765 	.word	0x08005765
 8005718:	08005753 	.word	0x08005753
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0202 	orr.w	r2, r2, #2
 800572a:	60da      	str	r2, [r3, #12]
      break;
 800572c:	e01b      	b.n	8005766 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0204 	orr.w	r2, r2, #4
 800573c:	60da      	str	r2, [r3, #12]
      break;
 800573e:	e012      	b.n	8005766 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0208 	orr.w	r2, r2, #8
 800574e:	60da      	str	r2, [r3, #12]
      break;
 8005750:	e009      	b.n	8005766 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0210 	orr.w	r2, r2, #16
 8005760:	60da      	str	r2, [r3, #12]
      break;
 8005762:	e000      	b.n	8005766 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005764:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2201      	movs	r2, #1
 800576c:	6839      	ldr	r1, [r7, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fe0a 	bl	8006388 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b06      	cmp	r3, #6
 8005784:	d007      	beq.n	8005796 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d122      	bne.n	80057fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d11b      	bne.n	80057fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0202 	mvn.w	r2, #2
 80057cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fb fc48 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 80057e8:	e005      	b.n	80057f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fac4 	bl	8005d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 facb 	bl	8005d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b04      	cmp	r3, #4
 8005808:	d122      	bne.n	8005850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b04      	cmp	r3, #4
 8005816:	d11b      	bne.n	8005850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0204 	mvn.w	r2, #4
 8005820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fb fc1e 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 800583c:	e005      	b.n	800584a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fa9a 	bl	8005d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 faa1 	bl	8005d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b08      	cmp	r3, #8
 800585c:	d122      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b08      	cmp	r3, #8
 800586a:	d11b      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0208 	mvn.w	r2, #8
 8005874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2204      	movs	r2, #4
 800587a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fb fbf4 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 8005890:	e005      	b.n	800589e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fa70 	bl	8005d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fa77 	bl	8005d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d122      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b10      	cmp	r3, #16
 80058be:	d11b      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0210 	mvn.w	r2, #16
 80058c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2208      	movs	r2, #8
 80058ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fb fbca 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 80058e4:	e005      	b.n	80058f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fa46 	bl	8005d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fa4d 	bl	8005d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b01      	cmp	r3, #1
 8005904:	d10e      	bne.n	8005924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b01      	cmp	r3, #1
 8005912:	d107      	bne.n	8005924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0201 	mvn.w	r2, #1
 800591c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fa20 	bl	8005d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b80      	cmp	r3, #128	; 0x80
 8005930:	d10e      	bne.n	8005950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593c:	2b80      	cmp	r3, #128	; 0x80
 800593e:	d107      	bne.n	8005950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fdc8 	bl	80064e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d10e      	bne.n	800597c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d107      	bne.n	800597c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa12 	bl	8005da0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b20      	cmp	r3, #32
 8005988:	d10e      	bne.n	80059a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b20      	cmp	r3, #32
 8005996:	d107      	bne.n	80059a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0220 	mvn.w	r2, #32
 80059a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fd92 	bl	80064cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059a8:	bf00      	nop
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_TIM_IC_ConfigChannel+0x1a>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e08a      	b.n	8005ae0 <HAL_TIM_IC_ConfigChannel+0x130>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2202      	movs	r2, #2
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d11b      	bne.n	8005a18 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6818      	ldr	r0, [r3, #0]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6819      	ldr	r1, [r3, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f000 fb06 	bl	8006000 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 020c 	bic.w	r2, r2, #12
 8005a02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6999      	ldr	r1, [r3, #24]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	619a      	str	r2, [r3, #24]
 8005a16:	e05a      	b.n	8005ace <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d11c      	bne.n	8005a58 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6819      	ldr	r1, [r3, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f000 fb8a 	bl	8006146 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699a      	ldr	r2, [r3, #24]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6999      	ldr	r1, [r3, #24]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	021a      	lsls	r2, r3, #8
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	619a      	str	r2, [r3, #24]
 8005a56:	e03a      	b.n	8005ace <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d11b      	bne.n	8005a96 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6819      	ldr	r1, [r3, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f000 fbd7 	bl	8006220 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69da      	ldr	r2, [r3, #28]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 020c 	bic.w	r2, r2, #12
 8005a80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69d9      	ldr	r1, [r3, #28]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	61da      	str	r2, [r3, #28]
 8005a94:	e01b      	b.n	8005ace <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	6819      	ldr	r1, [r3, #0]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f000 fbf7 	bl	8006298 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ab8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69d9      	ldr	r1, [r3, #28]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	021a      	lsls	r2, r3, #8
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_TIM_ConfigClockSource+0x18>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e0a6      	b.n	8005c4e <HAL_TIM_ConfigClockSource+0x166>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	d067      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0x120>
 8005b38:	2b40      	cmp	r3, #64	; 0x40
 8005b3a:	d80b      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x6c>
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d073      	beq.n	8005c28 <HAL_TIM_ConfigClockSource+0x140>
 8005b40:	2b10      	cmp	r3, #16
 8005b42:	d802      	bhi.n	8005b4a <HAL_TIM_ConfigClockSource+0x62>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d06f      	beq.n	8005c28 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b48:	e078      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d06c      	beq.n	8005c28 <HAL_TIM_ConfigClockSource+0x140>
 8005b4e:	2b30      	cmp	r3, #48	; 0x30
 8005b50:	d06a      	beq.n	8005c28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005b52:	e073      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b54:	2b70      	cmp	r3, #112	; 0x70
 8005b56:	d00d      	beq.n	8005b74 <HAL_TIM_ConfigClockSource+0x8c>
 8005b58:	2b70      	cmp	r3, #112	; 0x70
 8005b5a:	d804      	bhi.n	8005b66 <HAL_TIM_ConfigClockSource+0x7e>
 8005b5c:	2b50      	cmp	r3, #80	; 0x50
 8005b5e:	d033      	beq.n	8005bc8 <HAL_TIM_ConfigClockSource+0xe0>
 8005b60:	2b60      	cmp	r3, #96	; 0x60
 8005b62:	d041      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005b64:	e06a      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6a:	d066      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0x152>
 8005b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b70:	d017      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005b72:	e063      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	6899      	ldr	r1, [r3, #8]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f000 fbe0 	bl	8006348 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	609a      	str	r2, [r3, #8]
      break;
 8005ba0:	e04c      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6899      	ldr	r1, [r3, #8]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f000 fbc9 	bl	8006348 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bc4:	609a      	str	r2, [r3, #8]
      break;
 8005bc6:	e039      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	6859      	ldr	r1, [r3, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f000 fa87 	bl	80060e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2150      	movs	r1, #80	; 0x50
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fb96 	bl	8006312 <TIM_ITRx_SetConfig>
      break;
 8005be6:	e029      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	6859      	ldr	r1, [r3, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	f000 fae3 	bl	80061c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2160      	movs	r1, #96	; 0x60
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fb86 	bl	8006312 <TIM_ITRx_SetConfig>
      break;
 8005c06:	e019      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	6859      	ldr	r1, [r3, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	461a      	mov	r2, r3
 8005c16:	f000 fa67 	bl	80060e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2140      	movs	r1, #64	; 0x40
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fb76 	bl	8006312 <TIM_ITRx_SetConfig>
      break;
 8005c26:	e009      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f000 fb6d 	bl	8006312 <TIM_ITRx_SetConfig>
      break;
 8005c38:	e000      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005c3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_SlaveConfigSynchro+0x18>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e031      	b.n	8005cd2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f937 	bl	8005ef4 <TIM_SlaveTimer_SetConfig>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d009      	beq.n	8005ca0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e018      	b.n	8005cd2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cbe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b0c      	cmp	r3, #12
 8005cee:	d831      	bhi.n	8005d54 <HAL_TIM_ReadCapturedValue+0x78>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d2d 	.word	0x08005d2d
 8005cfc:	08005d55 	.word	0x08005d55
 8005d00:	08005d55 	.word	0x08005d55
 8005d04:	08005d55 	.word	0x08005d55
 8005d08:	08005d37 	.word	0x08005d37
 8005d0c:	08005d55 	.word	0x08005d55
 8005d10:	08005d55 	.word	0x08005d55
 8005d14:	08005d55 	.word	0x08005d55
 8005d18:	08005d41 	.word	0x08005d41
 8005d1c:	08005d55 	.word	0x08005d55
 8005d20:	08005d55 	.word	0x08005d55
 8005d24:	08005d55 	.word	0x08005d55
 8005d28:	08005d4b 	.word	0x08005d4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d32:	60fb      	str	r3, [r7, #12]

      break;
 8005d34:	e00f      	b.n	8005d56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	60fb      	str	r3, [r7, #12]

      break;
 8005d3e:	e00a      	b.n	8005d56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	60fb      	str	r3, [r7, #12]

      break;
 8005d48:	e005      	b.n	8005d56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	60fb      	str	r3, [r7, #12]

      break;
 8005d52:	e000      	b.n	8005d56 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005d54:	bf00      	nop
  }

  return tmpreg;
 8005d56:	68fb      	ldr	r3, [r7, #12]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a40      	ldr	r2, [pc, #256]	; (8005ec8 <TIM_Base_SetConfig+0x114>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d013      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd2:	d00f      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a3d      	ldr	r2, [pc, #244]	; (8005ecc <TIM_Base_SetConfig+0x118>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00b      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a3c      	ldr	r2, [pc, #240]	; (8005ed0 <TIM_Base_SetConfig+0x11c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d007      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a3b      	ldr	r2, [pc, #236]	; (8005ed4 <TIM_Base_SetConfig+0x120>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3a      	ldr	r2, [pc, #232]	; (8005ed8 <TIM_Base_SetConfig+0x124>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d108      	bne.n	8005e06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a2f      	ldr	r2, [pc, #188]	; (8005ec8 <TIM_Base_SetConfig+0x114>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d02b      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e14:	d027      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a2c      	ldr	r2, [pc, #176]	; (8005ecc <TIM_Base_SetConfig+0x118>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d023      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a2b      	ldr	r2, [pc, #172]	; (8005ed0 <TIM_Base_SetConfig+0x11c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01f      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a2a      	ldr	r2, [pc, #168]	; (8005ed4 <TIM_Base_SetConfig+0x120>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d01b      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a29      	ldr	r2, [pc, #164]	; (8005ed8 <TIM_Base_SetConfig+0x124>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d017      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a28      	ldr	r2, [pc, #160]	; (8005edc <TIM_Base_SetConfig+0x128>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a27      	ldr	r2, [pc, #156]	; (8005ee0 <TIM_Base_SetConfig+0x12c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00f      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a26      	ldr	r2, [pc, #152]	; (8005ee4 <TIM_Base_SetConfig+0x130>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00b      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a25      	ldr	r2, [pc, #148]	; (8005ee8 <TIM_Base_SetConfig+0x134>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d007      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a24      	ldr	r2, [pc, #144]	; (8005eec <TIM_Base_SetConfig+0x138>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d003      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a23      	ldr	r2, [pc, #140]	; (8005ef0 <TIM_Base_SetConfig+0x13c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d108      	bne.n	8005e78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <TIM_Base_SetConfig+0x114>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_Base_SetConfig+0xf8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a0c      	ldr	r2, [pc, #48]	; (8005ed8 <TIM_Base_SetConfig+0x124>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d103      	bne.n	8005eb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	615a      	str	r2, [r3, #20]
}
 8005eba:	bf00      	nop
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	40010400 	.word	0x40010400
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40014400 	.word	0x40014400
 8005ee4:	40014800 	.word	0x40014800
 8005ee8:	40001800 	.word	0x40001800
 8005eec:	40001c00 	.word	0x40001c00
 8005ef0:	40002000 	.word	0x40002000

08005ef4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2b30      	cmp	r3, #48	; 0x30
 8005f38:	d05c      	beq.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x100>
 8005f3a:	2b30      	cmp	r3, #48	; 0x30
 8005f3c:	d806      	bhi.n	8005f4c <TIM_SlaveTimer_SetConfig+0x58>
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d058      	beq.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x100>
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d056      	beq.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x100>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d054      	beq.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8005f4a:	e054      	b.n	8005ff6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005f4c:	2b50      	cmp	r3, #80	; 0x50
 8005f4e:	d03d      	beq.n	8005fcc <TIM_SlaveTimer_SetConfig+0xd8>
 8005f50:	2b50      	cmp	r3, #80	; 0x50
 8005f52:	d802      	bhi.n	8005f5a <TIM_SlaveTimer_SetConfig+0x66>
 8005f54:	2b40      	cmp	r3, #64	; 0x40
 8005f56:	d010      	beq.n	8005f7a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8005f58:	e04d      	b.n	8005ff6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005f5a:	2b60      	cmp	r3, #96	; 0x60
 8005f5c:	d040      	beq.n	8005fe0 <TIM_SlaveTimer_SetConfig+0xec>
 8005f5e:	2b70      	cmp	r3, #112	; 0x70
 8005f60:	d000      	beq.n	8005f64 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8005f62:	e048      	b.n	8005ff6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68d9      	ldr	r1, [r3, #12]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f000 f9e8 	bl	8006348 <TIM_ETR_SetConfig>
      break;
 8005f78:	e03d      	b.n	8005ff6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d101      	bne.n	8005f86 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e038      	b.n	8005ff8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6a1a      	ldr	r2, [r3, #32]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0201 	bic.w	r2, r2, #1
 8005f9c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fac:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	621a      	str	r2, [r3, #32]
      break;
 8005fca:	e014      	b.n	8005ff6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	6899      	ldr	r1, [r3, #8]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f000 f885 	bl	80060e8 <TIM_TI1_ConfigInputStage>
      break;
 8005fde:	e00a      	b.n	8005ff6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6899      	ldr	r1, [r3, #8]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	461a      	mov	r2, r3
 8005fee:	f000 f8e7 	bl	80061c0 <TIM_TI2_ConfigInputStage>
      break;
 8005ff2:	e000      	b.n	8005ff6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8005ff4:	bf00      	nop
  }
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f023 0201 	bic.w	r2, r3, #1
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a28      	ldr	r2, [pc, #160]	; (80060cc <TIM_TI1_SetConfig+0xcc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d01b      	beq.n	8006066 <TIM_TI1_SetConfig+0x66>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006034:	d017      	beq.n	8006066 <TIM_TI1_SetConfig+0x66>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4a25      	ldr	r2, [pc, #148]	; (80060d0 <TIM_TI1_SetConfig+0xd0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d013      	beq.n	8006066 <TIM_TI1_SetConfig+0x66>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4a24      	ldr	r2, [pc, #144]	; (80060d4 <TIM_TI1_SetConfig+0xd4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00f      	beq.n	8006066 <TIM_TI1_SetConfig+0x66>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4a23      	ldr	r2, [pc, #140]	; (80060d8 <TIM_TI1_SetConfig+0xd8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00b      	beq.n	8006066 <TIM_TI1_SetConfig+0x66>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4a22      	ldr	r2, [pc, #136]	; (80060dc <TIM_TI1_SetConfig+0xdc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d007      	beq.n	8006066 <TIM_TI1_SetConfig+0x66>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4a21      	ldr	r2, [pc, #132]	; (80060e0 <TIM_TI1_SetConfig+0xe0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d003      	beq.n	8006066 <TIM_TI1_SetConfig+0x66>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4a20      	ldr	r2, [pc, #128]	; (80060e4 <TIM_TI1_SetConfig+0xe4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d101      	bne.n	800606a <TIM_TI1_SetConfig+0x6a>
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <TIM_TI1_SetConfig+0x6c>
 800606a:	2300      	movs	r3, #0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f023 0303 	bic.w	r3, r3, #3
 8006076:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	e003      	b.n	800608a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	b2db      	uxtb	r3, r3
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f023 030a 	bic.w	r3, r3, #10
 80060a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f003 030a 	and.w	r3, r3, #10
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40010000 	.word	0x40010000
 80060d0:	40000400 	.word	0x40000400
 80060d4:	40000800 	.word	0x40000800
 80060d8:	40000c00 	.word	0x40000c00
 80060dc:	40010400 	.word	0x40010400
 80060e0:	40014000 	.word	0x40014000
 80060e4:	40001800 	.word	0x40001800

080060e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f023 0201 	bic.w	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f023 030a 	bic.w	r3, r3, #10
 8006124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006146:	b480      	push	{r7}
 8006148:	b087      	sub	sp, #28
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
 8006152:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f023 0210 	bic.w	r2, r3, #16
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006172:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	031b      	lsls	r3, r3, #12
 800618a:	b29b      	uxth	r3, r3
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006198:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	621a      	str	r2, [r3, #32]
}
 80061b4:	bf00      	nop
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	f023 0210 	bic.w	r2, r3, #16
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	031b      	lsls	r3, r3, #12
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	621a      	str	r2, [r3, #32]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f023 0303 	bic.w	r3, r3, #3
 800624c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800625c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	b2db      	uxtb	r3, r3
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006270:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	621a      	str	r2, [r3, #32]
}
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	021b      	lsls	r3, r3, #8
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	031b      	lsls	r3, r3, #12
 80062dc:	b29b      	uxth	r3, r3
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80062ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	031b      	lsls	r3, r3, #12
 80062f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	621a      	str	r2, [r3, #32]
}
 8006306:	bf00      	nop
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	f043 0307 	orr.w	r3, r3, #7
 8006334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	609a      	str	r2, [r3, #8]
}
 800633c:	bf00      	nop
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	021a      	lsls	r2, r3, #8
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	431a      	orrs	r2, r3
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4313      	orrs	r3, r2
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	609a      	str	r2, [r3, #8]
}
 800637c:	bf00      	nop
 800637e:	371c      	adds	r7, #28
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2201      	movs	r2, #1
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a1a      	ldr	r2, [r3, #32]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	401a      	ands	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a1a      	ldr	r2, [r3, #32]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	fa01 f303 	lsl.w	r3, r1, r3
 80063c0:	431a      	orrs	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e05a      	b.n	80064a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a21      	ldr	r2, [pc, #132]	; (80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d022      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006438:	d01d      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1d      	ldr	r2, [pc, #116]	; (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d018      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1b      	ldr	r2, [pc, #108]	; (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1a      	ldr	r2, [pc, #104]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00e      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a18      	ldr	r2, [pc, #96]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d009      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a17      	ldr	r2, [pc, #92]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a15      	ldr	r2, [pc, #84]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d10c      	bne.n	8006490 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800647c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	4313      	orrs	r3, r2
 8006486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40000400 	.word	0x40000400
 80064b8:	40000800 	.word	0x40000800
 80064bc:	40000c00 	.word	0x40000c00
 80064c0:	40010400 	.word	0x40010400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40001800 	.word	0x40001800

080064cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <__errno>:
 80064f4:	4b01      	ldr	r3, [pc, #4]	; (80064fc <__errno+0x8>)
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000014 	.word	0x20000014

08006500 <__libc_init_array>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	4e0d      	ldr	r6, [pc, #52]	; (8006538 <__libc_init_array+0x38>)
 8006504:	4c0d      	ldr	r4, [pc, #52]	; (800653c <__libc_init_array+0x3c>)
 8006506:	1ba4      	subs	r4, r4, r6
 8006508:	10a4      	asrs	r4, r4, #2
 800650a:	2500      	movs	r5, #0
 800650c:	42a5      	cmp	r5, r4
 800650e:	d109      	bne.n	8006524 <__libc_init_array+0x24>
 8006510:	4e0b      	ldr	r6, [pc, #44]	; (8006540 <__libc_init_array+0x40>)
 8006512:	4c0c      	ldr	r4, [pc, #48]	; (8006544 <__libc_init_array+0x44>)
 8006514:	f002 f89a 	bl	800864c <_init>
 8006518:	1ba4      	subs	r4, r4, r6
 800651a:	10a4      	asrs	r4, r4, #2
 800651c:	2500      	movs	r5, #0
 800651e:	42a5      	cmp	r5, r4
 8006520:	d105      	bne.n	800652e <__libc_init_array+0x2e>
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006528:	4798      	blx	r3
 800652a:	3501      	adds	r5, #1
 800652c:	e7ee      	b.n	800650c <__libc_init_array+0xc>
 800652e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006532:	4798      	blx	r3
 8006534:	3501      	adds	r5, #1
 8006536:	e7f2      	b.n	800651e <__libc_init_array+0x1e>
 8006538:	080088b0 	.word	0x080088b0
 800653c:	080088b0 	.word	0x080088b0
 8006540:	080088b0 	.word	0x080088b0
 8006544:	080088b4 	.word	0x080088b4

08006548 <memset>:
 8006548:	4402      	add	r2, r0
 800654a:	4603      	mov	r3, r0
 800654c:	4293      	cmp	r3, r2
 800654e:	d100      	bne.n	8006552 <memset+0xa>
 8006550:	4770      	bx	lr
 8006552:	f803 1b01 	strb.w	r1, [r3], #1
 8006556:	e7f9      	b.n	800654c <memset+0x4>

08006558 <cos>:
 8006558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800655a:	ec51 0b10 	vmov	r0, r1, d0
 800655e:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <cos+0x80>)
 8006560:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006564:	4293      	cmp	r3, r2
 8006566:	dc06      	bgt.n	8006576 <cos+0x1e>
 8006568:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80065d0 <cos+0x78>
 800656c:	f001 fa00 	bl	8007970 <__kernel_cos>
 8006570:	ec51 0b10 	vmov	r0, r1, d0
 8006574:	e007      	b.n	8006586 <cos+0x2e>
 8006576:	4a19      	ldr	r2, [pc, #100]	; (80065dc <cos+0x84>)
 8006578:	4293      	cmp	r3, r2
 800657a:	dd09      	ble.n	8006590 <cos+0x38>
 800657c:	ee10 2a10 	vmov	r2, s0
 8006580:	460b      	mov	r3, r1
 8006582:	f7f9 fe25 	bl	80001d0 <__aeabi_dsub>
 8006586:	ec41 0b10 	vmov	d0, r0, r1
 800658a:	b005      	add	sp, #20
 800658c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006590:	4668      	mov	r0, sp
 8006592:	f000 ff49 	bl	8007428 <__ieee754_rem_pio2>
 8006596:	f000 0003 	and.w	r0, r0, #3
 800659a:	2801      	cmp	r0, #1
 800659c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065a0:	ed9d 0b00 	vldr	d0, [sp]
 80065a4:	d007      	beq.n	80065b6 <cos+0x5e>
 80065a6:	2802      	cmp	r0, #2
 80065a8:	d00e      	beq.n	80065c8 <cos+0x70>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d0de      	beq.n	800656c <cos+0x14>
 80065ae:	2001      	movs	r0, #1
 80065b0:	f001 fde6 	bl	8008180 <__kernel_sin>
 80065b4:	e7dc      	b.n	8006570 <cos+0x18>
 80065b6:	f001 fde3 	bl	8008180 <__kernel_sin>
 80065ba:	ec53 2b10 	vmov	r2, r3, d0
 80065be:	ee10 0a10 	vmov	r0, s0
 80065c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80065c6:	e7de      	b.n	8006586 <cos+0x2e>
 80065c8:	f001 f9d2 	bl	8007970 <__kernel_cos>
 80065cc:	e7f5      	b.n	80065ba <cos+0x62>
 80065ce:	bf00      	nop
	...
 80065d8:	3fe921fb 	.word	0x3fe921fb
 80065dc:	7fefffff 	.word	0x7fefffff

080065e0 <sin>:
 80065e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065e2:	ec51 0b10 	vmov	r0, r1, d0
 80065e6:	4a20      	ldr	r2, [pc, #128]	; (8006668 <sin+0x88>)
 80065e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065ec:	4293      	cmp	r3, r2
 80065ee:	dc07      	bgt.n	8006600 <sin+0x20>
 80065f0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006660 <sin+0x80>
 80065f4:	2000      	movs	r0, #0
 80065f6:	f001 fdc3 	bl	8008180 <__kernel_sin>
 80065fa:	ec51 0b10 	vmov	r0, r1, d0
 80065fe:	e007      	b.n	8006610 <sin+0x30>
 8006600:	4a1a      	ldr	r2, [pc, #104]	; (800666c <sin+0x8c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	dd09      	ble.n	800661a <sin+0x3a>
 8006606:	ee10 2a10 	vmov	r2, s0
 800660a:	460b      	mov	r3, r1
 800660c:	f7f9 fde0 	bl	80001d0 <__aeabi_dsub>
 8006610:	ec41 0b10 	vmov	d0, r0, r1
 8006614:	b005      	add	sp, #20
 8006616:	f85d fb04 	ldr.w	pc, [sp], #4
 800661a:	4668      	mov	r0, sp
 800661c:	f000 ff04 	bl	8007428 <__ieee754_rem_pio2>
 8006620:	f000 0003 	and.w	r0, r0, #3
 8006624:	2801      	cmp	r0, #1
 8006626:	ed9d 1b02 	vldr	d1, [sp, #8]
 800662a:	ed9d 0b00 	vldr	d0, [sp]
 800662e:	d004      	beq.n	800663a <sin+0x5a>
 8006630:	2802      	cmp	r0, #2
 8006632:	d005      	beq.n	8006640 <sin+0x60>
 8006634:	b970      	cbnz	r0, 8006654 <sin+0x74>
 8006636:	2001      	movs	r0, #1
 8006638:	e7dd      	b.n	80065f6 <sin+0x16>
 800663a:	f001 f999 	bl	8007970 <__kernel_cos>
 800663e:	e7dc      	b.n	80065fa <sin+0x1a>
 8006640:	2001      	movs	r0, #1
 8006642:	f001 fd9d 	bl	8008180 <__kernel_sin>
 8006646:	ec53 2b10 	vmov	r2, r3, d0
 800664a:	ee10 0a10 	vmov	r0, s0
 800664e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006652:	e7dd      	b.n	8006610 <sin+0x30>
 8006654:	f001 f98c 	bl	8007970 <__kernel_cos>
 8006658:	e7f5      	b.n	8006646 <sin+0x66>
 800665a:	bf00      	nop
 800665c:	f3af 8000 	nop.w
	...
 8006668:	3fe921fb 	.word	0x3fe921fb
 800666c:	7fefffff 	.word	0x7fefffff

08006670 <pow>:
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	ed2d 8b04 	vpush	{d8-d9}
 8006678:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800694c <pow+0x2dc>
 800667c:	b08d      	sub	sp, #52	; 0x34
 800667e:	ec57 6b10 	vmov	r6, r7, d0
 8006682:	ec55 4b11 	vmov	r4, r5, d1
 8006686:	f000 f9bf 	bl	8006a08 <__ieee754_pow>
 800668a:	f999 3000 	ldrsb.w	r3, [r9]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	3301      	adds	r3, #1
 8006692:	eeb0 8a40 	vmov.f32	s16, s0
 8006696:	eef0 8a60 	vmov.f32	s17, s1
 800669a:	46c8      	mov	r8, r9
 800669c:	d05f      	beq.n	800675e <pow+0xee>
 800669e:	4622      	mov	r2, r4
 80066a0:	462b      	mov	r3, r5
 80066a2:	4620      	mov	r0, r4
 80066a4:	4629      	mov	r1, r5
 80066a6:	f7fa f9e5 	bl	8000a74 <__aeabi_dcmpun>
 80066aa:	4683      	mov	fp, r0
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d156      	bne.n	800675e <pow+0xee>
 80066b0:	4632      	mov	r2, r6
 80066b2:	463b      	mov	r3, r7
 80066b4:	4630      	mov	r0, r6
 80066b6:	4639      	mov	r1, r7
 80066b8:	f7fa f9dc 	bl	8000a74 <__aeabi_dcmpun>
 80066bc:	9001      	str	r0, [sp, #4]
 80066be:	b1e8      	cbz	r0, 80066fc <pow+0x8c>
 80066c0:	2200      	movs	r2, #0
 80066c2:	2300      	movs	r3, #0
 80066c4:	4620      	mov	r0, r4
 80066c6:	4629      	mov	r1, r5
 80066c8:	f7fa f9a2 	bl	8000a10 <__aeabi_dcmpeq>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d046      	beq.n	800675e <pow+0xee>
 80066d0:	2301      	movs	r3, #1
 80066d2:	9302      	str	r3, [sp, #8]
 80066d4:	4b96      	ldr	r3, [pc, #600]	; (8006930 <pow+0x2c0>)
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	4b96      	ldr	r3, [pc, #600]	; (8006934 <pow+0x2c4>)
 80066da:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80066de:	2200      	movs	r2, #0
 80066e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80066e4:	9b00      	ldr	r3, [sp, #0]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80066ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80066f0:	d033      	beq.n	800675a <pow+0xea>
 80066f2:	a802      	add	r0, sp, #8
 80066f4:	f001 fe94 	bl	8008420 <matherr>
 80066f8:	bb48      	cbnz	r0, 800674e <pow+0xde>
 80066fa:	e05d      	b.n	80067b8 <pow+0x148>
 80066fc:	f04f 0a00 	mov.w	sl, #0
 8006700:	f04f 0b00 	mov.w	fp, #0
 8006704:	4652      	mov	r2, sl
 8006706:	465b      	mov	r3, fp
 8006708:	4630      	mov	r0, r6
 800670a:	4639      	mov	r1, r7
 800670c:	f7fa f980 	bl	8000a10 <__aeabi_dcmpeq>
 8006710:	ec4b ab19 	vmov	d9, sl, fp
 8006714:	2800      	cmp	r0, #0
 8006716:	d054      	beq.n	80067c2 <pow+0x152>
 8006718:	4652      	mov	r2, sl
 800671a:	465b      	mov	r3, fp
 800671c:	4620      	mov	r0, r4
 800671e:	4629      	mov	r1, r5
 8006720:	f7fa f976 	bl	8000a10 <__aeabi_dcmpeq>
 8006724:	4680      	mov	r8, r0
 8006726:	b318      	cbz	r0, 8006770 <pow+0x100>
 8006728:	2301      	movs	r3, #1
 800672a:	9302      	str	r3, [sp, #8]
 800672c:	4b80      	ldr	r3, [pc, #512]	; (8006930 <pow+0x2c0>)
 800672e:	9303      	str	r3, [sp, #12]
 8006730:	9b01      	ldr	r3, [sp, #4]
 8006732:	930a      	str	r3, [sp, #40]	; 0x28
 8006734:	9b00      	ldr	r3, [sp, #0]
 8006736:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800673a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800673e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0d5      	beq.n	80066f2 <pow+0x82>
 8006746:	4b7b      	ldr	r3, [pc, #492]	; (8006934 <pow+0x2c4>)
 8006748:	2200      	movs	r2, #0
 800674a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800674e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006750:	b11b      	cbz	r3, 800675a <pow+0xea>
 8006752:	f7ff fecf 	bl	80064f4 <__errno>
 8006756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006758:	6003      	str	r3, [r0, #0]
 800675a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800675e:	eeb0 0a48 	vmov.f32	s0, s16
 8006762:	eef0 0a68 	vmov.f32	s1, s17
 8006766:	b00d      	add	sp, #52	; 0x34
 8006768:	ecbd 8b04 	vpop	{d8-d9}
 800676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006770:	ec45 4b10 	vmov	d0, r4, r5
 8006774:	f001 fdc7 	bl	8008306 <finite>
 8006778:	2800      	cmp	r0, #0
 800677a:	d0f0      	beq.n	800675e <pow+0xee>
 800677c:	4652      	mov	r2, sl
 800677e:	465b      	mov	r3, fp
 8006780:	4620      	mov	r0, r4
 8006782:	4629      	mov	r1, r5
 8006784:	f7fa f94e 	bl	8000a24 <__aeabi_dcmplt>
 8006788:	2800      	cmp	r0, #0
 800678a:	d0e8      	beq.n	800675e <pow+0xee>
 800678c:	2301      	movs	r3, #1
 800678e:	9302      	str	r3, [sp, #8]
 8006790:	4b67      	ldr	r3, [pc, #412]	; (8006930 <pow+0x2c0>)
 8006792:	9303      	str	r3, [sp, #12]
 8006794:	f999 3000 	ldrsb.w	r3, [r9]
 8006798:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800679c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80067a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80067a4:	b913      	cbnz	r3, 80067ac <pow+0x13c>
 80067a6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80067aa:	e7a2      	b.n	80066f2 <pow+0x82>
 80067ac:	4962      	ldr	r1, [pc, #392]	; (8006938 <pow+0x2c8>)
 80067ae:	2000      	movs	r0, #0
 80067b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d19c      	bne.n	80066f2 <pow+0x82>
 80067b8:	f7ff fe9c 	bl	80064f4 <__errno>
 80067bc:	2321      	movs	r3, #33	; 0x21
 80067be:	6003      	str	r3, [r0, #0]
 80067c0:	e7c5      	b.n	800674e <pow+0xde>
 80067c2:	eeb0 0a48 	vmov.f32	s0, s16
 80067c6:	eef0 0a68 	vmov.f32	s1, s17
 80067ca:	f001 fd9c 	bl	8008306 <finite>
 80067ce:	9000      	str	r0, [sp, #0]
 80067d0:	2800      	cmp	r0, #0
 80067d2:	f040 8081 	bne.w	80068d8 <pow+0x268>
 80067d6:	ec47 6b10 	vmov	d0, r6, r7
 80067da:	f001 fd94 	bl	8008306 <finite>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d07a      	beq.n	80068d8 <pow+0x268>
 80067e2:	ec45 4b10 	vmov	d0, r4, r5
 80067e6:	f001 fd8e 	bl	8008306 <finite>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d074      	beq.n	80068d8 <pow+0x268>
 80067ee:	ec53 2b18 	vmov	r2, r3, d8
 80067f2:	ee18 0a10 	vmov	r0, s16
 80067f6:	4619      	mov	r1, r3
 80067f8:	f7fa f93c 	bl	8000a74 <__aeabi_dcmpun>
 80067fc:	f999 9000 	ldrsb.w	r9, [r9]
 8006800:	4b4b      	ldr	r3, [pc, #300]	; (8006930 <pow+0x2c0>)
 8006802:	b1b0      	cbz	r0, 8006832 <pow+0x1c2>
 8006804:	2201      	movs	r2, #1
 8006806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800680a:	9b00      	ldr	r3, [sp, #0]
 800680c:	930a      	str	r3, [sp, #40]	; 0x28
 800680e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006812:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006816:	f1b9 0f00 	cmp.w	r9, #0
 800681a:	d0c4      	beq.n	80067a6 <pow+0x136>
 800681c:	4652      	mov	r2, sl
 800681e:	465b      	mov	r3, fp
 8006820:	4650      	mov	r0, sl
 8006822:	4659      	mov	r1, fp
 8006824:	f7f9 ffb6 	bl	8000794 <__aeabi_ddiv>
 8006828:	f1b9 0f02 	cmp.w	r9, #2
 800682c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006830:	e7c1      	b.n	80067b6 <pow+0x146>
 8006832:	2203      	movs	r2, #3
 8006834:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006838:	900a      	str	r0, [sp, #40]	; 0x28
 800683a:	4629      	mov	r1, r5
 800683c:	4620      	mov	r0, r4
 800683e:	2200      	movs	r2, #0
 8006840:	4b3e      	ldr	r3, [pc, #248]	; (800693c <pow+0x2cc>)
 8006842:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006846:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800684a:	f7f9 fe79 	bl	8000540 <__aeabi_dmul>
 800684e:	4604      	mov	r4, r0
 8006850:	460d      	mov	r5, r1
 8006852:	f1b9 0f00 	cmp.w	r9, #0
 8006856:	d124      	bne.n	80068a2 <pow+0x232>
 8006858:	4b39      	ldr	r3, [pc, #228]	; (8006940 <pow+0x2d0>)
 800685a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800685e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006862:	4630      	mov	r0, r6
 8006864:	4652      	mov	r2, sl
 8006866:	465b      	mov	r3, fp
 8006868:	4639      	mov	r1, r7
 800686a:	f7fa f8db 	bl	8000a24 <__aeabi_dcmplt>
 800686e:	2800      	cmp	r0, #0
 8006870:	d056      	beq.n	8006920 <pow+0x2b0>
 8006872:	ec45 4b10 	vmov	d0, r4, r5
 8006876:	f001 fddf 	bl	8008438 <rint>
 800687a:	4622      	mov	r2, r4
 800687c:	462b      	mov	r3, r5
 800687e:	ec51 0b10 	vmov	r0, r1, d0
 8006882:	f7fa f8c5 	bl	8000a10 <__aeabi_dcmpeq>
 8006886:	b920      	cbnz	r0, 8006892 <pow+0x222>
 8006888:	4b2e      	ldr	r3, [pc, #184]	; (8006944 <pow+0x2d4>)
 800688a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800688e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006892:	f998 3000 	ldrsb.w	r3, [r8]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d142      	bne.n	8006920 <pow+0x2b0>
 800689a:	f7ff fe2b 	bl	80064f4 <__errno>
 800689e:	2322      	movs	r3, #34	; 0x22
 80068a0:	e78d      	b.n	80067be <pow+0x14e>
 80068a2:	4b29      	ldr	r3, [pc, #164]	; (8006948 <pow+0x2d8>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068aa:	4630      	mov	r0, r6
 80068ac:	4652      	mov	r2, sl
 80068ae:	465b      	mov	r3, fp
 80068b0:	4639      	mov	r1, r7
 80068b2:	f7fa f8b7 	bl	8000a24 <__aeabi_dcmplt>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d0eb      	beq.n	8006892 <pow+0x222>
 80068ba:	ec45 4b10 	vmov	d0, r4, r5
 80068be:	f001 fdbb 	bl	8008438 <rint>
 80068c2:	4622      	mov	r2, r4
 80068c4:	462b      	mov	r3, r5
 80068c6:	ec51 0b10 	vmov	r0, r1, d0
 80068ca:	f7fa f8a1 	bl	8000a10 <__aeabi_dcmpeq>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d1df      	bne.n	8006892 <pow+0x222>
 80068d2:	2200      	movs	r2, #0
 80068d4:	4b18      	ldr	r3, [pc, #96]	; (8006938 <pow+0x2c8>)
 80068d6:	e7da      	b.n	800688e <pow+0x21e>
 80068d8:	2200      	movs	r2, #0
 80068da:	2300      	movs	r3, #0
 80068dc:	ec51 0b18 	vmov	r0, r1, d8
 80068e0:	f7fa f896 	bl	8000a10 <__aeabi_dcmpeq>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	f43f af3a 	beq.w	800675e <pow+0xee>
 80068ea:	ec47 6b10 	vmov	d0, r6, r7
 80068ee:	f001 fd0a 	bl	8008306 <finite>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f43f af33 	beq.w	800675e <pow+0xee>
 80068f8:	ec45 4b10 	vmov	d0, r4, r5
 80068fc:	f001 fd03 	bl	8008306 <finite>
 8006900:	2800      	cmp	r0, #0
 8006902:	f43f af2c 	beq.w	800675e <pow+0xee>
 8006906:	2304      	movs	r3, #4
 8006908:	9302      	str	r3, [sp, #8]
 800690a:	4b09      	ldr	r3, [pc, #36]	; (8006930 <pow+0x2c0>)
 800690c:	9303      	str	r3, [sp, #12]
 800690e:	2300      	movs	r3, #0
 8006910:	930a      	str	r3, [sp, #40]	; 0x28
 8006912:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006916:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800691a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800691e:	e7b8      	b.n	8006892 <pow+0x222>
 8006920:	a802      	add	r0, sp, #8
 8006922:	f001 fd7d 	bl	8008420 <matherr>
 8006926:	2800      	cmp	r0, #0
 8006928:	f47f af11 	bne.w	800674e <pow+0xde>
 800692c:	e7b5      	b.n	800689a <pow+0x22a>
 800692e:	bf00      	nop
 8006930:	08008680 	.word	0x08008680
 8006934:	3ff00000 	.word	0x3ff00000
 8006938:	fff00000 	.word	0xfff00000
 800693c:	3fe00000 	.word	0x3fe00000
 8006940:	47efffff 	.word	0x47efffff
 8006944:	c7efffff 	.word	0xc7efffff
 8006948:	7ff00000 	.word	0x7ff00000
 800694c:	20000078 	.word	0x20000078

08006950 <sqrt>:
 8006950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006954:	ed2d 8b02 	vpush	{d8}
 8006958:	b08b      	sub	sp, #44	; 0x2c
 800695a:	ec55 4b10 	vmov	r4, r5, d0
 800695e:	f000 ff55 	bl	800780c <__ieee754_sqrt>
 8006962:	4b26      	ldr	r3, [pc, #152]	; (80069fc <sqrt+0xac>)
 8006964:	eeb0 8a40 	vmov.f32	s16, s0
 8006968:	eef0 8a60 	vmov.f32	s17, s1
 800696c:	f993 6000 	ldrsb.w	r6, [r3]
 8006970:	1c73      	adds	r3, r6, #1
 8006972:	d02a      	beq.n	80069ca <sqrt+0x7a>
 8006974:	4622      	mov	r2, r4
 8006976:	462b      	mov	r3, r5
 8006978:	4620      	mov	r0, r4
 800697a:	4629      	mov	r1, r5
 800697c:	f7fa f87a 	bl	8000a74 <__aeabi_dcmpun>
 8006980:	4607      	mov	r7, r0
 8006982:	bb10      	cbnz	r0, 80069ca <sqrt+0x7a>
 8006984:	f04f 0800 	mov.w	r8, #0
 8006988:	f04f 0900 	mov.w	r9, #0
 800698c:	4642      	mov	r2, r8
 800698e:	464b      	mov	r3, r9
 8006990:	4620      	mov	r0, r4
 8006992:	4629      	mov	r1, r5
 8006994:	f7fa f846 	bl	8000a24 <__aeabi_dcmplt>
 8006998:	b1b8      	cbz	r0, 80069ca <sqrt+0x7a>
 800699a:	2301      	movs	r3, #1
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	4b18      	ldr	r3, [pc, #96]	; (8006a00 <sqrt+0xb0>)
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	9708      	str	r7, [sp, #32]
 80069a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80069a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80069ac:	b9b6      	cbnz	r6, 80069dc <sqrt+0x8c>
 80069ae:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80069b2:	4668      	mov	r0, sp
 80069b4:	f001 fd34 	bl	8008420 <matherr>
 80069b8:	b1d0      	cbz	r0, 80069f0 <sqrt+0xa0>
 80069ba:	9b08      	ldr	r3, [sp, #32]
 80069bc:	b11b      	cbz	r3, 80069c6 <sqrt+0x76>
 80069be:	f7ff fd99 	bl	80064f4 <__errno>
 80069c2:	9b08      	ldr	r3, [sp, #32]
 80069c4:	6003      	str	r3, [r0, #0]
 80069c6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80069ca:	eeb0 0a48 	vmov.f32	s0, s16
 80069ce:	eef0 0a68 	vmov.f32	s1, s17
 80069d2:	b00b      	add	sp, #44	; 0x2c
 80069d4:	ecbd 8b02 	vpop	{d8}
 80069d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	4649      	mov	r1, r9
 80069e4:	f7f9 fed6 	bl	8000794 <__aeabi_ddiv>
 80069e8:	2e02      	cmp	r6, #2
 80069ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069ee:	d1e0      	bne.n	80069b2 <sqrt+0x62>
 80069f0:	f7ff fd80 	bl	80064f4 <__errno>
 80069f4:	2321      	movs	r3, #33	; 0x21
 80069f6:	6003      	str	r3, [r0, #0]
 80069f8:	e7df      	b.n	80069ba <sqrt+0x6a>
 80069fa:	bf00      	nop
 80069fc:	20000078 	.word	0x20000078
 8006a00:	08008684 	.word	0x08008684
 8006a04:	00000000 	.word	0x00000000

08006a08 <__ieee754_pow>:
 8006a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0c:	b091      	sub	sp, #68	; 0x44
 8006a0e:	ed8d 1b00 	vstr	d1, [sp]
 8006a12:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006a16:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006a1a:	ea58 0302 	orrs.w	r3, r8, r2
 8006a1e:	ec57 6b10 	vmov	r6, r7, d0
 8006a22:	f000 84be 	beq.w	80073a2 <__ieee754_pow+0x99a>
 8006a26:	4b7a      	ldr	r3, [pc, #488]	; (8006c10 <__ieee754_pow+0x208>)
 8006a28:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	463d      	mov	r5, r7
 8006a30:	ee10 aa10 	vmov	sl, s0
 8006a34:	dc09      	bgt.n	8006a4a <__ieee754_pow+0x42>
 8006a36:	d103      	bne.n	8006a40 <__ieee754_pow+0x38>
 8006a38:	b93e      	cbnz	r6, 8006a4a <__ieee754_pow+0x42>
 8006a3a:	45a0      	cmp	r8, r4
 8006a3c:	dc0d      	bgt.n	8006a5a <__ieee754_pow+0x52>
 8006a3e:	e001      	b.n	8006a44 <__ieee754_pow+0x3c>
 8006a40:	4598      	cmp	r8, r3
 8006a42:	dc02      	bgt.n	8006a4a <__ieee754_pow+0x42>
 8006a44:	4598      	cmp	r8, r3
 8006a46:	d10e      	bne.n	8006a66 <__ieee754_pow+0x5e>
 8006a48:	b16a      	cbz	r2, 8006a66 <__ieee754_pow+0x5e>
 8006a4a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006a4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006a52:	ea54 030a 	orrs.w	r3, r4, sl
 8006a56:	f000 84a4 	beq.w	80073a2 <__ieee754_pow+0x99a>
 8006a5a:	486e      	ldr	r0, [pc, #440]	; (8006c14 <__ieee754_pow+0x20c>)
 8006a5c:	b011      	add	sp, #68	; 0x44
 8006a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a62:	f001 bce1 	b.w	8008428 <nan>
 8006a66:	2d00      	cmp	r5, #0
 8006a68:	da53      	bge.n	8006b12 <__ieee754_pow+0x10a>
 8006a6a:	4b6b      	ldr	r3, [pc, #428]	; (8006c18 <__ieee754_pow+0x210>)
 8006a6c:	4598      	cmp	r8, r3
 8006a6e:	dc4d      	bgt.n	8006b0c <__ieee754_pow+0x104>
 8006a70:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006a74:	4598      	cmp	r8, r3
 8006a76:	dd4c      	ble.n	8006b12 <__ieee754_pow+0x10a>
 8006a78:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006a7c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a80:	2b14      	cmp	r3, #20
 8006a82:	dd26      	ble.n	8006ad2 <__ieee754_pow+0xca>
 8006a84:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006a88:	fa22 f103 	lsr.w	r1, r2, r3
 8006a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d13e      	bne.n	8006b12 <__ieee754_pow+0x10a>
 8006a94:	f001 0101 	and.w	r1, r1, #1
 8006a98:	f1c1 0b02 	rsb	fp, r1, #2
 8006a9c:	2a00      	cmp	r2, #0
 8006a9e:	d15b      	bne.n	8006b58 <__ieee754_pow+0x150>
 8006aa0:	4b5b      	ldr	r3, [pc, #364]	; (8006c10 <__ieee754_pow+0x208>)
 8006aa2:	4598      	cmp	r8, r3
 8006aa4:	d124      	bne.n	8006af0 <__ieee754_pow+0xe8>
 8006aa6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006aaa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006aae:	ea53 030a 	orrs.w	r3, r3, sl
 8006ab2:	f000 8476 	beq.w	80073a2 <__ieee754_pow+0x99a>
 8006ab6:	4b59      	ldr	r3, [pc, #356]	; (8006c1c <__ieee754_pow+0x214>)
 8006ab8:	429c      	cmp	r4, r3
 8006aba:	dd2d      	ble.n	8006b18 <__ieee754_pow+0x110>
 8006abc:	f1b9 0f00 	cmp.w	r9, #0
 8006ac0:	f280 8473 	bge.w	80073aa <__ieee754_pow+0x9a2>
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	ec41 0b10 	vmov	d0, r0, r1
 8006acc:	b011      	add	sp, #68	; 0x44
 8006ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad2:	2a00      	cmp	r2, #0
 8006ad4:	d13e      	bne.n	8006b54 <__ieee754_pow+0x14c>
 8006ad6:	f1c3 0314 	rsb	r3, r3, #20
 8006ada:	fa48 f103 	asr.w	r1, r8, r3
 8006ade:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae2:	4543      	cmp	r3, r8
 8006ae4:	f040 8469 	bne.w	80073ba <__ieee754_pow+0x9b2>
 8006ae8:	f001 0101 	and.w	r1, r1, #1
 8006aec:	f1c1 0b02 	rsb	fp, r1, #2
 8006af0:	4b4b      	ldr	r3, [pc, #300]	; (8006c20 <__ieee754_pow+0x218>)
 8006af2:	4598      	cmp	r8, r3
 8006af4:	d118      	bne.n	8006b28 <__ieee754_pow+0x120>
 8006af6:	f1b9 0f00 	cmp.w	r9, #0
 8006afa:	f280 845a 	bge.w	80073b2 <__ieee754_pow+0x9aa>
 8006afe:	4948      	ldr	r1, [pc, #288]	; (8006c20 <__ieee754_pow+0x218>)
 8006b00:	4632      	mov	r2, r6
 8006b02:	463b      	mov	r3, r7
 8006b04:	2000      	movs	r0, #0
 8006b06:	f7f9 fe45 	bl	8000794 <__aeabi_ddiv>
 8006b0a:	e7dd      	b.n	8006ac8 <__ieee754_pow+0xc0>
 8006b0c:	f04f 0b02 	mov.w	fp, #2
 8006b10:	e7c4      	b.n	8006a9c <__ieee754_pow+0x94>
 8006b12:	f04f 0b00 	mov.w	fp, #0
 8006b16:	e7c1      	b.n	8006a9c <__ieee754_pow+0x94>
 8006b18:	f1b9 0f00 	cmp.w	r9, #0
 8006b1c:	dad2      	bge.n	8006ac4 <__ieee754_pow+0xbc>
 8006b1e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006b22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b26:	e7cf      	b.n	8006ac8 <__ieee754_pow+0xc0>
 8006b28:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006b2c:	d106      	bne.n	8006b3c <__ieee754_pow+0x134>
 8006b2e:	4632      	mov	r2, r6
 8006b30:	463b      	mov	r3, r7
 8006b32:	4610      	mov	r0, r2
 8006b34:	4619      	mov	r1, r3
 8006b36:	f7f9 fd03 	bl	8000540 <__aeabi_dmul>
 8006b3a:	e7c5      	b.n	8006ac8 <__ieee754_pow+0xc0>
 8006b3c:	4b39      	ldr	r3, [pc, #228]	; (8006c24 <__ieee754_pow+0x21c>)
 8006b3e:	4599      	cmp	r9, r3
 8006b40:	d10a      	bne.n	8006b58 <__ieee754_pow+0x150>
 8006b42:	2d00      	cmp	r5, #0
 8006b44:	db08      	blt.n	8006b58 <__ieee754_pow+0x150>
 8006b46:	ec47 6b10 	vmov	d0, r6, r7
 8006b4a:	b011      	add	sp, #68	; 0x44
 8006b4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b50:	f000 be5c 	b.w	800780c <__ieee754_sqrt>
 8006b54:	f04f 0b00 	mov.w	fp, #0
 8006b58:	ec47 6b10 	vmov	d0, r6, r7
 8006b5c:	f001 fbca 	bl	80082f4 <fabs>
 8006b60:	ec51 0b10 	vmov	r0, r1, d0
 8006b64:	f1ba 0f00 	cmp.w	sl, #0
 8006b68:	d127      	bne.n	8006bba <__ieee754_pow+0x1b2>
 8006b6a:	b124      	cbz	r4, 8006b76 <__ieee754_pow+0x16e>
 8006b6c:	4b2c      	ldr	r3, [pc, #176]	; (8006c20 <__ieee754_pow+0x218>)
 8006b6e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d121      	bne.n	8006bba <__ieee754_pow+0x1b2>
 8006b76:	f1b9 0f00 	cmp.w	r9, #0
 8006b7a:	da05      	bge.n	8006b88 <__ieee754_pow+0x180>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	2000      	movs	r0, #0
 8006b82:	4927      	ldr	r1, [pc, #156]	; (8006c20 <__ieee754_pow+0x218>)
 8006b84:	f7f9 fe06 	bl	8000794 <__aeabi_ddiv>
 8006b88:	2d00      	cmp	r5, #0
 8006b8a:	da9d      	bge.n	8006ac8 <__ieee754_pow+0xc0>
 8006b8c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006b90:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b94:	ea54 030b 	orrs.w	r3, r4, fp
 8006b98:	d108      	bne.n	8006bac <__ieee754_pow+0x1a4>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	f7f9 fb15 	bl	80001d0 <__aeabi_dsub>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	e7ac      	b.n	8006b06 <__ieee754_pow+0xfe>
 8006bac:	f1bb 0f01 	cmp.w	fp, #1
 8006bb0:	d18a      	bne.n	8006ac8 <__ieee754_pow+0xc0>
 8006bb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	e786      	b.n	8006ac8 <__ieee754_pow+0xc0>
 8006bba:	0fed      	lsrs	r5, r5, #31
 8006bbc:	1e6b      	subs	r3, r5, #1
 8006bbe:	930d      	str	r3, [sp, #52]	; 0x34
 8006bc0:	ea5b 0303 	orrs.w	r3, fp, r3
 8006bc4:	d102      	bne.n	8006bcc <__ieee754_pow+0x1c4>
 8006bc6:	4632      	mov	r2, r6
 8006bc8:	463b      	mov	r3, r7
 8006bca:	e7e8      	b.n	8006b9e <__ieee754_pow+0x196>
 8006bcc:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <__ieee754_pow+0x220>)
 8006bce:	4598      	cmp	r8, r3
 8006bd0:	f340 80fe 	ble.w	8006dd0 <__ieee754_pow+0x3c8>
 8006bd4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006bd8:	4598      	cmp	r8, r3
 8006bda:	dd0a      	ble.n	8006bf2 <__ieee754_pow+0x1ea>
 8006bdc:	4b0f      	ldr	r3, [pc, #60]	; (8006c1c <__ieee754_pow+0x214>)
 8006bde:	429c      	cmp	r4, r3
 8006be0:	dc0d      	bgt.n	8006bfe <__ieee754_pow+0x1f6>
 8006be2:	f1b9 0f00 	cmp.w	r9, #0
 8006be6:	f6bf af6d 	bge.w	8006ac4 <__ieee754_pow+0xbc>
 8006bea:	a307      	add	r3, pc, #28	; (adr r3, 8006c08 <__ieee754_pow+0x200>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	e79f      	b.n	8006b32 <__ieee754_pow+0x12a>
 8006bf2:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <__ieee754_pow+0x224>)
 8006bf4:	429c      	cmp	r4, r3
 8006bf6:	ddf4      	ble.n	8006be2 <__ieee754_pow+0x1da>
 8006bf8:	4b09      	ldr	r3, [pc, #36]	; (8006c20 <__ieee754_pow+0x218>)
 8006bfa:	429c      	cmp	r4, r3
 8006bfc:	dd18      	ble.n	8006c30 <__ieee754_pow+0x228>
 8006bfe:	f1b9 0f00 	cmp.w	r9, #0
 8006c02:	dcf2      	bgt.n	8006bea <__ieee754_pow+0x1e2>
 8006c04:	e75e      	b.n	8006ac4 <__ieee754_pow+0xbc>
 8006c06:	bf00      	nop
 8006c08:	8800759c 	.word	0x8800759c
 8006c0c:	7e37e43c 	.word	0x7e37e43c
 8006c10:	7ff00000 	.word	0x7ff00000
 8006c14:	08008688 	.word	0x08008688
 8006c18:	433fffff 	.word	0x433fffff
 8006c1c:	3fefffff 	.word	0x3fefffff
 8006c20:	3ff00000 	.word	0x3ff00000
 8006c24:	3fe00000 	.word	0x3fe00000
 8006c28:	41e00000 	.word	0x41e00000
 8006c2c:	3feffffe 	.word	0x3feffffe
 8006c30:	2200      	movs	r2, #0
 8006c32:	4b63      	ldr	r3, [pc, #396]	; (8006dc0 <__ieee754_pow+0x3b8>)
 8006c34:	f7f9 facc 	bl	80001d0 <__aeabi_dsub>
 8006c38:	a355      	add	r3, pc, #340	; (adr r3, 8006d90 <__ieee754_pow+0x388>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	4604      	mov	r4, r0
 8006c40:	460d      	mov	r5, r1
 8006c42:	f7f9 fc7d 	bl	8000540 <__aeabi_dmul>
 8006c46:	a354      	add	r3, pc, #336	; (adr r3, 8006d98 <__ieee754_pow+0x390>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	4606      	mov	r6, r0
 8006c4e:	460f      	mov	r7, r1
 8006c50:	4620      	mov	r0, r4
 8006c52:	4629      	mov	r1, r5
 8006c54:	f7f9 fc74 	bl	8000540 <__aeabi_dmul>
 8006c58:	2200      	movs	r2, #0
 8006c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c5e:	4b59      	ldr	r3, [pc, #356]	; (8006dc4 <__ieee754_pow+0x3bc>)
 8006c60:	4620      	mov	r0, r4
 8006c62:	4629      	mov	r1, r5
 8006c64:	f7f9 fc6c 	bl	8000540 <__aeabi_dmul>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	a14c      	add	r1, pc, #304	; (adr r1, 8006da0 <__ieee754_pow+0x398>)
 8006c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c72:	f7f9 faad 	bl	80001d0 <__aeabi_dsub>
 8006c76:	4622      	mov	r2, r4
 8006c78:	462b      	mov	r3, r5
 8006c7a:	f7f9 fc61 	bl	8000540 <__aeabi_dmul>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	2000      	movs	r0, #0
 8006c84:	4950      	ldr	r1, [pc, #320]	; (8006dc8 <__ieee754_pow+0x3c0>)
 8006c86:	f7f9 faa3 	bl	80001d0 <__aeabi_dsub>
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	462b      	mov	r3, r5
 8006c8e:	4680      	mov	r8, r0
 8006c90:	4689      	mov	r9, r1
 8006c92:	4620      	mov	r0, r4
 8006c94:	4629      	mov	r1, r5
 8006c96:	f7f9 fc53 	bl	8000540 <__aeabi_dmul>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	f7f9 fc4d 	bl	8000540 <__aeabi_dmul>
 8006ca6:	a340      	add	r3, pc, #256	; (adr r3, 8006da8 <__ieee754_pow+0x3a0>)
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f7f9 fc48 	bl	8000540 <__aeabi_dmul>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cb8:	f7f9 fa8a 	bl	80001d0 <__aeabi_dsub>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	460d      	mov	r5, r1
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	4639      	mov	r1, r7
 8006cc8:	f7f9 fa84 	bl	80001d4 <__adddf3>
 8006ccc:	2000      	movs	r0, #0
 8006cce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cd2:	4632      	mov	r2, r6
 8006cd4:	463b      	mov	r3, r7
 8006cd6:	f7f9 fa7b 	bl	80001d0 <__aeabi_dsub>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7f9 fa75 	bl	80001d0 <__aeabi_dsub>
 8006ce6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ce8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006cec:	4313      	orrs	r3, r2
 8006cee:	4606      	mov	r6, r0
 8006cf0:	460f      	mov	r7, r1
 8006cf2:	f040 81eb 	bne.w	80070cc <__ieee754_pow+0x6c4>
 8006cf6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006db0 <__ieee754_pow+0x3a8>
 8006cfa:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006cfe:	2400      	movs	r4, #0
 8006d00:	4622      	mov	r2, r4
 8006d02:	462b      	mov	r3, r5
 8006d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006d0c:	f7f9 fa60 	bl	80001d0 <__aeabi_dsub>
 8006d10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d14:	f7f9 fc14 	bl	8000540 <__aeabi_dmul>
 8006d18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	4689      	mov	r9, r1
 8006d20:	4630      	mov	r0, r6
 8006d22:	4639      	mov	r1, r7
 8006d24:	f7f9 fc0c 	bl	8000540 <__aeabi_dmul>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	4649      	mov	r1, r9
 8006d30:	f7f9 fa50 	bl	80001d4 <__adddf3>
 8006d34:	4622      	mov	r2, r4
 8006d36:	462b      	mov	r3, r5
 8006d38:	4680      	mov	r8, r0
 8006d3a:	4689      	mov	r9, r1
 8006d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d40:	f7f9 fbfe 	bl	8000540 <__aeabi_dmul>
 8006d44:	460b      	mov	r3, r1
 8006d46:	4604      	mov	r4, r0
 8006d48:	460d      	mov	r5, r1
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	4640      	mov	r0, r8
 8006d50:	e9cd 4500 	strd	r4, r5, [sp]
 8006d54:	f7f9 fa3e 	bl	80001d4 <__adddf3>
 8006d58:	4b1c      	ldr	r3, [pc, #112]	; (8006dcc <__ieee754_pow+0x3c4>)
 8006d5a:	4299      	cmp	r1, r3
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	460f      	mov	r7, r1
 8006d60:	468b      	mov	fp, r1
 8006d62:	f340 82f7 	ble.w	8007354 <__ieee754_pow+0x94c>
 8006d66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006d6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006d6e:	4303      	orrs	r3, r0
 8006d70:	f000 81ea 	beq.w	8007148 <__ieee754_pow+0x740>
 8006d74:	a310      	add	r3, pc, #64	; (adr r3, 8006db8 <__ieee754_pow+0x3b0>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d7e:	f7f9 fbdf 	bl	8000540 <__aeabi_dmul>
 8006d82:	a30d      	add	r3, pc, #52	; (adr r3, 8006db8 <__ieee754_pow+0x3b0>)
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	e6d5      	b.n	8006b36 <__ieee754_pow+0x12e>
 8006d8a:	bf00      	nop
 8006d8c:	f3af 8000 	nop.w
 8006d90:	60000000 	.word	0x60000000
 8006d94:	3ff71547 	.word	0x3ff71547
 8006d98:	f85ddf44 	.word	0xf85ddf44
 8006d9c:	3e54ae0b 	.word	0x3e54ae0b
 8006da0:	55555555 	.word	0x55555555
 8006da4:	3fd55555 	.word	0x3fd55555
 8006da8:	652b82fe 	.word	0x652b82fe
 8006dac:	3ff71547 	.word	0x3ff71547
 8006db0:	00000000 	.word	0x00000000
 8006db4:	bff00000 	.word	0xbff00000
 8006db8:	8800759c 	.word	0x8800759c
 8006dbc:	7e37e43c 	.word	0x7e37e43c
 8006dc0:	3ff00000 	.word	0x3ff00000
 8006dc4:	3fd00000 	.word	0x3fd00000
 8006dc8:	3fe00000 	.word	0x3fe00000
 8006dcc:	408fffff 	.word	0x408fffff
 8006dd0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	da05      	bge.n	8006de6 <__ieee754_pow+0x3de>
 8006dda:	4bd3      	ldr	r3, [pc, #844]	; (8007128 <__ieee754_pow+0x720>)
 8006ddc:	f7f9 fbb0 	bl	8000540 <__aeabi_dmul>
 8006de0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006de4:	460c      	mov	r4, r1
 8006de6:	1523      	asrs	r3, r4, #20
 8006de8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006dec:	4413      	add	r3, r2
 8006dee:	9309      	str	r3, [sp, #36]	; 0x24
 8006df0:	4bce      	ldr	r3, [pc, #824]	; (800712c <__ieee754_pow+0x724>)
 8006df2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006df6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006dfa:	429c      	cmp	r4, r3
 8006dfc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006e00:	dd08      	ble.n	8006e14 <__ieee754_pow+0x40c>
 8006e02:	4bcb      	ldr	r3, [pc, #812]	; (8007130 <__ieee754_pow+0x728>)
 8006e04:	429c      	cmp	r4, r3
 8006e06:	f340 815e 	ble.w	80070c6 <__ieee754_pow+0x6be>
 8006e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e10:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006e14:	f04f 0a00 	mov.w	sl, #0
 8006e18:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006e1c:	930c      	str	r3, [sp, #48]	; 0x30
 8006e1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e20:	4bc4      	ldr	r3, [pc, #784]	; (8007134 <__ieee754_pow+0x72c>)
 8006e22:	4413      	add	r3, r2
 8006e24:	ed93 7b00 	vldr	d7, [r3]
 8006e28:	4629      	mov	r1, r5
 8006e2a:	ec53 2b17 	vmov	r2, r3, d7
 8006e2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e36:	f7f9 f9cb 	bl	80001d0 <__aeabi_dsub>
 8006e3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e3e:	4606      	mov	r6, r0
 8006e40:	460f      	mov	r7, r1
 8006e42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e46:	f7f9 f9c5 	bl	80001d4 <__adddf3>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	2000      	movs	r0, #0
 8006e50:	49b9      	ldr	r1, [pc, #740]	; (8007138 <__ieee754_pow+0x730>)
 8006e52:	f7f9 fc9f 	bl	8000794 <__aeabi_ddiv>
 8006e56:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4630      	mov	r0, r6
 8006e60:	4639      	mov	r1, r7
 8006e62:	f7f9 fb6d 	bl	8000540 <__aeabi_dmul>
 8006e66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e6a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006e6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e72:	2300      	movs	r3, #0
 8006e74:	9302      	str	r3, [sp, #8]
 8006e76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e7a:	106d      	asrs	r5, r5, #1
 8006e7c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006e80:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006e84:	2200      	movs	r2, #0
 8006e86:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	4614      	mov	r4, r2
 8006e90:	461d      	mov	r5, r3
 8006e92:	f7f9 fb55 	bl	8000540 <__aeabi_dmul>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	f7f9 f997 	bl	80001d0 <__aeabi_dsub>
 8006ea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	460f      	mov	r7, r1
 8006eaa:	4620      	mov	r0, r4
 8006eac:	4629      	mov	r1, r5
 8006eae:	f7f9 f98f 	bl	80001d0 <__aeabi_dsub>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006eba:	f7f9 f989 	bl	80001d0 <__aeabi_dsub>
 8006ebe:	4642      	mov	r2, r8
 8006ec0:	464b      	mov	r3, r9
 8006ec2:	f7f9 fb3d 	bl	8000540 <__aeabi_dmul>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4630      	mov	r0, r6
 8006ecc:	4639      	mov	r1, r7
 8006ece:	f7f9 f97f 	bl	80001d0 <__aeabi_dsub>
 8006ed2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006ed6:	f7f9 fb33 	bl	8000540 <__aeabi_dmul>
 8006eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ede:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	f7f9 fb2b 	bl	8000540 <__aeabi_dmul>
 8006eea:	a37b      	add	r3, pc, #492	; (adr r3, 80070d8 <__ieee754_pow+0x6d0>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	460d      	mov	r5, r1
 8006ef4:	f7f9 fb24 	bl	8000540 <__aeabi_dmul>
 8006ef8:	a379      	add	r3, pc, #484	; (adr r3, 80070e0 <__ieee754_pow+0x6d8>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f7f9 f969 	bl	80001d4 <__adddf3>
 8006f02:	4622      	mov	r2, r4
 8006f04:	462b      	mov	r3, r5
 8006f06:	f7f9 fb1b 	bl	8000540 <__aeabi_dmul>
 8006f0a:	a377      	add	r3, pc, #476	; (adr r3, 80070e8 <__ieee754_pow+0x6e0>)
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	f7f9 f960 	bl	80001d4 <__adddf3>
 8006f14:	4622      	mov	r2, r4
 8006f16:	462b      	mov	r3, r5
 8006f18:	f7f9 fb12 	bl	8000540 <__aeabi_dmul>
 8006f1c:	a374      	add	r3, pc, #464	; (adr r3, 80070f0 <__ieee754_pow+0x6e8>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	f7f9 f957 	bl	80001d4 <__adddf3>
 8006f26:	4622      	mov	r2, r4
 8006f28:	462b      	mov	r3, r5
 8006f2a:	f7f9 fb09 	bl	8000540 <__aeabi_dmul>
 8006f2e:	a372      	add	r3, pc, #456	; (adr r3, 80070f8 <__ieee754_pow+0x6f0>)
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	f7f9 f94e 	bl	80001d4 <__adddf3>
 8006f38:	4622      	mov	r2, r4
 8006f3a:	462b      	mov	r3, r5
 8006f3c:	f7f9 fb00 	bl	8000540 <__aeabi_dmul>
 8006f40:	a36f      	add	r3, pc, #444	; (adr r3, 8007100 <__ieee754_pow+0x6f8>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f7f9 f945 	bl	80001d4 <__adddf3>
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	4606      	mov	r6, r0
 8006f4e:	460f      	mov	r7, r1
 8006f50:	462b      	mov	r3, r5
 8006f52:	4620      	mov	r0, r4
 8006f54:	4629      	mov	r1, r5
 8006f56:	f7f9 faf3 	bl	8000540 <__aeabi_dmul>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4630      	mov	r0, r6
 8006f60:	4639      	mov	r1, r7
 8006f62:	f7f9 faed 	bl	8000540 <__aeabi_dmul>
 8006f66:	4642      	mov	r2, r8
 8006f68:	4604      	mov	r4, r0
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	464b      	mov	r3, r9
 8006f6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f72:	f7f9 f92f 	bl	80001d4 <__adddf3>
 8006f76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f7a:	f7f9 fae1 	bl	8000540 <__aeabi_dmul>
 8006f7e:	4622      	mov	r2, r4
 8006f80:	462b      	mov	r3, r5
 8006f82:	f7f9 f927 	bl	80001d4 <__adddf3>
 8006f86:	4642      	mov	r2, r8
 8006f88:	4606      	mov	r6, r0
 8006f8a:	460f      	mov	r7, r1
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	4640      	mov	r0, r8
 8006f90:	4649      	mov	r1, r9
 8006f92:	f7f9 fad5 	bl	8000540 <__aeabi_dmul>
 8006f96:	2200      	movs	r2, #0
 8006f98:	4b68      	ldr	r3, [pc, #416]	; (800713c <__ieee754_pow+0x734>)
 8006f9a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f9e:	f7f9 f919 	bl	80001d4 <__adddf3>
 8006fa2:	4632      	mov	r2, r6
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	f7f9 f915 	bl	80001d4 <__adddf3>
 8006faa:	9802      	ldr	r0, [sp, #8]
 8006fac:	460d      	mov	r5, r1
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	f7f9 fac2 	bl	8000540 <__aeabi_dmul>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4680      	mov	r8, r0
 8006fc0:	4689      	mov	r9, r1
 8006fc2:	4b5e      	ldr	r3, [pc, #376]	; (800713c <__ieee754_pow+0x734>)
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	f7f9 f902 	bl	80001d0 <__aeabi_dsub>
 8006fcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fd0:	f7f9 f8fe 	bl	80001d0 <__aeabi_dsub>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4630      	mov	r0, r6
 8006fda:	4639      	mov	r1, r7
 8006fdc:	f7f9 f8f8 	bl	80001d0 <__aeabi_dsub>
 8006fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fe4:	f7f9 faac 	bl	8000540 <__aeabi_dmul>
 8006fe8:	4622      	mov	r2, r4
 8006fea:	4606      	mov	r6, r0
 8006fec:	460f      	mov	r7, r1
 8006fee:	462b      	mov	r3, r5
 8006ff0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ff4:	f7f9 faa4 	bl	8000540 <__aeabi_dmul>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	4639      	mov	r1, r7
 8007000:	f7f9 f8e8 	bl	80001d4 <__adddf3>
 8007004:	4606      	mov	r6, r0
 8007006:	460f      	mov	r7, r1
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4640      	mov	r0, r8
 800700e:	4649      	mov	r1, r9
 8007010:	f7f9 f8e0 	bl	80001d4 <__adddf3>
 8007014:	9802      	ldr	r0, [sp, #8]
 8007016:	a33c      	add	r3, pc, #240	; (adr r3, 8007108 <__ieee754_pow+0x700>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	4604      	mov	r4, r0
 800701e:	460d      	mov	r5, r1
 8007020:	f7f9 fa8e 	bl	8000540 <__aeabi_dmul>
 8007024:	4642      	mov	r2, r8
 8007026:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800702a:	464b      	mov	r3, r9
 800702c:	4620      	mov	r0, r4
 800702e:	4629      	mov	r1, r5
 8007030:	f7f9 f8ce 	bl	80001d0 <__aeabi_dsub>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4630      	mov	r0, r6
 800703a:	4639      	mov	r1, r7
 800703c:	f7f9 f8c8 	bl	80001d0 <__aeabi_dsub>
 8007040:	a333      	add	r3, pc, #204	; (adr r3, 8007110 <__ieee754_pow+0x708>)
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f7f9 fa7b 	bl	8000540 <__aeabi_dmul>
 800704a:	a333      	add	r3, pc, #204	; (adr r3, 8007118 <__ieee754_pow+0x710>)
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	4606      	mov	r6, r0
 8007052:	460f      	mov	r7, r1
 8007054:	4620      	mov	r0, r4
 8007056:	4629      	mov	r1, r5
 8007058:	f7f9 fa72 	bl	8000540 <__aeabi_dmul>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4630      	mov	r0, r6
 8007062:	4639      	mov	r1, r7
 8007064:	f7f9 f8b6 	bl	80001d4 <__adddf3>
 8007068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800706a:	4b35      	ldr	r3, [pc, #212]	; (8007140 <__ieee754_pow+0x738>)
 800706c:	4413      	add	r3, r2
 800706e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007072:	f7f9 f8af 	bl	80001d4 <__adddf3>
 8007076:	4604      	mov	r4, r0
 8007078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800707a:	460d      	mov	r5, r1
 800707c:	f7f9 f9f6 	bl	800046c <__aeabi_i2d>
 8007080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007082:	4b30      	ldr	r3, [pc, #192]	; (8007144 <__ieee754_pow+0x73c>)
 8007084:	4413      	add	r3, r2
 8007086:	e9d3 8900 	ldrd	r8, r9, [r3]
 800708a:	4606      	mov	r6, r0
 800708c:	460f      	mov	r7, r1
 800708e:	4622      	mov	r2, r4
 8007090:	462b      	mov	r3, r5
 8007092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007096:	f7f9 f89d 	bl	80001d4 <__adddf3>
 800709a:	4642      	mov	r2, r8
 800709c:	464b      	mov	r3, r9
 800709e:	f7f9 f899 	bl	80001d4 <__adddf3>
 80070a2:	4632      	mov	r2, r6
 80070a4:	463b      	mov	r3, r7
 80070a6:	f7f9 f895 	bl	80001d4 <__adddf3>
 80070aa:	9802      	ldr	r0, [sp, #8]
 80070ac:	4632      	mov	r2, r6
 80070ae:	463b      	mov	r3, r7
 80070b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070b4:	f7f9 f88c 	bl	80001d0 <__aeabi_dsub>
 80070b8:	4642      	mov	r2, r8
 80070ba:	464b      	mov	r3, r9
 80070bc:	f7f9 f888 	bl	80001d0 <__aeabi_dsub>
 80070c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070c4:	e607      	b.n	8006cd6 <__ieee754_pow+0x2ce>
 80070c6:	f04f 0a01 	mov.w	sl, #1
 80070ca:	e6a5      	b.n	8006e18 <__ieee754_pow+0x410>
 80070cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007120 <__ieee754_pow+0x718>
 80070d0:	e613      	b.n	8006cfa <__ieee754_pow+0x2f2>
 80070d2:	bf00      	nop
 80070d4:	f3af 8000 	nop.w
 80070d8:	4a454eef 	.word	0x4a454eef
 80070dc:	3fca7e28 	.word	0x3fca7e28
 80070e0:	93c9db65 	.word	0x93c9db65
 80070e4:	3fcd864a 	.word	0x3fcd864a
 80070e8:	a91d4101 	.word	0xa91d4101
 80070ec:	3fd17460 	.word	0x3fd17460
 80070f0:	518f264d 	.word	0x518f264d
 80070f4:	3fd55555 	.word	0x3fd55555
 80070f8:	db6fabff 	.word	0xdb6fabff
 80070fc:	3fdb6db6 	.word	0x3fdb6db6
 8007100:	33333303 	.word	0x33333303
 8007104:	3fe33333 	.word	0x3fe33333
 8007108:	e0000000 	.word	0xe0000000
 800710c:	3feec709 	.word	0x3feec709
 8007110:	dc3a03fd 	.word	0xdc3a03fd
 8007114:	3feec709 	.word	0x3feec709
 8007118:	145b01f5 	.word	0x145b01f5
 800711c:	be3e2fe0 	.word	0xbe3e2fe0
 8007120:	00000000 	.word	0x00000000
 8007124:	3ff00000 	.word	0x3ff00000
 8007128:	43400000 	.word	0x43400000
 800712c:	0003988e 	.word	0x0003988e
 8007130:	000bb679 	.word	0x000bb679
 8007134:	08008690 	.word	0x08008690
 8007138:	3ff00000 	.word	0x3ff00000
 800713c:	40080000 	.word	0x40080000
 8007140:	080086b0 	.word	0x080086b0
 8007144:	080086a0 	.word	0x080086a0
 8007148:	a3b4      	add	r3, pc, #720	; (adr r3, 800741c <__ieee754_pow+0xa14>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	4640      	mov	r0, r8
 8007150:	4649      	mov	r1, r9
 8007152:	f7f9 f83f 	bl	80001d4 <__adddf3>
 8007156:	4622      	mov	r2, r4
 8007158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800715c:	462b      	mov	r3, r5
 800715e:	4630      	mov	r0, r6
 8007160:	4639      	mov	r1, r7
 8007162:	f7f9 f835 	bl	80001d0 <__aeabi_dsub>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800716e:	f7f9 fc77 	bl	8000a60 <__aeabi_dcmpgt>
 8007172:	2800      	cmp	r0, #0
 8007174:	f47f adfe 	bne.w	8006d74 <__ieee754_pow+0x36c>
 8007178:	4aa3      	ldr	r2, [pc, #652]	; (8007408 <__ieee754_pow+0xa00>)
 800717a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800717e:	4293      	cmp	r3, r2
 8007180:	f340 810a 	ble.w	8007398 <__ieee754_pow+0x990>
 8007184:	151b      	asrs	r3, r3, #20
 8007186:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800718a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800718e:	fa4a f303 	asr.w	r3, sl, r3
 8007192:	445b      	add	r3, fp
 8007194:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007198:	4e9c      	ldr	r6, [pc, #624]	; (800740c <__ieee754_pow+0xa04>)
 800719a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800719e:	4116      	asrs	r6, r2
 80071a0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80071a4:	2000      	movs	r0, #0
 80071a6:	ea23 0106 	bic.w	r1, r3, r6
 80071aa:	f1c2 0214 	rsb	r2, r2, #20
 80071ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80071b2:	fa4a fa02 	asr.w	sl, sl, r2
 80071b6:	f1bb 0f00 	cmp.w	fp, #0
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4620      	mov	r0, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	bfb8      	it	lt
 80071c4:	f1ca 0a00 	rsblt	sl, sl, #0
 80071c8:	f7f9 f802 	bl	80001d0 <__aeabi_dsub>
 80071cc:	e9cd 0100 	strd	r0, r1, [sp]
 80071d0:	4642      	mov	r2, r8
 80071d2:	464b      	mov	r3, r9
 80071d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071d8:	f7f8 fffc 	bl	80001d4 <__adddf3>
 80071dc:	2000      	movs	r0, #0
 80071de:	a378      	add	r3, pc, #480	; (adr r3, 80073c0 <__ieee754_pow+0x9b8>)
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	4604      	mov	r4, r0
 80071e6:	460d      	mov	r5, r1
 80071e8:	f7f9 f9aa 	bl	8000540 <__aeabi_dmul>
 80071ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071f0:	4606      	mov	r6, r0
 80071f2:	460f      	mov	r7, r1
 80071f4:	4620      	mov	r0, r4
 80071f6:	4629      	mov	r1, r5
 80071f8:	f7f8 ffea 	bl	80001d0 <__aeabi_dsub>
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	4640      	mov	r0, r8
 8007202:	4649      	mov	r1, r9
 8007204:	f7f8 ffe4 	bl	80001d0 <__aeabi_dsub>
 8007208:	a36f      	add	r3, pc, #444	; (adr r3, 80073c8 <__ieee754_pow+0x9c0>)
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f7f9 f997 	bl	8000540 <__aeabi_dmul>
 8007212:	a36f      	add	r3, pc, #444	; (adr r3, 80073d0 <__ieee754_pow+0x9c8>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	4680      	mov	r8, r0
 800721a:	4689      	mov	r9, r1
 800721c:	4620      	mov	r0, r4
 800721e:	4629      	mov	r1, r5
 8007220:	f7f9 f98e 	bl	8000540 <__aeabi_dmul>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4640      	mov	r0, r8
 800722a:	4649      	mov	r1, r9
 800722c:	f7f8 ffd2 	bl	80001d4 <__adddf3>
 8007230:	4604      	mov	r4, r0
 8007232:	460d      	mov	r5, r1
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	f7f8 ffca 	bl	80001d4 <__adddf3>
 8007240:	4632      	mov	r2, r6
 8007242:	463b      	mov	r3, r7
 8007244:	4680      	mov	r8, r0
 8007246:	4689      	mov	r9, r1
 8007248:	f7f8 ffc2 	bl	80001d0 <__aeabi_dsub>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4620      	mov	r0, r4
 8007252:	4629      	mov	r1, r5
 8007254:	f7f8 ffbc 	bl	80001d0 <__aeabi_dsub>
 8007258:	4642      	mov	r2, r8
 800725a:	4606      	mov	r6, r0
 800725c:	460f      	mov	r7, r1
 800725e:	464b      	mov	r3, r9
 8007260:	4640      	mov	r0, r8
 8007262:	4649      	mov	r1, r9
 8007264:	f7f9 f96c 	bl	8000540 <__aeabi_dmul>
 8007268:	a35b      	add	r3, pc, #364	; (adr r3, 80073d8 <__ieee754_pow+0x9d0>)
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	4604      	mov	r4, r0
 8007270:	460d      	mov	r5, r1
 8007272:	f7f9 f965 	bl	8000540 <__aeabi_dmul>
 8007276:	a35a      	add	r3, pc, #360	; (adr r3, 80073e0 <__ieee754_pow+0x9d8>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	f7f8 ffa8 	bl	80001d0 <__aeabi_dsub>
 8007280:	4622      	mov	r2, r4
 8007282:	462b      	mov	r3, r5
 8007284:	f7f9 f95c 	bl	8000540 <__aeabi_dmul>
 8007288:	a357      	add	r3, pc, #348	; (adr r3, 80073e8 <__ieee754_pow+0x9e0>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f7f8 ffa1 	bl	80001d4 <__adddf3>
 8007292:	4622      	mov	r2, r4
 8007294:	462b      	mov	r3, r5
 8007296:	f7f9 f953 	bl	8000540 <__aeabi_dmul>
 800729a:	a355      	add	r3, pc, #340	; (adr r3, 80073f0 <__ieee754_pow+0x9e8>)
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f7f8 ff96 	bl	80001d0 <__aeabi_dsub>
 80072a4:	4622      	mov	r2, r4
 80072a6:	462b      	mov	r3, r5
 80072a8:	f7f9 f94a 	bl	8000540 <__aeabi_dmul>
 80072ac:	a352      	add	r3, pc, #328	; (adr r3, 80073f8 <__ieee754_pow+0x9f0>)
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	f7f8 ff8f 	bl	80001d4 <__adddf3>
 80072b6:	4622      	mov	r2, r4
 80072b8:	462b      	mov	r3, r5
 80072ba:	f7f9 f941 	bl	8000540 <__aeabi_dmul>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4640      	mov	r0, r8
 80072c4:	4649      	mov	r1, r9
 80072c6:	f7f8 ff83 	bl	80001d0 <__aeabi_dsub>
 80072ca:	4604      	mov	r4, r0
 80072cc:	460d      	mov	r5, r1
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4640      	mov	r0, r8
 80072d4:	4649      	mov	r1, r9
 80072d6:	f7f9 f933 	bl	8000540 <__aeabi_dmul>
 80072da:	2200      	movs	r2, #0
 80072dc:	e9cd 0100 	strd	r0, r1, [sp]
 80072e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072e4:	4620      	mov	r0, r4
 80072e6:	4629      	mov	r1, r5
 80072e8:	f7f8 ff72 	bl	80001d0 <__aeabi_dsub>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072f4:	f7f9 fa4e 	bl	8000794 <__aeabi_ddiv>
 80072f8:	4632      	mov	r2, r6
 80072fa:	4604      	mov	r4, r0
 80072fc:	460d      	mov	r5, r1
 80072fe:	463b      	mov	r3, r7
 8007300:	4640      	mov	r0, r8
 8007302:	4649      	mov	r1, r9
 8007304:	f7f9 f91c 	bl	8000540 <__aeabi_dmul>
 8007308:	4632      	mov	r2, r6
 800730a:	463b      	mov	r3, r7
 800730c:	f7f8 ff62 	bl	80001d4 <__adddf3>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4620      	mov	r0, r4
 8007316:	4629      	mov	r1, r5
 8007318:	f7f8 ff5a 	bl	80001d0 <__aeabi_dsub>
 800731c:	4642      	mov	r2, r8
 800731e:	464b      	mov	r3, r9
 8007320:	f7f8 ff56 	bl	80001d0 <__aeabi_dsub>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	2000      	movs	r0, #0
 800732a:	4939      	ldr	r1, [pc, #228]	; (8007410 <__ieee754_pow+0xa08>)
 800732c:	f7f8 ff50 	bl	80001d0 <__aeabi_dsub>
 8007330:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007334:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	da2f      	bge.n	800739e <__ieee754_pow+0x996>
 800733e:	4650      	mov	r0, sl
 8007340:	ec43 2b10 	vmov	d0, r2, r3
 8007344:	f001 f8fc 	bl	8008540 <scalbn>
 8007348:	ec51 0b10 	vmov	r0, r1, d0
 800734c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007350:	f7ff bbf1 	b.w	8006b36 <__ieee754_pow+0x12e>
 8007354:	4b2f      	ldr	r3, [pc, #188]	; (8007414 <__ieee754_pow+0xa0c>)
 8007356:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800735a:	429e      	cmp	r6, r3
 800735c:	f77f af0c 	ble.w	8007178 <__ieee754_pow+0x770>
 8007360:	4b2d      	ldr	r3, [pc, #180]	; (8007418 <__ieee754_pow+0xa10>)
 8007362:	440b      	add	r3, r1
 8007364:	4303      	orrs	r3, r0
 8007366:	d00b      	beq.n	8007380 <__ieee754_pow+0x978>
 8007368:	a325      	add	r3, pc, #148	; (adr r3, 8007400 <__ieee754_pow+0x9f8>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007372:	f7f9 f8e5 	bl	8000540 <__aeabi_dmul>
 8007376:	a322      	add	r3, pc, #136	; (adr r3, 8007400 <__ieee754_pow+0x9f8>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f7ff bbdb 	b.w	8006b36 <__ieee754_pow+0x12e>
 8007380:	4622      	mov	r2, r4
 8007382:	462b      	mov	r3, r5
 8007384:	f7f8 ff24 	bl	80001d0 <__aeabi_dsub>
 8007388:	4642      	mov	r2, r8
 800738a:	464b      	mov	r3, r9
 800738c:	f7f9 fb5e 	bl	8000a4c <__aeabi_dcmpge>
 8007390:	2800      	cmp	r0, #0
 8007392:	f43f aef1 	beq.w	8007178 <__ieee754_pow+0x770>
 8007396:	e7e7      	b.n	8007368 <__ieee754_pow+0x960>
 8007398:	f04f 0a00 	mov.w	sl, #0
 800739c:	e718      	b.n	80071d0 <__ieee754_pow+0x7c8>
 800739e:	4621      	mov	r1, r4
 80073a0:	e7d4      	b.n	800734c <__ieee754_pow+0x944>
 80073a2:	2000      	movs	r0, #0
 80073a4:	491a      	ldr	r1, [pc, #104]	; (8007410 <__ieee754_pow+0xa08>)
 80073a6:	f7ff bb8f 	b.w	8006ac8 <__ieee754_pow+0xc0>
 80073aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073ae:	f7ff bb8b 	b.w	8006ac8 <__ieee754_pow+0xc0>
 80073b2:	4630      	mov	r0, r6
 80073b4:	4639      	mov	r1, r7
 80073b6:	f7ff bb87 	b.w	8006ac8 <__ieee754_pow+0xc0>
 80073ba:	4693      	mov	fp, r2
 80073bc:	f7ff bb98 	b.w	8006af0 <__ieee754_pow+0xe8>
 80073c0:	00000000 	.word	0x00000000
 80073c4:	3fe62e43 	.word	0x3fe62e43
 80073c8:	fefa39ef 	.word	0xfefa39ef
 80073cc:	3fe62e42 	.word	0x3fe62e42
 80073d0:	0ca86c39 	.word	0x0ca86c39
 80073d4:	be205c61 	.word	0xbe205c61
 80073d8:	72bea4d0 	.word	0x72bea4d0
 80073dc:	3e663769 	.word	0x3e663769
 80073e0:	c5d26bf1 	.word	0xc5d26bf1
 80073e4:	3ebbbd41 	.word	0x3ebbbd41
 80073e8:	af25de2c 	.word	0xaf25de2c
 80073ec:	3f11566a 	.word	0x3f11566a
 80073f0:	16bebd93 	.word	0x16bebd93
 80073f4:	3f66c16c 	.word	0x3f66c16c
 80073f8:	5555553e 	.word	0x5555553e
 80073fc:	3fc55555 	.word	0x3fc55555
 8007400:	c2f8f359 	.word	0xc2f8f359
 8007404:	01a56e1f 	.word	0x01a56e1f
 8007408:	3fe00000 	.word	0x3fe00000
 800740c:	000fffff 	.word	0x000fffff
 8007410:	3ff00000 	.word	0x3ff00000
 8007414:	4090cbff 	.word	0x4090cbff
 8007418:	3f6f3400 	.word	0x3f6f3400
 800741c:	652b82fe 	.word	0x652b82fe
 8007420:	3c971547 	.word	0x3c971547
 8007424:	00000000 	.word	0x00000000

08007428 <__ieee754_rem_pio2>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	ec57 6b10 	vmov	r6, r7, d0
 8007430:	4bc3      	ldr	r3, [pc, #780]	; (8007740 <__ieee754_rem_pio2+0x318>)
 8007432:	b08d      	sub	sp, #52	; 0x34
 8007434:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007438:	4598      	cmp	r8, r3
 800743a:	4604      	mov	r4, r0
 800743c:	9704      	str	r7, [sp, #16]
 800743e:	dc07      	bgt.n	8007450 <__ieee754_rem_pio2+0x28>
 8007440:	2200      	movs	r2, #0
 8007442:	2300      	movs	r3, #0
 8007444:	ed84 0b00 	vstr	d0, [r4]
 8007448:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800744c:	2500      	movs	r5, #0
 800744e:	e027      	b.n	80074a0 <__ieee754_rem_pio2+0x78>
 8007450:	4bbc      	ldr	r3, [pc, #752]	; (8007744 <__ieee754_rem_pio2+0x31c>)
 8007452:	4598      	cmp	r8, r3
 8007454:	dc75      	bgt.n	8007542 <__ieee754_rem_pio2+0x11a>
 8007456:	9b04      	ldr	r3, [sp, #16]
 8007458:	4dbb      	ldr	r5, [pc, #748]	; (8007748 <__ieee754_rem_pio2+0x320>)
 800745a:	2b00      	cmp	r3, #0
 800745c:	ee10 0a10 	vmov	r0, s0
 8007460:	a3a9      	add	r3, pc, #676	; (adr r3, 8007708 <__ieee754_rem_pio2+0x2e0>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	4639      	mov	r1, r7
 8007468:	dd36      	ble.n	80074d8 <__ieee754_rem_pio2+0xb0>
 800746a:	f7f8 feb1 	bl	80001d0 <__aeabi_dsub>
 800746e:	45a8      	cmp	r8, r5
 8007470:	4606      	mov	r6, r0
 8007472:	460f      	mov	r7, r1
 8007474:	d018      	beq.n	80074a8 <__ieee754_rem_pio2+0x80>
 8007476:	a3a6      	add	r3, pc, #664	; (adr r3, 8007710 <__ieee754_rem_pio2+0x2e8>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f7f8 fea8 	bl	80001d0 <__aeabi_dsub>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	e9c4 2300 	strd	r2, r3, [r4]
 8007488:	4630      	mov	r0, r6
 800748a:	4639      	mov	r1, r7
 800748c:	f7f8 fea0 	bl	80001d0 <__aeabi_dsub>
 8007490:	a39f      	add	r3, pc, #636	; (adr r3, 8007710 <__ieee754_rem_pio2+0x2e8>)
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f7f8 fe9b 	bl	80001d0 <__aeabi_dsub>
 800749a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800749e:	2501      	movs	r5, #1
 80074a0:	4628      	mov	r0, r5
 80074a2:	b00d      	add	sp, #52	; 0x34
 80074a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a8:	a39b      	add	r3, pc, #620	; (adr r3, 8007718 <__ieee754_rem_pio2+0x2f0>)
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	f7f8 fe8f 	bl	80001d0 <__aeabi_dsub>
 80074b2:	a39b      	add	r3, pc, #620	; (adr r3, 8007720 <__ieee754_rem_pio2+0x2f8>)
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	4606      	mov	r6, r0
 80074ba:	460f      	mov	r7, r1
 80074bc:	f7f8 fe88 	bl	80001d0 <__aeabi_dsub>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	e9c4 2300 	strd	r2, r3, [r4]
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f8 fe80 	bl	80001d0 <__aeabi_dsub>
 80074d0:	a393      	add	r3, pc, #588	; (adr r3, 8007720 <__ieee754_rem_pio2+0x2f8>)
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	e7de      	b.n	8007496 <__ieee754_rem_pio2+0x6e>
 80074d8:	f7f8 fe7c 	bl	80001d4 <__adddf3>
 80074dc:	45a8      	cmp	r8, r5
 80074de:	4606      	mov	r6, r0
 80074e0:	460f      	mov	r7, r1
 80074e2:	d016      	beq.n	8007512 <__ieee754_rem_pio2+0xea>
 80074e4:	a38a      	add	r3, pc, #552	; (adr r3, 8007710 <__ieee754_rem_pio2+0x2e8>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f7f8 fe73 	bl	80001d4 <__adddf3>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	e9c4 2300 	strd	r2, r3, [r4]
 80074f6:	4630      	mov	r0, r6
 80074f8:	4639      	mov	r1, r7
 80074fa:	f7f8 fe69 	bl	80001d0 <__aeabi_dsub>
 80074fe:	a384      	add	r3, pc, #528	; (adr r3, 8007710 <__ieee754_rem_pio2+0x2e8>)
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	f7f8 fe66 	bl	80001d4 <__adddf3>
 8007508:	f04f 35ff 	mov.w	r5, #4294967295
 800750c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007510:	e7c6      	b.n	80074a0 <__ieee754_rem_pio2+0x78>
 8007512:	a381      	add	r3, pc, #516	; (adr r3, 8007718 <__ieee754_rem_pio2+0x2f0>)
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	f7f8 fe5c 	bl	80001d4 <__adddf3>
 800751c:	a380      	add	r3, pc, #512	; (adr r3, 8007720 <__ieee754_rem_pio2+0x2f8>)
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	4606      	mov	r6, r0
 8007524:	460f      	mov	r7, r1
 8007526:	f7f8 fe55 	bl	80001d4 <__adddf3>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	e9c4 2300 	strd	r2, r3, [r4]
 8007532:	4630      	mov	r0, r6
 8007534:	4639      	mov	r1, r7
 8007536:	f7f8 fe4b 	bl	80001d0 <__aeabi_dsub>
 800753a:	a379      	add	r3, pc, #484	; (adr r3, 8007720 <__ieee754_rem_pio2+0x2f8>)
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	e7e0      	b.n	8007504 <__ieee754_rem_pio2+0xdc>
 8007542:	4b82      	ldr	r3, [pc, #520]	; (800774c <__ieee754_rem_pio2+0x324>)
 8007544:	4598      	cmp	r8, r3
 8007546:	f300 80d0 	bgt.w	80076ea <__ieee754_rem_pio2+0x2c2>
 800754a:	f000 fed3 	bl	80082f4 <fabs>
 800754e:	ec57 6b10 	vmov	r6, r7, d0
 8007552:	ee10 0a10 	vmov	r0, s0
 8007556:	a374      	add	r3, pc, #464	; (adr r3, 8007728 <__ieee754_rem_pio2+0x300>)
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	4639      	mov	r1, r7
 800755e:	f7f8 ffef 	bl	8000540 <__aeabi_dmul>
 8007562:	2200      	movs	r2, #0
 8007564:	4b7a      	ldr	r3, [pc, #488]	; (8007750 <__ieee754_rem_pio2+0x328>)
 8007566:	f7f8 fe35 	bl	80001d4 <__adddf3>
 800756a:	f7f9 fa99 	bl	8000aa0 <__aeabi_d2iz>
 800756e:	4605      	mov	r5, r0
 8007570:	f7f8 ff7c 	bl	800046c <__aeabi_i2d>
 8007574:	a364      	add	r3, pc, #400	; (adr r3, 8007708 <__ieee754_rem_pio2+0x2e0>)
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800757e:	f7f8 ffdf 	bl	8000540 <__aeabi_dmul>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	4630      	mov	r0, r6
 8007588:	4639      	mov	r1, r7
 800758a:	f7f8 fe21 	bl	80001d0 <__aeabi_dsub>
 800758e:	a360      	add	r3, pc, #384	; (adr r3, 8007710 <__ieee754_rem_pio2+0x2e8>)
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	4682      	mov	sl, r0
 8007596:	468b      	mov	fp, r1
 8007598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800759c:	f7f8 ffd0 	bl	8000540 <__aeabi_dmul>
 80075a0:	2d1f      	cmp	r5, #31
 80075a2:	4606      	mov	r6, r0
 80075a4:	460f      	mov	r7, r1
 80075a6:	dc0c      	bgt.n	80075c2 <__ieee754_rem_pio2+0x19a>
 80075a8:	1e6a      	subs	r2, r5, #1
 80075aa:	4b6a      	ldr	r3, [pc, #424]	; (8007754 <__ieee754_rem_pio2+0x32c>)
 80075ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b0:	4543      	cmp	r3, r8
 80075b2:	d006      	beq.n	80075c2 <__ieee754_rem_pio2+0x19a>
 80075b4:	4632      	mov	r2, r6
 80075b6:	463b      	mov	r3, r7
 80075b8:	4650      	mov	r0, sl
 80075ba:	4659      	mov	r1, fp
 80075bc:	f7f8 fe08 	bl	80001d0 <__aeabi_dsub>
 80075c0:	e00e      	b.n	80075e0 <__ieee754_rem_pio2+0x1b8>
 80075c2:	4632      	mov	r2, r6
 80075c4:	463b      	mov	r3, r7
 80075c6:	4650      	mov	r0, sl
 80075c8:	4659      	mov	r1, fp
 80075ca:	f7f8 fe01 	bl	80001d0 <__aeabi_dsub>
 80075ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 80075d2:	9305      	str	r3, [sp, #20]
 80075d4:	9a05      	ldr	r2, [sp, #20]
 80075d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b10      	cmp	r3, #16
 80075de:	dc02      	bgt.n	80075e6 <__ieee754_rem_pio2+0x1be>
 80075e0:	e9c4 0100 	strd	r0, r1, [r4]
 80075e4:	e039      	b.n	800765a <__ieee754_rem_pio2+0x232>
 80075e6:	a34c      	add	r3, pc, #304	; (adr r3, 8007718 <__ieee754_rem_pio2+0x2f0>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075f0:	f7f8 ffa6 	bl	8000540 <__aeabi_dmul>
 80075f4:	4606      	mov	r6, r0
 80075f6:	460f      	mov	r7, r1
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4650      	mov	r0, sl
 80075fe:	4659      	mov	r1, fp
 8007600:	f7f8 fde6 	bl	80001d0 <__aeabi_dsub>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	4680      	mov	r8, r0
 800760a:	4689      	mov	r9, r1
 800760c:	4650      	mov	r0, sl
 800760e:	4659      	mov	r1, fp
 8007610:	f7f8 fdde 	bl	80001d0 <__aeabi_dsub>
 8007614:	4632      	mov	r2, r6
 8007616:	463b      	mov	r3, r7
 8007618:	f7f8 fdda 	bl	80001d0 <__aeabi_dsub>
 800761c:	a340      	add	r3, pc, #256	; (adr r3, 8007720 <__ieee754_rem_pio2+0x2f8>)
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	4606      	mov	r6, r0
 8007624:	460f      	mov	r7, r1
 8007626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800762a:	f7f8 ff89 	bl	8000540 <__aeabi_dmul>
 800762e:	4632      	mov	r2, r6
 8007630:	463b      	mov	r3, r7
 8007632:	f7f8 fdcd 	bl	80001d0 <__aeabi_dsub>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4606      	mov	r6, r0
 800763c:	460f      	mov	r7, r1
 800763e:	4640      	mov	r0, r8
 8007640:	4649      	mov	r1, r9
 8007642:	f7f8 fdc5 	bl	80001d0 <__aeabi_dsub>
 8007646:	9a05      	ldr	r2, [sp, #20]
 8007648:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b31      	cmp	r3, #49	; 0x31
 8007650:	dc20      	bgt.n	8007694 <__ieee754_rem_pio2+0x26c>
 8007652:	e9c4 0100 	strd	r0, r1, [r4]
 8007656:	46c2      	mov	sl, r8
 8007658:	46cb      	mov	fp, r9
 800765a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800765e:	4650      	mov	r0, sl
 8007660:	4642      	mov	r2, r8
 8007662:	464b      	mov	r3, r9
 8007664:	4659      	mov	r1, fp
 8007666:	f7f8 fdb3 	bl	80001d0 <__aeabi_dsub>
 800766a:	463b      	mov	r3, r7
 800766c:	4632      	mov	r2, r6
 800766e:	f7f8 fdaf 	bl	80001d0 <__aeabi_dsub>
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800767a:	f6bf af11 	bge.w	80074a0 <__ieee754_rem_pio2+0x78>
 800767e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007682:	6063      	str	r3, [r4, #4]
 8007684:	f8c4 8000 	str.w	r8, [r4]
 8007688:	60a0      	str	r0, [r4, #8]
 800768a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800768e:	60e3      	str	r3, [r4, #12]
 8007690:	426d      	negs	r5, r5
 8007692:	e705      	b.n	80074a0 <__ieee754_rem_pio2+0x78>
 8007694:	a326      	add	r3, pc, #152	; (adr r3, 8007730 <__ieee754_rem_pio2+0x308>)
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800769e:	f7f8 ff4f 	bl	8000540 <__aeabi_dmul>
 80076a2:	4606      	mov	r6, r0
 80076a4:	460f      	mov	r7, r1
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4640      	mov	r0, r8
 80076ac:	4649      	mov	r1, r9
 80076ae:	f7f8 fd8f 	bl	80001d0 <__aeabi_dsub>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4682      	mov	sl, r0
 80076b8:	468b      	mov	fp, r1
 80076ba:	4640      	mov	r0, r8
 80076bc:	4649      	mov	r1, r9
 80076be:	f7f8 fd87 	bl	80001d0 <__aeabi_dsub>
 80076c2:	4632      	mov	r2, r6
 80076c4:	463b      	mov	r3, r7
 80076c6:	f7f8 fd83 	bl	80001d0 <__aeabi_dsub>
 80076ca:	a31b      	add	r3, pc, #108	; (adr r3, 8007738 <__ieee754_rem_pio2+0x310>)
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	4606      	mov	r6, r0
 80076d2:	460f      	mov	r7, r1
 80076d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d8:	f7f8 ff32 	bl	8000540 <__aeabi_dmul>
 80076dc:	4632      	mov	r2, r6
 80076de:	463b      	mov	r3, r7
 80076e0:	f7f8 fd76 	bl	80001d0 <__aeabi_dsub>
 80076e4:	4606      	mov	r6, r0
 80076e6:	460f      	mov	r7, r1
 80076e8:	e764      	b.n	80075b4 <__ieee754_rem_pio2+0x18c>
 80076ea:	4b1b      	ldr	r3, [pc, #108]	; (8007758 <__ieee754_rem_pio2+0x330>)
 80076ec:	4598      	cmp	r8, r3
 80076ee:	dd35      	ble.n	800775c <__ieee754_rem_pio2+0x334>
 80076f0:	ee10 2a10 	vmov	r2, s0
 80076f4:	463b      	mov	r3, r7
 80076f6:	4630      	mov	r0, r6
 80076f8:	4639      	mov	r1, r7
 80076fa:	f7f8 fd69 	bl	80001d0 <__aeabi_dsub>
 80076fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007702:	e9c4 0100 	strd	r0, r1, [r4]
 8007706:	e6a1      	b.n	800744c <__ieee754_rem_pio2+0x24>
 8007708:	54400000 	.word	0x54400000
 800770c:	3ff921fb 	.word	0x3ff921fb
 8007710:	1a626331 	.word	0x1a626331
 8007714:	3dd0b461 	.word	0x3dd0b461
 8007718:	1a600000 	.word	0x1a600000
 800771c:	3dd0b461 	.word	0x3dd0b461
 8007720:	2e037073 	.word	0x2e037073
 8007724:	3ba3198a 	.word	0x3ba3198a
 8007728:	6dc9c883 	.word	0x6dc9c883
 800772c:	3fe45f30 	.word	0x3fe45f30
 8007730:	2e000000 	.word	0x2e000000
 8007734:	3ba3198a 	.word	0x3ba3198a
 8007738:	252049c1 	.word	0x252049c1
 800773c:	397b839a 	.word	0x397b839a
 8007740:	3fe921fb 	.word	0x3fe921fb
 8007744:	4002d97b 	.word	0x4002d97b
 8007748:	3ff921fb 	.word	0x3ff921fb
 800774c:	413921fb 	.word	0x413921fb
 8007750:	3fe00000 	.word	0x3fe00000
 8007754:	080086c0 	.word	0x080086c0
 8007758:	7fefffff 	.word	0x7fefffff
 800775c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007760:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8007764:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007768:	4630      	mov	r0, r6
 800776a:	460f      	mov	r7, r1
 800776c:	f7f9 f998 	bl	8000aa0 <__aeabi_d2iz>
 8007770:	f7f8 fe7c 	bl	800046c <__aeabi_i2d>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4630      	mov	r0, r6
 800777a:	4639      	mov	r1, r7
 800777c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007780:	f7f8 fd26 	bl	80001d0 <__aeabi_dsub>
 8007784:	2200      	movs	r2, #0
 8007786:	4b1f      	ldr	r3, [pc, #124]	; (8007804 <__ieee754_rem_pio2+0x3dc>)
 8007788:	f7f8 feda 	bl	8000540 <__aeabi_dmul>
 800778c:	460f      	mov	r7, r1
 800778e:	4606      	mov	r6, r0
 8007790:	f7f9 f986 	bl	8000aa0 <__aeabi_d2iz>
 8007794:	f7f8 fe6a 	bl	800046c <__aeabi_i2d>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4630      	mov	r0, r6
 800779e:	4639      	mov	r1, r7
 80077a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80077a4:	f7f8 fd14 	bl	80001d0 <__aeabi_dsub>
 80077a8:	2200      	movs	r2, #0
 80077aa:	4b16      	ldr	r3, [pc, #88]	; (8007804 <__ieee754_rem_pio2+0x3dc>)
 80077ac:	f7f8 fec8 	bl	8000540 <__aeabi_dmul>
 80077b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80077b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80077b8:	f04f 0803 	mov.w	r8, #3
 80077bc:	2600      	movs	r6, #0
 80077be:	2700      	movs	r7, #0
 80077c0:	4632      	mov	r2, r6
 80077c2:	463b      	mov	r3, r7
 80077c4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80077c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80077cc:	f7f9 f920 	bl	8000a10 <__aeabi_dcmpeq>
 80077d0:	b9b0      	cbnz	r0, 8007800 <__ieee754_rem_pio2+0x3d8>
 80077d2:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <__ieee754_rem_pio2+0x3e0>)
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	2302      	movs	r3, #2
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	462a      	mov	r2, r5
 80077dc:	4643      	mov	r3, r8
 80077de:	4621      	mov	r1, r4
 80077e0:	a806      	add	r0, sp, #24
 80077e2:	f000 f98d 	bl	8007b00 <__kernel_rem_pio2>
 80077e6:	9b04      	ldr	r3, [sp, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	4605      	mov	r5, r0
 80077ec:	f6bf ae58 	bge.w	80074a0 <__ieee754_rem_pio2+0x78>
 80077f0:	6863      	ldr	r3, [r4, #4]
 80077f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80077f6:	6063      	str	r3, [r4, #4]
 80077f8:	68e3      	ldr	r3, [r4, #12]
 80077fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80077fe:	e746      	b.n	800768e <__ieee754_rem_pio2+0x266>
 8007800:	46d0      	mov	r8, sl
 8007802:	e7dd      	b.n	80077c0 <__ieee754_rem_pio2+0x398>
 8007804:	41700000 	.word	0x41700000
 8007808:	08008740 	.word	0x08008740

0800780c <__ieee754_sqrt>:
 800780c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007810:	4955      	ldr	r1, [pc, #340]	; (8007968 <__ieee754_sqrt+0x15c>)
 8007812:	ec55 4b10 	vmov	r4, r5, d0
 8007816:	43a9      	bics	r1, r5
 8007818:	462b      	mov	r3, r5
 800781a:	462a      	mov	r2, r5
 800781c:	d112      	bne.n	8007844 <__ieee754_sqrt+0x38>
 800781e:	ee10 2a10 	vmov	r2, s0
 8007822:	ee10 0a10 	vmov	r0, s0
 8007826:	4629      	mov	r1, r5
 8007828:	f7f8 fe8a 	bl	8000540 <__aeabi_dmul>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4620      	mov	r0, r4
 8007832:	4629      	mov	r1, r5
 8007834:	f7f8 fcce 	bl	80001d4 <__adddf3>
 8007838:	4604      	mov	r4, r0
 800783a:	460d      	mov	r5, r1
 800783c:	ec45 4b10 	vmov	d0, r4, r5
 8007840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007844:	2d00      	cmp	r5, #0
 8007846:	ee10 0a10 	vmov	r0, s0
 800784a:	4621      	mov	r1, r4
 800784c:	dc0f      	bgt.n	800786e <__ieee754_sqrt+0x62>
 800784e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007852:	4330      	orrs	r0, r6
 8007854:	d0f2      	beq.n	800783c <__ieee754_sqrt+0x30>
 8007856:	b155      	cbz	r5, 800786e <__ieee754_sqrt+0x62>
 8007858:	ee10 2a10 	vmov	r2, s0
 800785c:	4620      	mov	r0, r4
 800785e:	4629      	mov	r1, r5
 8007860:	f7f8 fcb6 	bl	80001d0 <__aeabi_dsub>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	f7f8 ff94 	bl	8000794 <__aeabi_ddiv>
 800786c:	e7e4      	b.n	8007838 <__ieee754_sqrt+0x2c>
 800786e:	151b      	asrs	r3, r3, #20
 8007870:	d073      	beq.n	800795a <__ieee754_sqrt+0x14e>
 8007872:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007876:	07dd      	lsls	r5, r3, #31
 8007878:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800787c:	bf48      	it	mi
 800787e:	0fc8      	lsrmi	r0, r1, #31
 8007880:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007884:	bf44      	itt	mi
 8007886:	0049      	lslmi	r1, r1, #1
 8007888:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800788c:	2500      	movs	r5, #0
 800788e:	1058      	asrs	r0, r3, #1
 8007890:	0fcb      	lsrs	r3, r1, #31
 8007892:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007896:	0049      	lsls	r1, r1, #1
 8007898:	2316      	movs	r3, #22
 800789a:	462c      	mov	r4, r5
 800789c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80078a0:	19a7      	adds	r7, r4, r6
 80078a2:	4297      	cmp	r7, r2
 80078a4:	bfde      	ittt	le
 80078a6:	19bc      	addle	r4, r7, r6
 80078a8:	1bd2      	suble	r2, r2, r7
 80078aa:	19ad      	addle	r5, r5, r6
 80078ac:	0fcf      	lsrs	r7, r1, #31
 80078ae:	3b01      	subs	r3, #1
 80078b0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80078b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80078b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80078bc:	d1f0      	bne.n	80078a0 <__ieee754_sqrt+0x94>
 80078be:	f04f 0c20 	mov.w	ip, #32
 80078c2:	469e      	mov	lr, r3
 80078c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80078c8:	42a2      	cmp	r2, r4
 80078ca:	eb06 070e 	add.w	r7, r6, lr
 80078ce:	dc02      	bgt.n	80078d6 <__ieee754_sqrt+0xca>
 80078d0:	d112      	bne.n	80078f8 <__ieee754_sqrt+0xec>
 80078d2:	428f      	cmp	r7, r1
 80078d4:	d810      	bhi.n	80078f8 <__ieee754_sqrt+0xec>
 80078d6:	2f00      	cmp	r7, #0
 80078d8:	eb07 0e06 	add.w	lr, r7, r6
 80078dc:	da42      	bge.n	8007964 <__ieee754_sqrt+0x158>
 80078de:	f1be 0f00 	cmp.w	lr, #0
 80078e2:	db3f      	blt.n	8007964 <__ieee754_sqrt+0x158>
 80078e4:	f104 0801 	add.w	r8, r4, #1
 80078e8:	1b12      	subs	r2, r2, r4
 80078ea:	428f      	cmp	r7, r1
 80078ec:	bf88      	it	hi
 80078ee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80078f2:	1bc9      	subs	r1, r1, r7
 80078f4:	4433      	add	r3, r6
 80078f6:	4644      	mov	r4, r8
 80078f8:	0052      	lsls	r2, r2, #1
 80078fa:	f1bc 0c01 	subs.w	ip, ip, #1
 80078fe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007902:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007906:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800790a:	d1dd      	bne.n	80078c8 <__ieee754_sqrt+0xbc>
 800790c:	430a      	orrs	r2, r1
 800790e:	d006      	beq.n	800791e <__ieee754_sqrt+0x112>
 8007910:	1c5c      	adds	r4, r3, #1
 8007912:	bf13      	iteet	ne
 8007914:	3301      	addne	r3, #1
 8007916:	3501      	addeq	r5, #1
 8007918:	4663      	moveq	r3, ip
 800791a:	f023 0301 	bicne.w	r3, r3, #1
 800791e:	106a      	asrs	r2, r5, #1
 8007920:	085b      	lsrs	r3, r3, #1
 8007922:	07e9      	lsls	r1, r5, #31
 8007924:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007928:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800792c:	bf48      	it	mi
 800792e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007932:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007936:	461c      	mov	r4, r3
 8007938:	e780      	b.n	800783c <__ieee754_sqrt+0x30>
 800793a:	0aca      	lsrs	r2, r1, #11
 800793c:	3815      	subs	r0, #21
 800793e:	0549      	lsls	r1, r1, #21
 8007940:	2a00      	cmp	r2, #0
 8007942:	d0fa      	beq.n	800793a <__ieee754_sqrt+0x12e>
 8007944:	02d6      	lsls	r6, r2, #11
 8007946:	d50a      	bpl.n	800795e <__ieee754_sqrt+0x152>
 8007948:	f1c3 0420 	rsb	r4, r3, #32
 800794c:	fa21 f404 	lsr.w	r4, r1, r4
 8007950:	1e5d      	subs	r5, r3, #1
 8007952:	4099      	lsls	r1, r3
 8007954:	4322      	orrs	r2, r4
 8007956:	1b43      	subs	r3, r0, r5
 8007958:	e78b      	b.n	8007872 <__ieee754_sqrt+0x66>
 800795a:	4618      	mov	r0, r3
 800795c:	e7f0      	b.n	8007940 <__ieee754_sqrt+0x134>
 800795e:	0052      	lsls	r2, r2, #1
 8007960:	3301      	adds	r3, #1
 8007962:	e7ef      	b.n	8007944 <__ieee754_sqrt+0x138>
 8007964:	46a0      	mov	r8, r4
 8007966:	e7bf      	b.n	80078e8 <__ieee754_sqrt+0xdc>
 8007968:	7ff00000 	.word	0x7ff00000
 800796c:	00000000 	.word	0x00000000

08007970 <__kernel_cos>:
 8007970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007974:	ec59 8b10 	vmov	r8, r9, d0
 8007978:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800797c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007980:	ed2d 8b02 	vpush	{d8}
 8007984:	eeb0 8a41 	vmov.f32	s16, s2
 8007988:	eef0 8a61 	vmov.f32	s17, s3
 800798c:	da07      	bge.n	800799e <__kernel_cos+0x2e>
 800798e:	ee10 0a10 	vmov	r0, s0
 8007992:	4649      	mov	r1, r9
 8007994:	f7f9 f884 	bl	8000aa0 <__aeabi_d2iz>
 8007998:	2800      	cmp	r0, #0
 800799a:	f000 8089 	beq.w	8007ab0 <__kernel_cos+0x140>
 800799e:	4642      	mov	r2, r8
 80079a0:	464b      	mov	r3, r9
 80079a2:	4640      	mov	r0, r8
 80079a4:	4649      	mov	r1, r9
 80079a6:	f7f8 fdcb 	bl	8000540 <__aeabi_dmul>
 80079aa:	2200      	movs	r2, #0
 80079ac:	4b4e      	ldr	r3, [pc, #312]	; (8007ae8 <__kernel_cos+0x178>)
 80079ae:	4604      	mov	r4, r0
 80079b0:	460d      	mov	r5, r1
 80079b2:	f7f8 fdc5 	bl	8000540 <__aeabi_dmul>
 80079b6:	a340      	add	r3, pc, #256	; (adr r3, 8007ab8 <__kernel_cos+0x148>)
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	4682      	mov	sl, r0
 80079be:	468b      	mov	fp, r1
 80079c0:	4620      	mov	r0, r4
 80079c2:	4629      	mov	r1, r5
 80079c4:	f7f8 fdbc 	bl	8000540 <__aeabi_dmul>
 80079c8:	a33d      	add	r3, pc, #244	; (adr r3, 8007ac0 <__kernel_cos+0x150>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f7f8 fc01 	bl	80001d4 <__adddf3>
 80079d2:	4622      	mov	r2, r4
 80079d4:	462b      	mov	r3, r5
 80079d6:	f7f8 fdb3 	bl	8000540 <__aeabi_dmul>
 80079da:	a33b      	add	r3, pc, #236	; (adr r3, 8007ac8 <__kernel_cos+0x158>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f7f8 fbf6 	bl	80001d0 <__aeabi_dsub>
 80079e4:	4622      	mov	r2, r4
 80079e6:	462b      	mov	r3, r5
 80079e8:	f7f8 fdaa 	bl	8000540 <__aeabi_dmul>
 80079ec:	a338      	add	r3, pc, #224	; (adr r3, 8007ad0 <__kernel_cos+0x160>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f7f8 fbef 	bl	80001d4 <__adddf3>
 80079f6:	4622      	mov	r2, r4
 80079f8:	462b      	mov	r3, r5
 80079fa:	f7f8 fda1 	bl	8000540 <__aeabi_dmul>
 80079fe:	a336      	add	r3, pc, #216	; (adr r3, 8007ad8 <__kernel_cos+0x168>)
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 fbe4 	bl	80001d0 <__aeabi_dsub>
 8007a08:	4622      	mov	r2, r4
 8007a0a:	462b      	mov	r3, r5
 8007a0c:	f7f8 fd98 	bl	8000540 <__aeabi_dmul>
 8007a10:	a333      	add	r3, pc, #204	; (adr r3, 8007ae0 <__kernel_cos+0x170>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fbdd 	bl	80001d4 <__adddf3>
 8007a1a:	4622      	mov	r2, r4
 8007a1c:	462b      	mov	r3, r5
 8007a1e:	f7f8 fd8f 	bl	8000540 <__aeabi_dmul>
 8007a22:	4622      	mov	r2, r4
 8007a24:	462b      	mov	r3, r5
 8007a26:	f7f8 fd8b 	bl	8000540 <__aeabi_dmul>
 8007a2a:	ec53 2b18 	vmov	r2, r3, d8
 8007a2e:	4604      	mov	r4, r0
 8007a30:	460d      	mov	r5, r1
 8007a32:	4640      	mov	r0, r8
 8007a34:	4649      	mov	r1, r9
 8007a36:	f7f8 fd83 	bl	8000540 <__aeabi_dmul>
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4620      	mov	r0, r4
 8007a42:	f7f8 fbc5 	bl	80001d0 <__aeabi_dsub>
 8007a46:	4b29      	ldr	r3, [pc, #164]	; (8007aec <__kernel_cos+0x17c>)
 8007a48:	429e      	cmp	r6, r3
 8007a4a:	4680      	mov	r8, r0
 8007a4c:	4689      	mov	r9, r1
 8007a4e:	dc11      	bgt.n	8007a74 <__kernel_cos+0x104>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4650      	mov	r0, sl
 8007a56:	4659      	mov	r1, fp
 8007a58:	f7f8 fbba 	bl	80001d0 <__aeabi_dsub>
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4924      	ldr	r1, [pc, #144]	; (8007af0 <__kernel_cos+0x180>)
 8007a60:	4602      	mov	r2, r0
 8007a62:	2000      	movs	r0, #0
 8007a64:	f7f8 fbb4 	bl	80001d0 <__aeabi_dsub>
 8007a68:	ecbd 8b02 	vpop	{d8}
 8007a6c:	ec41 0b10 	vmov	d0, r0, r1
 8007a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a74:	4b1f      	ldr	r3, [pc, #124]	; (8007af4 <__kernel_cos+0x184>)
 8007a76:	491e      	ldr	r1, [pc, #120]	; (8007af0 <__kernel_cos+0x180>)
 8007a78:	429e      	cmp	r6, r3
 8007a7a:	bfcc      	ite	gt
 8007a7c:	4d1e      	ldrgt	r5, [pc, #120]	; (8007af8 <__kernel_cos+0x188>)
 8007a7e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007a82:	2400      	movs	r4, #0
 8007a84:	4622      	mov	r2, r4
 8007a86:	462b      	mov	r3, r5
 8007a88:	2000      	movs	r0, #0
 8007a8a:	f7f8 fba1 	bl	80001d0 <__aeabi_dsub>
 8007a8e:	4622      	mov	r2, r4
 8007a90:	4606      	mov	r6, r0
 8007a92:	460f      	mov	r7, r1
 8007a94:	462b      	mov	r3, r5
 8007a96:	4650      	mov	r0, sl
 8007a98:	4659      	mov	r1, fp
 8007a9a:	f7f8 fb99 	bl	80001d0 <__aeabi_dsub>
 8007a9e:	4642      	mov	r2, r8
 8007aa0:	464b      	mov	r3, r9
 8007aa2:	f7f8 fb95 	bl	80001d0 <__aeabi_dsub>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4630      	mov	r0, r6
 8007aac:	4639      	mov	r1, r7
 8007aae:	e7d9      	b.n	8007a64 <__kernel_cos+0xf4>
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	490f      	ldr	r1, [pc, #60]	; (8007af0 <__kernel_cos+0x180>)
 8007ab4:	e7d8      	b.n	8007a68 <__kernel_cos+0xf8>
 8007ab6:	bf00      	nop
 8007ab8:	be8838d4 	.word	0xbe8838d4
 8007abc:	bda8fae9 	.word	0xbda8fae9
 8007ac0:	bdb4b1c4 	.word	0xbdb4b1c4
 8007ac4:	3e21ee9e 	.word	0x3e21ee9e
 8007ac8:	809c52ad 	.word	0x809c52ad
 8007acc:	3e927e4f 	.word	0x3e927e4f
 8007ad0:	19cb1590 	.word	0x19cb1590
 8007ad4:	3efa01a0 	.word	0x3efa01a0
 8007ad8:	16c15177 	.word	0x16c15177
 8007adc:	3f56c16c 	.word	0x3f56c16c
 8007ae0:	5555554c 	.word	0x5555554c
 8007ae4:	3fa55555 	.word	0x3fa55555
 8007ae8:	3fe00000 	.word	0x3fe00000
 8007aec:	3fd33332 	.word	0x3fd33332
 8007af0:	3ff00000 	.word	0x3ff00000
 8007af4:	3fe90000 	.word	0x3fe90000
 8007af8:	3fd20000 	.word	0x3fd20000
 8007afc:	00000000 	.word	0x00000000

08007b00 <__kernel_rem_pio2>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	ed2d 8b02 	vpush	{d8}
 8007b08:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007b0c:	1ed4      	subs	r4, r2, #3
 8007b0e:	9308      	str	r3, [sp, #32]
 8007b10:	9101      	str	r1, [sp, #4]
 8007b12:	4bc5      	ldr	r3, [pc, #788]	; (8007e28 <__kernel_rem_pio2+0x328>)
 8007b14:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007b16:	9009      	str	r0, [sp, #36]	; 0x24
 8007b18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b1c:	9304      	str	r3, [sp, #16]
 8007b1e:	9b08      	ldr	r3, [sp, #32]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	9307      	str	r3, [sp, #28]
 8007b24:	2318      	movs	r3, #24
 8007b26:	fb94 f4f3 	sdiv	r4, r4, r3
 8007b2a:	f06f 0317 	mvn.w	r3, #23
 8007b2e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8007b32:	fb04 3303 	mla	r3, r4, r3, r3
 8007b36:	eb03 0a02 	add.w	sl, r3, r2
 8007b3a:	9b04      	ldr	r3, [sp, #16]
 8007b3c:	9a07      	ldr	r2, [sp, #28]
 8007b3e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007e18 <__kernel_rem_pio2+0x318>
 8007b42:	eb03 0802 	add.w	r8, r3, r2
 8007b46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007b48:	1aa7      	subs	r7, r4, r2
 8007b4a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007b4e:	ae22      	add	r6, sp, #136	; 0x88
 8007b50:	2500      	movs	r5, #0
 8007b52:	4545      	cmp	r5, r8
 8007b54:	dd13      	ble.n	8007b7e <__kernel_rem_pio2+0x7e>
 8007b56:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007e18 <__kernel_rem_pio2+0x318>
 8007b5a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007b5e:	2600      	movs	r6, #0
 8007b60:	9b04      	ldr	r3, [sp, #16]
 8007b62:	429e      	cmp	r6, r3
 8007b64:	dc32      	bgt.n	8007bcc <__kernel_rem_pio2+0xcc>
 8007b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b68:	9302      	str	r3, [sp, #8]
 8007b6a:	9b08      	ldr	r3, [sp, #32]
 8007b6c:	199d      	adds	r5, r3, r6
 8007b6e:	ab22      	add	r3, sp, #136	; 0x88
 8007b70:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007b74:	9306      	str	r3, [sp, #24]
 8007b76:	ec59 8b18 	vmov	r8, r9, d8
 8007b7a:	2700      	movs	r7, #0
 8007b7c:	e01f      	b.n	8007bbe <__kernel_rem_pio2+0xbe>
 8007b7e:	42ef      	cmn	r7, r5
 8007b80:	d407      	bmi.n	8007b92 <__kernel_rem_pio2+0x92>
 8007b82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007b86:	f7f8 fc71 	bl	800046c <__aeabi_i2d>
 8007b8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007b8e:	3501      	adds	r5, #1
 8007b90:	e7df      	b.n	8007b52 <__kernel_rem_pio2+0x52>
 8007b92:	ec51 0b18 	vmov	r0, r1, d8
 8007b96:	e7f8      	b.n	8007b8a <__kernel_rem_pio2+0x8a>
 8007b98:	9906      	ldr	r1, [sp, #24]
 8007b9a:	9d02      	ldr	r5, [sp, #8]
 8007b9c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007ba0:	9106      	str	r1, [sp, #24]
 8007ba2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8007ba6:	9502      	str	r5, [sp, #8]
 8007ba8:	f7f8 fcca 	bl	8000540 <__aeabi_dmul>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	f7f8 fb0e 	bl	80001d4 <__adddf3>
 8007bb8:	3701      	adds	r7, #1
 8007bba:	4680      	mov	r8, r0
 8007bbc:	4689      	mov	r9, r1
 8007bbe:	9b07      	ldr	r3, [sp, #28]
 8007bc0:	429f      	cmp	r7, r3
 8007bc2:	dde9      	ble.n	8007b98 <__kernel_rem_pio2+0x98>
 8007bc4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007bc8:	3601      	adds	r6, #1
 8007bca:	e7c9      	b.n	8007b60 <__kernel_rem_pio2+0x60>
 8007bcc:	9b04      	ldr	r3, [sp, #16]
 8007bce:	aa0e      	add	r2, sp, #56	; 0x38
 8007bd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bd4:	930c      	str	r3, [sp, #48]	; 0x30
 8007bd6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007bd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007bdc:	9c04      	ldr	r4, [sp, #16]
 8007bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8007be0:	ab9a      	add	r3, sp, #616	; 0x268
 8007be2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8007be6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007bee:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007bf2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8007bf6:	ab9a      	add	r3, sp, #616	; 0x268
 8007bf8:	445b      	add	r3, fp
 8007bfa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007bfe:	2500      	movs	r5, #0
 8007c00:	1b63      	subs	r3, r4, r5
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	dc78      	bgt.n	8007cf8 <__kernel_rem_pio2+0x1f8>
 8007c06:	4650      	mov	r0, sl
 8007c08:	ec49 8b10 	vmov	d0, r8, r9
 8007c0c:	f000 fc98 	bl	8008540 <scalbn>
 8007c10:	ec57 6b10 	vmov	r6, r7, d0
 8007c14:	2200      	movs	r2, #0
 8007c16:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007c1a:	ee10 0a10 	vmov	r0, s0
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 fc8e 	bl	8000540 <__aeabi_dmul>
 8007c24:	ec41 0b10 	vmov	d0, r0, r1
 8007c28:	f000 fb76 	bl	8008318 <floor>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	ec51 0b10 	vmov	r0, r1, d0
 8007c32:	4b7e      	ldr	r3, [pc, #504]	; (8007e2c <__kernel_rem_pio2+0x32c>)
 8007c34:	f7f8 fc84 	bl	8000540 <__aeabi_dmul>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	4639      	mov	r1, r7
 8007c40:	f7f8 fac6 	bl	80001d0 <__aeabi_dsub>
 8007c44:	460f      	mov	r7, r1
 8007c46:	4606      	mov	r6, r0
 8007c48:	f7f8 ff2a 	bl	8000aa0 <__aeabi_d2iz>
 8007c4c:	9006      	str	r0, [sp, #24]
 8007c4e:	f7f8 fc0d 	bl	800046c <__aeabi_i2d>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	4630      	mov	r0, r6
 8007c58:	4639      	mov	r1, r7
 8007c5a:	f7f8 fab9 	bl	80001d0 <__aeabi_dsub>
 8007c5e:	f1ba 0f00 	cmp.w	sl, #0
 8007c62:	4606      	mov	r6, r0
 8007c64:	460f      	mov	r7, r1
 8007c66:	dd6c      	ble.n	8007d42 <__kernel_rem_pio2+0x242>
 8007c68:	1e62      	subs	r2, r4, #1
 8007c6a:	ab0e      	add	r3, sp, #56	; 0x38
 8007c6c:	f1ca 0118 	rsb	r1, sl, #24
 8007c70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007c74:	9d06      	ldr	r5, [sp, #24]
 8007c76:	fa40 f301 	asr.w	r3, r0, r1
 8007c7a:	441d      	add	r5, r3
 8007c7c:	408b      	lsls	r3, r1
 8007c7e:	1ac0      	subs	r0, r0, r3
 8007c80:	ab0e      	add	r3, sp, #56	; 0x38
 8007c82:	9506      	str	r5, [sp, #24]
 8007c84:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007c88:	f1ca 0317 	rsb	r3, sl, #23
 8007c8c:	fa40 f303 	asr.w	r3, r0, r3
 8007c90:	9302      	str	r3, [sp, #8]
 8007c92:	9b02      	ldr	r3, [sp, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dd62      	ble.n	8007d5e <__kernel_rem_pio2+0x25e>
 8007c98:	9b06      	ldr	r3, [sp, #24]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	9306      	str	r3, [sp, #24]
 8007ca0:	4615      	mov	r5, r2
 8007ca2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007ca6:	4294      	cmp	r4, r2
 8007ca8:	f300 8095 	bgt.w	8007dd6 <__kernel_rem_pio2+0x2d6>
 8007cac:	f1ba 0f00 	cmp.w	sl, #0
 8007cb0:	dd07      	ble.n	8007cc2 <__kernel_rem_pio2+0x1c2>
 8007cb2:	f1ba 0f01 	cmp.w	sl, #1
 8007cb6:	f000 80a2 	beq.w	8007dfe <__kernel_rem_pio2+0x2fe>
 8007cba:	f1ba 0f02 	cmp.w	sl, #2
 8007cbe:	f000 80c1 	beq.w	8007e44 <__kernel_rem_pio2+0x344>
 8007cc2:	9b02      	ldr	r3, [sp, #8]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d14a      	bne.n	8007d5e <__kernel_rem_pio2+0x25e>
 8007cc8:	4632      	mov	r2, r6
 8007cca:	463b      	mov	r3, r7
 8007ccc:	2000      	movs	r0, #0
 8007cce:	4958      	ldr	r1, [pc, #352]	; (8007e30 <__kernel_rem_pio2+0x330>)
 8007cd0:	f7f8 fa7e 	bl	80001d0 <__aeabi_dsub>
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	460f      	mov	r7, r1
 8007cd8:	2d00      	cmp	r5, #0
 8007cda:	d040      	beq.n	8007d5e <__kernel_rem_pio2+0x25e>
 8007cdc:	4650      	mov	r0, sl
 8007cde:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007e20 <__kernel_rem_pio2+0x320>
 8007ce2:	f000 fc2d 	bl	8008540 <scalbn>
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4639      	mov	r1, r7
 8007cea:	ec53 2b10 	vmov	r2, r3, d0
 8007cee:	f7f8 fa6f 	bl	80001d0 <__aeabi_dsub>
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	460f      	mov	r7, r1
 8007cf6:	e032      	b.n	8007d5e <__kernel_rem_pio2+0x25e>
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	4b4e      	ldr	r3, [pc, #312]	; (8007e34 <__kernel_rem_pio2+0x334>)
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	4649      	mov	r1, r9
 8007d00:	f7f8 fc1e 	bl	8000540 <__aeabi_dmul>
 8007d04:	f7f8 fecc 	bl	8000aa0 <__aeabi_d2iz>
 8007d08:	f7f8 fbb0 	bl	800046c <__aeabi_i2d>
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4b4a      	ldr	r3, [pc, #296]	; (8007e38 <__kernel_rem_pio2+0x338>)
 8007d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d14:	f7f8 fc14 	bl	8000540 <__aeabi_dmul>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	4649      	mov	r1, r9
 8007d20:	f7f8 fa56 	bl	80001d0 <__aeabi_dsub>
 8007d24:	f7f8 febc 	bl	8000aa0 <__aeabi_d2iz>
 8007d28:	ab0e      	add	r3, sp, #56	; 0x38
 8007d2a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007d2e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d36:	f7f8 fa4d 	bl	80001d4 <__adddf3>
 8007d3a:	3501      	adds	r5, #1
 8007d3c:	4680      	mov	r8, r0
 8007d3e:	4689      	mov	r9, r1
 8007d40:	e75e      	b.n	8007c00 <__kernel_rem_pio2+0x100>
 8007d42:	d105      	bne.n	8007d50 <__kernel_rem_pio2+0x250>
 8007d44:	1e63      	subs	r3, r4, #1
 8007d46:	aa0e      	add	r2, sp, #56	; 0x38
 8007d48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007d4c:	15c3      	asrs	r3, r0, #23
 8007d4e:	e79f      	b.n	8007c90 <__kernel_rem_pio2+0x190>
 8007d50:	2200      	movs	r2, #0
 8007d52:	4b3a      	ldr	r3, [pc, #232]	; (8007e3c <__kernel_rem_pio2+0x33c>)
 8007d54:	f7f8 fe7a 	bl	8000a4c <__aeabi_dcmpge>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d139      	bne.n	8007dd0 <__kernel_rem_pio2+0x2d0>
 8007d5c:	9002      	str	r0, [sp, #8]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2300      	movs	r3, #0
 8007d62:	4630      	mov	r0, r6
 8007d64:	4639      	mov	r1, r7
 8007d66:	f7f8 fe53 	bl	8000a10 <__aeabi_dcmpeq>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	f000 80c7 	beq.w	8007efe <__kernel_rem_pio2+0x3fe>
 8007d70:	1e65      	subs	r5, r4, #1
 8007d72:	462b      	mov	r3, r5
 8007d74:	2200      	movs	r2, #0
 8007d76:	9904      	ldr	r1, [sp, #16]
 8007d78:	428b      	cmp	r3, r1
 8007d7a:	da6a      	bge.n	8007e52 <__kernel_rem_pio2+0x352>
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	f000 8088 	beq.w	8007e92 <__kernel_rem_pio2+0x392>
 8007d82:	ab0e      	add	r3, sp, #56	; 0x38
 8007d84:	f1aa 0a18 	sub.w	sl, sl, #24
 8007d88:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 80b4 	beq.w	8007efa <__kernel_rem_pio2+0x3fa>
 8007d92:	4650      	mov	r0, sl
 8007d94:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007e20 <__kernel_rem_pio2+0x320>
 8007d98:	f000 fbd2 	bl	8008540 <scalbn>
 8007d9c:	00ec      	lsls	r4, r5, #3
 8007d9e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007da0:	191e      	adds	r6, r3, r4
 8007da2:	ec59 8b10 	vmov	r8, r9, d0
 8007da6:	f106 0a08 	add.w	sl, r6, #8
 8007daa:	462f      	mov	r7, r5
 8007dac:	2f00      	cmp	r7, #0
 8007dae:	f280 80df 	bge.w	8007f70 <__kernel_rem_pio2+0x470>
 8007db2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007e18 <__kernel_rem_pio2+0x318>
 8007db6:	f04f 0a00 	mov.w	sl, #0
 8007dba:	eba5 030a 	sub.w	r3, r5, sl
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f2c0 810a 	blt.w	8007fd8 <__kernel_rem_pio2+0x4d8>
 8007dc4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007e40 <__kernel_rem_pio2+0x340>
 8007dc8:	ec59 8b18 	vmov	r8, r9, d8
 8007dcc:	2700      	movs	r7, #0
 8007dce:	e0f5      	b.n	8007fbc <__kernel_rem_pio2+0x4bc>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	9302      	str	r3, [sp, #8]
 8007dd4:	e760      	b.n	8007c98 <__kernel_rem_pio2+0x198>
 8007dd6:	ab0e      	add	r3, sp, #56	; 0x38
 8007dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ddc:	b94d      	cbnz	r5, 8007df2 <__kernel_rem_pio2+0x2f2>
 8007dde:	b12b      	cbz	r3, 8007dec <__kernel_rem_pio2+0x2ec>
 8007de0:	a80e      	add	r0, sp, #56	; 0x38
 8007de2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007de6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007dea:	2301      	movs	r3, #1
 8007dec:	3201      	adds	r2, #1
 8007dee:	461d      	mov	r5, r3
 8007df0:	e759      	b.n	8007ca6 <__kernel_rem_pio2+0x1a6>
 8007df2:	a80e      	add	r0, sp, #56	; 0x38
 8007df4:	1acb      	subs	r3, r1, r3
 8007df6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007dfa:	462b      	mov	r3, r5
 8007dfc:	e7f6      	b.n	8007dec <__kernel_rem_pio2+0x2ec>
 8007dfe:	1e62      	subs	r2, r4, #1
 8007e00:	ab0e      	add	r3, sp, #56	; 0x38
 8007e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e06:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007e0a:	a90e      	add	r1, sp, #56	; 0x38
 8007e0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007e10:	e757      	b.n	8007cc2 <__kernel_rem_pio2+0x1c2>
 8007e12:	bf00      	nop
 8007e14:	f3af 8000 	nop.w
	...
 8007e24:	3ff00000 	.word	0x3ff00000
 8007e28:	08008888 	.word	0x08008888
 8007e2c:	40200000 	.word	0x40200000
 8007e30:	3ff00000 	.word	0x3ff00000
 8007e34:	3e700000 	.word	0x3e700000
 8007e38:	41700000 	.word	0x41700000
 8007e3c:	3fe00000 	.word	0x3fe00000
 8007e40:	08008848 	.word	0x08008848
 8007e44:	1e62      	subs	r2, r4, #1
 8007e46:	ab0e      	add	r3, sp, #56	; 0x38
 8007e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007e50:	e7db      	b.n	8007e0a <__kernel_rem_pio2+0x30a>
 8007e52:	a90e      	add	r1, sp, #56	; 0x38
 8007e54:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	e78b      	b.n	8007d76 <__kernel_rem_pio2+0x276>
 8007e5e:	3301      	adds	r3, #1
 8007e60:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007e64:	2900      	cmp	r1, #0
 8007e66:	d0fa      	beq.n	8007e5e <__kernel_rem_pio2+0x35e>
 8007e68:	9a08      	ldr	r2, [sp, #32]
 8007e6a:	4422      	add	r2, r4
 8007e6c:	00d2      	lsls	r2, r2, #3
 8007e6e:	a922      	add	r1, sp, #136	; 0x88
 8007e70:	18e3      	adds	r3, r4, r3
 8007e72:	9206      	str	r2, [sp, #24]
 8007e74:	440a      	add	r2, r1
 8007e76:	9302      	str	r3, [sp, #8]
 8007e78:	f10b 0108 	add.w	r1, fp, #8
 8007e7c:	f102 0308 	add.w	r3, r2, #8
 8007e80:	1c66      	adds	r6, r4, #1
 8007e82:	910a      	str	r1, [sp, #40]	; 0x28
 8007e84:	2500      	movs	r5, #0
 8007e86:	930d      	str	r3, [sp, #52]	; 0x34
 8007e88:	9b02      	ldr	r3, [sp, #8]
 8007e8a:	42b3      	cmp	r3, r6
 8007e8c:	da04      	bge.n	8007e98 <__kernel_rem_pio2+0x398>
 8007e8e:	461c      	mov	r4, r3
 8007e90:	e6a6      	b.n	8007be0 <__kernel_rem_pio2+0xe0>
 8007e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e94:	2301      	movs	r3, #1
 8007e96:	e7e3      	b.n	8007e60 <__kernel_rem_pio2+0x360>
 8007e98:	9b06      	ldr	r3, [sp, #24]
 8007e9a:	18ef      	adds	r7, r5, r3
 8007e9c:	ab22      	add	r3, sp, #136	; 0x88
 8007e9e:	441f      	add	r7, r3
 8007ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007ea6:	f7f8 fae1 	bl	800046c <__aeabi_i2d>
 8007eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eac:	461c      	mov	r4, r3
 8007eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eb0:	e9c7 0100 	strd	r0, r1, [r7]
 8007eb4:	eb03 0b05 	add.w	fp, r3, r5
 8007eb8:	2700      	movs	r7, #0
 8007eba:	f04f 0800 	mov.w	r8, #0
 8007ebe:	f04f 0900 	mov.w	r9, #0
 8007ec2:	9b07      	ldr	r3, [sp, #28]
 8007ec4:	429f      	cmp	r7, r3
 8007ec6:	dd08      	ble.n	8007eda <__kernel_rem_pio2+0x3da>
 8007ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eca:	aa72      	add	r2, sp, #456	; 0x1c8
 8007ecc:	18eb      	adds	r3, r5, r3
 8007ece:	4413      	add	r3, r2
 8007ed0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8007ed4:	3601      	adds	r6, #1
 8007ed6:	3508      	adds	r5, #8
 8007ed8:	e7d6      	b.n	8007e88 <__kernel_rem_pio2+0x388>
 8007eda:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007ede:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007ee2:	f7f8 fb2d 	bl	8000540 <__aeabi_dmul>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4640      	mov	r0, r8
 8007eec:	4649      	mov	r1, r9
 8007eee:	f7f8 f971 	bl	80001d4 <__adddf3>
 8007ef2:	3701      	adds	r7, #1
 8007ef4:	4680      	mov	r8, r0
 8007ef6:	4689      	mov	r9, r1
 8007ef8:	e7e3      	b.n	8007ec2 <__kernel_rem_pio2+0x3c2>
 8007efa:	3d01      	subs	r5, #1
 8007efc:	e741      	b.n	8007d82 <__kernel_rem_pio2+0x282>
 8007efe:	f1ca 0000 	rsb	r0, sl, #0
 8007f02:	ec47 6b10 	vmov	d0, r6, r7
 8007f06:	f000 fb1b 	bl	8008540 <scalbn>
 8007f0a:	ec57 6b10 	vmov	r6, r7, d0
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4b99      	ldr	r3, [pc, #612]	; (8008178 <__kernel_rem_pio2+0x678>)
 8007f12:	ee10 0a10 	vmov	r0, s0
 8007f16:	4639      	mov	r1, r7
 8007f18:	f7f8 fd98 	bl	8000a4c <__aeabi_dcmpge>
 8007f1c:	b1f8      	cbz	r0, 8007f5e <__kernel_rem_pio2+0x45e>
 8007f1e:	2200      	movs	r2, #0
 8007f20:	4b96      	ldr	r3, [pc, #600]	; (800817c <__kernel_rem_pio2+0x67c>)
 8007f22:	4630      	mov	r0, r6
 8007f24:	4639      	mov	r1, r7
 8007f26:	f7f8 fb0b 	bl	8000540 <__aeabi_dmul>
 8007f2a:	f7f8 fdb9 	bl	8000aa0 <__aeabi_d2iz>
 8007f2e:	4680      	mov	r8, r0
 8007f30:	f7f8 fa9c 	bl	800046c <__aeabi_i2d>
 8007f34:	2200      	movs	r2, #0
 8007f36:	4b90      	ldr	r3, [pc, #576]	; (8008178 <__kernel_rem_pio2+0x678>)
 8007f38:	f7f8 fb02 	bl	8000540 <__aeabi_dmul>
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4602      	mov	r2, r0
 8007f40:	4639      	mov	r1, r7
 8007f42:	4630      	mov	r0, r6
 8007f44:	f7f8 f944 	bl	80001d0 <__aeabi_dsub>
 8007f48:	f7f8 fdaa 	bl	8000aa0 <__aeabi_d2iz>
 8007f4c:	1c65      	adds	r5, r4, #1
 8007f4e:	ab0e      	add	r3, sp, #56	; 0x38
 8007f50:	f10a 0a18 	add.w	sl, sl, #24
 8007f54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007f58:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007f5c:	e719      	b.n	8007d92 <__kernel_rem_pio2+0x292>
 8007f5e:	4630      	mov	r0, r6
 8007f60:	4639      	mov	r1, r7
 8007f62:	f7f8 fd9d 	bl	8000aa0 <__aeabi_d2iz>
 8007f66:	ab0e      	add	r3, sp, #56	; 0x38
 8007f68:	4625      	mov	r5, r4
 8007f6a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007f6e:	e710      	b.n	8007d92 <__kernel_rem_pio2+0x292>
 8007f70:	ab0e      	add	r3, sp, #56	; 0x38
 8007f72:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007f76:	f7f8 fa79 	bl	800046c <__aeabi_i2d>
 8007f7a:	4642      	mov	r2, r8
 8007f7c:	464b      	mov	r3, r9
 8007f7e:	f7f8 fadf 	bl	8000540 <__aeabi_dmul>
 8007f82:	2200      	movs	r2, #0
 8007f84:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007f88:	4b7c      	ldr	r3, [pc, #496]	; (800817c <__kernel_rem_pio2+0x67c>)
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	f7f8 fad7 	bl	8000540 <__aeabi_dmul>
 8007f92:	3f01      	subs	r7, #1
 8007f94:	4680      	mov	r8, r0
 8007f96:	4689      	mov	r9, r1
 8007f98:	e708      	b.n	8007dac <__kernel_rem_pio2+0x2ac>
 8007f9a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8007fa6:	f7f8 facb 	bl	8000540 <__aeabi_dmul>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4640      	mov	r0, r8
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	f7f8 f90f 	bl	80001d4 <__adddf3>
 8007fb6:	3701      	adds	r7, #1
 8007fb8:	4680      	mov	r8, r0
 8007fba:	4689      	mov	r9, r1
 8007fbc:	9b04      	ldr	r3, [sp, #16]
 8007fbe:	429f      	cmp	r7, r3
 8007fc0:	dc01      	bgt.n	8007fc6 <__kernel_rem_pio2+0x4c6>
 8007fc2:	45ba      	cmp	sl, r7
 8007fc4:	dae9      	bge.n	8007f9a <__kernel_rem_pio2+0x49a>
 8007fc6:	ab4a      	add	r3, sp, #296	; 0x128
 8007fc8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fcc:	e9c3 8900 	strd	r8, r9, [r3]
 8007fd0:	f10a 0a01 	add.w	sl, sl, #1
 8007fd4:	3e08      	subs	r6, #8
 8007fd6:	e6f0      	b.n	8007dba <__kernel_rem_pio2+0x2ba>
 8007fd8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d85b      	bhi.n	8008096 <__kernel_rem_pio2+0x596>
 8007fde:	e8df f003 	tbb	[pc, r3]
 8007fe2:	264a      	.short	0x264a
 8007fe4:	0226      	.short	0x0226
 8007fe6:	ab9a      	add	r3, sp, #616	; 0x268
 8007fe8:	441c      	add	r4, r3
 8007fea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007fee:	46a2      	mov	sl, r4
 8007ff0:	46ab      	mov	fp, r5
 8007ff2:	f1bb 0f00 	cmp.w	fp, #0
 8007ff6:	dc6c      	bgt.n	80080d2 <__kernel_rem_pio2+0x5d2>
 8007ff8:	46a2      	mov	sl, r4
 8007ffa:	46ab      	mov	fp, r5
 8007ffc:	f1bb 0f01 	cmp.w	fp, #1
 8008000:	f300 8086 	bgt.w	8008110 <__kernel_rem_pio2+0x610>
 8008004:	2000      	movs	r0, #0
 8008006:	2100      	movs	r1, #0
 8008008:	2d01      	cmp	r5, #1
 800800a:	f300 80a0 	bgt.w	800814e <__kernel_rem_pio2+0x64e>
 800800e:	9b02      	ldr	r3, [sp, #8]
 8008010:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008014:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8008018:	2b00      	cmp	r3, #0
 800801a:	f040 809e 	bne.w	800815a <__kernel_rem_pio2+0x65a>
 800801e:	9b01      	ldr	r3, [sp, #4]
 8008020:	e9c3 7800 	strd	r7, r8, [r3]
 8008024:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008028:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800802c:	e033      	b.n	8008096 <__kernel_rem_pio2+0x596>
 800802e:	3408      	adds	r4, #8
 8008030:	ab4a      	add	r3, sp, #296	; 0x128
 8008032:	441c      	add	r4, r3
 8008034:	462e      	mov	r6, r5
 8008036:	2000      	movs	r0, #0
 8008038:	2100      	movs	r1, #0
 800803a:	2e00      	cmp	r6, #0
 800803c:	da3a      	bge.n	80080b4 <__kernel_rem_pio2+0x5b4>
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d03d      	beq.n	80080c0 <__kernel_rem_pio2+0x5c0>
 8008044:	4602      	mov	r2, r0
 8008046:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800804a:	9c01      	ldr	r4, [sp, #4]
 800804c:	e9c4 2300 	strd	r2, r3, [r4]
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008058:	f7f8 f8ba 	bl	80001d0 <__aeabi_dsub>
 800805c:	ae4c      	add	r6, sp, #304	; 0x130
 800805e:	2401      	movs	r4, #1
 8008060:	42a5      	cmp	r5, r4
 8008062:	da30      	bge.n	80080c6 <__kernel_rem_pio2+0x5c6>
 8008064:	9b02      	ldr	r3, [sp, #8]
 8008066:	b113      	cbz	r3, 800806e <__kernel_rem_pio2+0x56e>
 8008068:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800806c:	4619      	mov	r1, r3
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008074:	e00f      	b.n	8008096 <__kernel_rem_pio2+0x596>
 8008076:	ab9a      	add	r3, sp, #616	; 0x268
 8008078:	441c      	add	r4, r3
 800807a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800807e:	2000      	movs	r0, #0
 8008080:	2100      	movs	r1, #0
 8008082:	2d00      	cmp	r5, #0
 8008084:	da10      	bge.n	80080a8 <__kernel_rem_pio2+0x5a8>
 8008086:	9b02      	ldr	r3, [sp, #8]
 8008088:	b113      	cbz	r3, 8008090 <__kernel_rem_pio2+0x590>
 800808a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800808e:	4619      	mov	r1, r3
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	e9c3 0100 	strd	r0, r1, [r3]
 8008096:	9b06      	ldr	r3, [sp, #24]
 8008098:	f003 0007 	and.w	r0, r3, #7
 800809c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80080a0:	ecbd 8b02 	vpop	{d8}
 80080a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80080ac:	f7f8 f892 	bl	80001d4 <__adddf3>
 80080b0:	3d01      	subs	r5, #1
 80080b2:	e7e6      	b.n	8008082 <__kernel_rem_pio2+0x582>
 80080b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80080b8:	f7f8 f88c 	bl	80001d4 <__adddf3>
 80080bc:	3e01      	subs	r6, #1
 80080be:	e7bc      	b.n	800803a <__kernel_rem_pio2+0x53a>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	e7c1      	b.n	800804a <__kernel_rem_pio2+0x54a>
 80080c6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80080ca:	f7f8 f883 	bl	80001d4 <__adddf3>
 80080ce:	3401      	adds	r4, #1
 80080d0:	e7c6      	b.n	8008060 <__kernel_rem_pio2+0x560>
 80080d2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80080d6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80080da:	4640      	mov	r0, r8
 80080dc:	ec53 2b17 	vmov	r2, r3, d7
 80080e0:	4649      	mov	r1, r9
 80080e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80080e6:	f7f8 f875 	bl	80001d4 <__adddf3>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4606      	mov	r6, r0
 80080f0:	460f      	mov	r7, r1
 80080f2:	4640      	mov	r0, r8
 80080f4:	4649      	mov	r1, r9
 80080f6:	f7f8 f86b 	bl	80001d0 <__aeabi_dsub>
 80080fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080fe:	f7f8 f869 	bl	80001d4 <__adddf3>
 8008102:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008106:	e9ca 0100 	strd	r0, r1, [sl]
 800810a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800810e:	e770      	b.n	8007ff2 <__kernel_rem_pio2+0x4f2>
 8008110:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8008114:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008118:	4630      	mov	r0, r6
 800811a:	ec53 2b17 	vmov	r2, r3, d7
 800811e:	4639      	mov	r1, r7
 8008120:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008124:	f7f8 f856 	bl	80001d4 <__adddf3>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4680      	mov	r8, r0
 800812e:	4689      	mov	r9, r1
 8008130:	4630      	mov	r0, r6
 8008132:	4639      	mov	r1, r7
 8008134:	f7f8 f84c 	bl	80001d0 <__aeabi_dsub>
 8008138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800813c:	f7f8 f84a 	bl	80001d4 <__adddf3>
 8008140:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008144:	e9ca 0100 	strd	r0, r1, [sl]
 8008148:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800814c:	e756      	b.n	8007ffc <__kernel_rem_pio2+0x4fc>
 800814e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008152:	f7f8 f83f 	bl	80001d4 <__adddf3>
 8008156:	3d01      	subs	r5, #1
 8008158:	e756      	b.n	8008008 <__kernel_rem_pio2+0x508>
 800815a:	9b01      	ldr	r3, [sp, #4]
 800815c:	9a01      	ldr	r2, [sp, #4]
 800815e:	601f      	str	r7, [r3, #0]
 8008160:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008164:	605c      	str	r4, [r3, #4]
 8008166:	609d      	str	r5, [r3, #8]
 8008168:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800816c:	60d3      	str	r3, [r2, #12]
 800816e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008172:	6110      	str	r0, [r2, #16]
 8008174:	6153      	str	r3, [r2, #20]
 8008176:	e78e      	b.n	8008096 <__kernel_rem_pio2+0x596>
 8008178:	41700000 	.word	0x41700000
 800817c:	3e700000 	.word	0x3e700000

08008180 <__kernel_sin>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	ec55 4b10 	vmov	r4, r5, d0
 8008188:	b085      	sub	sp, #20
 800818a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800818e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008192:	ed8d 1b00 	vstr	d1, [sp]
 8008196:	9002      	str	r0, [sp, #8]
 8008198:	da06      	bge.n	80081a8 <__kernel_sin+0x28>
 800819a:	ee10 0a10 	vmov	r0, s0
 800819e:	4629      	mov	r1, r5
 80081a0:	f7f8 fc7e 	bl	8000aa0 <__aeabi_d2iz>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d051      	beq.n	800824c <__kernel_sin+0xcc>
 80081a8:	4622      	mov	r2, r4
 80081aa:	462b      	mov	r3, r5
 80081ac:	4620      	mov	r0, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	f7f8 f9c6 	bl	8000540 <__aeabi_dmul>
 80081b4:	4682      	mov	sl, r0
 80081b6:	468b      	mov	fp, r1
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4620      	mov	r0, r4
 80081be:	4629      	mov	r1, r5
 80081c0:	f7f8 f9be 	bl	8000540 <__aeabi_dmul>
 80081c4:	a341      	add	r3, pc, #260	; (adr r3, 80082cc <__kernel_sin+0x14c>)
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	4680      	mov	r8, r0
 80081cc:	4689      	mov	r9, r1
 80081ce:	4650      	mov	r0, sl
 80081d0:	4659      	mov	r1, fp
 80081d2:	f7f8 f9b5 	bl	8000540 <__aeabi_dmul>
 80081d6:	a33f      	add	r3, pc, #252	; (adr r3, 80082d4 <__kernel_sin+0x154>)
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	f7f7 fff8 	bl	80001d0 <__aeabi_dsub>
 80081e0:	4652      	mov	r2, sl
 80081e2:	465b      	mov	r3, fp
 80081e4:	f7f8 f9ac 	bl	8000540 <__aeabi_dmul>
 80081e8:	a33c      	add	r3, pc, #240	; (adr r3, 80082dc <__kernel_sin+0x15c>)
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	f7f7 fff1 	bl	80001d4 <__adddf3>
 80081f2:	4652      	mov	r2, sl
 80081f4:	465b      	mov	r3, fp
 80081f6:	f7f8 f9a3 	bl	8000540 <__aeabi_dmul>
 80081fa:	a33a      	add	r3, pc, #232	; (adr r3, 80082e4 <__kernel_sin+0x164>)
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	f7f7 ffe6 	bl	80001d0 <__aeabi_dsub>
 8008204:	4652      	mov	r2, sl
 8008206:	465b      	mov	r3, fp
 8008208:	f7f8 f99a 	bl	8000540 <__aeabi_dmul>
 800820c:	a337      	add	r3, pc, #220	; (adr r3, 80082ec <__kernel_sin+0x16c>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f7 ffdf 	bl	80001d4 <__adddf3>
 8008216:	9b02      	ldr	r3, [sp, #8]
 8008218:	4606      	mov	r6, r0
 800821a:	460f      	mov	r7, r1
 800821c:	b9db      	cbnz	r3, 8008256 <__kernel_sin+0xd6>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4650      	mov	r0, sl
 8008224:	4659      	mov	r1, fp
 8008226:	f7f8 f98b 	bl	8000540 <__aeabi_dmul>
 800822a:	a325      	add	r3, pc, #148	; (adr r3, 80082c0 <__kernel_sin+0x140>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f7 ffce 	bl	80001d0 <__aeabi_dsub>
 8008234:	4642      	mov	r2, r8
 8008236:	464b      	mov	r3, r9
 8008238:	f7f8 f982 	bl	8000540 <__aeabi_dmul>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4620      	mov	r0, r4
 8008242:	4629      	mov	r1, r5
 8008244:	f7f7 ffc6 	bl	80001d4 <__adddf3>
 8008248:	4604      	mov	r4, r0
 800824a:	460d      	mov	r5, r1
 800824c:	ec45 4b10 	vmov	d0, r4, r5
 8008250:	b005      	add	sp, #20
 8008252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008256:	2200      	movs	r2, #0
 8008258:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <__kernel_sin+0x148>)
 800825a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800825e:	f7f8 f96f 	bl	8000540 <__aeabi_dmul>
 8008262:	4632      	mov	r2, r6
 8008264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008268:	463b      	mov	r3, r7
 800826a:	4640      	mov	r0, r8
 800826c:	4649      	mov	r1, r9
 800826e:	f7f8 f967 	bl	8000540 <__aeabi_dmul>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800827a:	f7f7 ffa9 	bl	80001d0 <__aeabi_dsub>
 800827e:	4652      	mov	r2, sl
 8008280:	465b      	mov	r3, fp
 8008282:	f7f8 f95d 	bl	8000540 <__aeabi_dmul>
 8008286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800828a:	f7f7 ffa1 	bl	80001d0 <__aeabi_dsub>
 800828e:	a30c      	add	r3, pc, #48	; (adr r3, 80082c0 <__kernel_sin+0x140>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	4606      	mov	r6, r0
 8008296:	460f      	mov	r7, r1
 8008298:	4640      	mov	r0, r8
 800829a:	4649      	mov	r1, r9
 800829c:	f7f8 f950 	bl	8000540 <__aeabi_dmul>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4630      	mov	r0, r6
 80082a6:	4639      	mov	r1, r7
 80082a8:	f7f7 ff94 	bl	80001d4 <__adddf3>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4620      	mov	r0, r4
 80082b2:	4629      	mov	r1, r5
 80082b4:	f7f7 ff8c 	bl	80001d0 <__aeabi_dsub>
 80082b8:	e7c6      	b.n	8008248 <__kernel_sin+0xc8>
 80082ba:	bf00      	nop
 80082bc:	f3af 8000 	nop.w
 80082c0:	55555549 	.word	0x55555549
 80082c4:	3fc55555 	.word	0x3fc55555
 80082c8:	3fe00000 	.word	0x3fe00000
 80082cc:	5acfd57c 	.word	0x5acfd57c
 80082d0:	3de5d93a 	.word	0x3de5d93a
 80082d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80082d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80082dc:	57b1fe7d 	.word	0x57b1fe7d
 80082e0:	3ec71de3 	.word	0x3ec71de3
 80082e4:	19c161d5 	.word	0x19c161d5
 80082e8:	3f2a01a0 	.word	0x3f2a01a0
 80082ec:	1110f8a6 	.word	0x1110f8a6
 80082f0:	3f811111 	.word	0x3f811111

080082f4 <fabs>:
 80082f4:	ec51 0b10 	vmov	r0, r1, d0
 80082f8:	ee10 2a10 	vmov	r2, s0
 80082fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008300:	ec43 2b10 	vmov	d0, r2, r3
 8008304:	4770      	bx	lr

08008306 <finite>:
 8008306:	ee10 3a90 	vmov	r3, s1
 800830a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800830e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008312:	0fc0      	lsrs	r0, r0, #31
 8008314:	4770      	bx	lr
	...

08008318 <floor>:
 8008318:	ec51 0b10 	vmov	r0, r1, d0
 800831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008320:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008324:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008328:	2e13      	cmp	r6, #19
 800832a:	460c      	mov	r4, r1
 800832c:	ee10 5a10 	vmov	r5, s0
 8008330:	4680      	mov	r8, r0
 8008332:	dc34      	bgt.n	800839e <floor+0x86>
 8008334:	2e00      	cmp	r6, #0
 8008336:	da16      	bge.n	8008366 <floor+0x4e>
 8008338:	a335      	add	r3, pc, #212	; (adr r3, 8008410 <floor+0xf8>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f7f7 ff49 	bl	80001d4 <__adddf3>
 8008342:	2200      	movs	r2, #0
 8008344:	2300      	movs	r3, #0
 8008346:	f7f8 fb8b 	bl	8000a60 <__aeabi_dcmpgt>
 800834a:	b148      	cbz	r0, 8008360 <floor+0x48>
 800834c:	2c00      	cmp	r4, #0
 800834e:	da59      	bge.n	8008404 <floor+0xec>
 8008350:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008354:	4a30      	ldr	r2, [pc, #192]	; (8008418 <floor+0x100>)
 8008356:	432b      	orrs	r3, r5
 8008358:	2500      	movs	r5, #0
 800835a:	42ab      	cmp	r3, r5
 800835c:	bf18      	it	ne
 800835e:	4614      	movne	r4, r2
 8008360:	4621      	mov	r1, r4
 8008362:	4628      	mov	r0, r5
 8008364:	e025      	b.n	80083b2 <floor+0x9a>
 8008366:	4f2d      	ldr	r7, [pc, #180]	; (800841c <floor+0x104>)
 8008368:	4137      	asrs	r7, r6
 800836a:	ea01 0307 	and.w	r3, r1, r7
 800836e:	4303      	orrs	r3, r0
 8008370:	d01f      	beq.n	80083b2 <floor+0x9a>
 8008372:	a327      	add	r3, pc, #156	; (adr r3, 8008410 <floor+0xf8>)
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	f7f7 ff2c 	bl	80001d4 <__adddf3>
 800837c:	2200      	movs	r2, #0
 800837e:	2300      	movs	r3, #0
 8008380:	f7f8 fb6e 	bl	8000a60 <__aeabi_dcmpgt>
 8008384:	2800      	cmp	r0, #0
 8008386:	d0eb      	beq.n	8008360 <floor+0x48>
 8008388:	2c00      	cmp	r4, #0
 800838a:	bfbe      	ittt	lt
 800838c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008390:	fa43 f606 	asrlt.w	r6, r3, r6
 8008394:	19a4      	addlt	r4, r4, r6
 8008396:	ea24 0407 	bic.w	r4, r4, r7
 800839a:	2500      	movs	r5, #0
 800839c:	e7e0      	b.n	8008360 <floor+0x48>
 800839e:	2e33      	cmp	r6, #51	; 0x33
 80083a0:	dd0b      	ble.n	80083ba <floor+0xa2>
 80083a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80083a6:	d104      	bne.n	80083b2 <floor+0x9a>
 80083a8:	ee10 2a10 	vmov	r2, s0
 80083ac:	460b      	mov	r3, r1
 80083ae:	f7f7 ff11 	bl	80001d4 <__adddf3>
 80083b2:	ec41 0b10 	vmov	d0, r0, r1
 80083b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80083be:	f04f 33ff 	mov.w	r3, #4294967295
 80083c2:	fa23 f707 	lsr.w	r7, r3, r7
 80083c6:	4207      	tst	r7, r0
 80083c8:	d0f3      	beq.n	80083b2 <floor+0x9a>
 80083ca:	a311      	add	r3, pc, #68	; (adr r3, 8008410 <floor+0xf8>)
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f7f7 ff00 	bl	80001d4 <__adddf3>
 80083d4:	2200      	movs	r2, #0
 80083d6:	2300      	movs	r3, #0
 80083d8:	f7f8 fb42 	bl	8000a60 <__aeabi_dcmpgt>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d0bf      	beq.n	8008360 <floor+0x48>
 80083e0:	2c00      	cmp	r4, #0
 80083e2:	da02      	bge.n	80083ea <floor+0xd2>
 80083e4:	2e14      	cmp	r6, #20
 80083e6:	d103      	bne.n	80083f0 <floor+0xd8>
 80083e8:	3401      	adds	r4, #1
 80083ea:	ea25 0507 	bic.w	r5, r5, r7
 80083ee:	e7b7      	b.n	8008360 <floor+0x48>
 80083f0:	2301      	movs	r3, #1
 80083f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80083f6:	fa03 f606 	lsl.w	r6, r3, r6
 80083fa:	4435      	add	r5, r6
 80083fc:	4545      	cmp	r5, r8
 80083fe:	bf38      	it	cc
 8008400:	18e4      	addcc	r4, r4, r3
 8008402:	e7f2      	b.n	80083ea <floor+0xd2>
 8008404:	2500      	movs	r5, #0
 8008406:	462c      	mov	r4, r5
 8008408:	e7aa      	b.n	8008360 <floor+0x48>
 800840a:	bf00      	nop
 800840c:	f3af 8000 	nop.w
 8008410:	8800759c 	.word	0x8800759c
 8008414:	7e37e43c 	.word	0x7e37e43c
 8008418:	bff00000 	.word	0xbff00000
 800841c:	000fffff 	.word	0x000fffff

08008420 <matherr>:
 8008420:	2000      	movs	r0, #0
 8008422:	4770      	bx	lr
 8008424:	0000      	movs	r0, r0
	...

08008428 <nan>:
 8008428:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008430 <nan+0x8>
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	00000000 	.word	0x00000000
 8008434:	7ff80000 	.word	0x7ff80000

08008438 <rint>:
 8008438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800843a:	ec51 0b10 	vmov	r0, r1, d0
 800843e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008442:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008446:	2e13      	cmp	r6, #19
 8008448:	460b      	mov	r3, r1
 800844a:	ee10 4a10 	vmov	r4, s0
 800844e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008452:	dc56      	bgt.n	8008502 <rint+0xca>
 8008454:	2e00      	cmp	r6, #0
 8008456:	da2b      	bge.n	80084b0 <rint+0x78>
 8008458:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800845c:	4302      	orrs	r2, r0
 800845e:	d023      	beq.n	80084a8 <rint+0x70>
 8008460:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008464:	4302      	orrs	r2, r0
 8008466:	4254      	negs	r4, r2
 8008468:	4314      	orrs	r4, r2
 800846a:	0c4b      	lsrs	r3, r1, #17
 800846c:	0b24      	lsrs	r4, r4, #12
 800846e:	045b      	lsls	r3, r3, #17
 8008470:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008474:	ea44 0103 	orr.w	r1, r4, r3
 8008478:	460b      	mov	r3, r1
 800847a:	492f      	ldr	r1, [pc, #188]	; (8008538 <rint+0x100>)
 800847c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008480:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008484:	4602      	mov	r2, r0
 8008486:	4639      	mov	r1, r7
 8008488:	4630      	mov	r0, r6
 800848a:	f7f7 fea3 	bl	80001d4 <__adddf3>
 800848e:	e9cd 0100 	strd	r0, r1, [sp]
 8008492:	463b      	mov	r3, r7
 8008494:	4632      	mov	r2, r6
 8008496:	e9dd 0100 	ldrd	r0, r1, [sp]
 800849a:	f7f7 fe99 	bl	80001d0 <__aeabi_dsub>
 800849e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80084a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80084a6:	4639      	mov	r1, r7
 80084a8:	ec41 0b10 	vmov	d0, r0, r1
 80084ac:	b003      	add	sp, #12
 80084ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b0:	4a22      	ldr	r2, [pc, #136]	; (800853c <rint+0x104>)
 80084b2:	4132      	asrs	r2, r6
 80084b4:	ea01 0702 	and.w	r7, r1, r2
 80084b8:	4307      	orrs	r7, r0
 80084ba:	d0f5      	beq.n	80084a8 <rint+0x70>
 80084bc:	0852      	lsrs	r2, r2, #1
 80084be:	4011      	ands	r1, r2
 80084c0:	430c      	orrs	r4, r1
 80084c2:	d00b      	beq.n	80084dc <rint+0xa4>
 80084c4:	ea23 0202 	bic.w	r2, r3, r2
 80084c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80084cc:	2e13      	cmp	r6, #19
 80084ce:	fa43 f306 	asr.w	r3, r3, r6
 80084d2:	bf0c      	ite	eq
 80084d4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80084d8:	2400      	movne	r4, #0
 80084da:	4313      	orrs	r3, r2
 80084dc:	4916      	ldr	r1, [pc, #88]	; (8008538 <rint+0x100>)
 80084de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80084e2:	4622      	mov	r2, r4
 80084e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084e8:	4620      	mov	r0, r4
 80084ea:	4629      	mov	r1, r5
 80084ec:	f7f7 fe72 	bl	80001d4 <__adddf3>
 80084f0:	e9cd 0100 	strd	r0, r1, [sp]
 80084f4:	4622      	mov	r2, r4
 80084f6:	462b      	mov	r3, r5
 80084f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084fc:	f7f7 fe68 	bl	80001d0 <__aeabi_dsub>
 8008500:	e7d2      	b.n	80084a8 <rint+0x70>
 8008502:	2e33      	cmp	r6, #51	; 0x33
 8008504:	dd07      	ble.n	8008516 <rint+0xde>
 8008506:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800850a:	d1cd      	bne.n	80084a8 <rint+0x70>
 800850c:	ee10 2a10 	vmov	r2, s0
 8008510:	f7f7 fe60 	bl	80001d4 <__adddf3>
 8008514:	e7c8      	b.n	80084a8 <rint+0x70>
 8008516:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800851a:	f04f 32ff 	mov.w	r2, #4294967295
 800851e:	40f2      	lsrs	r2, r6
 8008520:	4210      	tst	r0, r2
 8008522:	d0c1      	beq.n	80084a8 <rint+0x70>
 8008524:	0852      	lsrs	r2, r2, #1
 8008526:	4210      	tst	r0, r2
 8008528:	bf1f      	itttt	ne
 800852a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800852e:	ea20 0202 	bicne.w	r2, r0, r2
 8008532:	4134      	asrne	r4, r6
 8008534:	4314      	orrne	r4, r2
 8008536:	e7d1      	b.n	80084dc <rint+0xa4>
 8008538:	08008898 	.word	0x08008898
 800853c:	000fffff 	.word	0x000fffff

08008540 <scalbn>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	ec55 4b10 	vmov	r4, r5, d0
 8008546:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800854a:	4606      	mov	r6, r0
 800854c:	462b      	mov	r3, r5
 800854e:	b9aa      	cbnz	r2, 800857c <scalbn+0x3c>
 8008550:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008554:	4323      	orrs	r3, r4
 8008556:	d03b      	beq.n	80085d0 <scalbn+0x90>
 8008558:	4b31      	ldr	r3, [pc, #196]	; (8008620 <scalbn+0xe0>)
 800855a:	4629      	mov	r1, r5
 800855c:	2200      	movs	r2, #0
 800855e:	ee10 0a10 	vmov	r0, s0
 8008562:	f7f7 ffed 	bl	8000540 <__aeabi_dmul>
 8008566:	4b2f      	ldr	r3, [pc, #188]	; (8008624 <scalbn+0xe4>)
 8008568:	429e      	cmp	r6, r3
 800856a:	4604      	mov	r4, r0
 800856c:	460d      	mov	r5, r1
 800856e:	da12      	bge.n	8008596 <scalbn+0x56>
 8008570:	a327      	add	r3, pc, #156	; (adr r3, 8008610 <scalbn+0xd0>)
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	f7f7 ffe3 	bl	8000540 <__aeabi_dmul>
 800857a:	e009      	b.n	8008590 <scalbn+0x50>
 800857c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008580:	428a      	cmp	r2, r1
 8008582:	d10c      	bne.n	800859e <scalbn+0x5e>
 8008584:	ee10 2a10 	vmov	r2, s0
 8008588:	4620      	mov	r0, r4
 800858a:	4629      	mov	r1, r5
 800858c:	f7f7 fe22 	bl	80001d4 <__adddf3>
 8008590:	4604      	mov	r4, r0
 8008592:	460d      	mov	r5, r1
 8008594:	e01c      	b.n	80085d0 <scalbn+0x90>
 8008596:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800859a:	460b      	mov	r3, r1
 800859c:	3a36      	subs	r2, #54	; 0x36
 800859e:	4432      	add	r2, r6
 80085a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80085a4:	428a      	cmp	r2, r1
 80085a6:	dd0b      	ble.n	80085c0 <scalbn+0x80>
 80085a8:	ec45 4b11 	vmov	d1, r4, r5
 80085ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008618 <scalbn+0xd8>
 80085b0:	f000 f83c 	bl	800862c <copysign>
 80085b4:	a318      	add	r3, pc, #96	; (adr r3, 8008618 <scalbn+0xd8>)
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	ec51 0b10 	vmov	r0, r1, d0
 80085be:	e7da      	b.n	8008576 <scalbn+0x36>
 80085c0:	2a00      	cmp	r2, #0
 80085c2:	dd08      	ble.n	80085d6 <scalbn+0x96>
 80085c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80085c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80085cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80085d0:	ec45 4b10 	vmov	d0, r4, r5
 80085d4:	bd70      	pop	{r4, r5, r6, pc}
 80085d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80085da:	da0d      	bge.n	80085f8 <scalbn+0xb8>
 80085dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80085e0:	429e      	cmp	r6, r3
 80085e2:	ec45 4b11 	vmov	d1, r4, r5
 80085e6:	dce1      	bgt.n	80085ac <scalbn+0x6c>
 80085e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008610 <scalbn+0xd0>
 80085ec:	f000 f81e 	bl	800862c <copysign>
 80085f0:	a307      	add	r3, pc, #28	; (adr r3, 8008610 <scalbn+0xd0>)
 80085f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f6:	e7e0      	b.n	80085ba <scalbn+0x7a>
 80085f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80085fc:	3236      	adds	r2, #54	; 0x36
 80085fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008602:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008606:	4620      	mov	r0, r4
 8008608:	4629      	mov	r1, r5
 800860a:	2200      	movs	r2, #0
 800860c:	4b06      	ldr	r3, [pc, #24]	; (8008628 <scalbn+0xe8>)
 800860e:	e7b2      	b.n	8008576 <scalbn+0x36>
 8008610:	c2f8f359 	.word	0xc2f8f359
 8008614:	01a56e1f 	.word	0x01a56e1f
 8008618:	8800759c 	.word	0x8800759c
 800861c:	7e37e43c 	.word	0x7e37e43c
 8008620:	43500000 	.word	0x43500000
 8008624:	ffff3cb0 	.word	0xffff3cb0
 8008628:	3c900000 	.word	0x3c900000

0800862c <copysign>:
 800862c:	ec51 0b10 	vmov	r0, r1, d0
 8008630:	ee11 0a90 	vmov	r0, s3
 8008634:	ee10 2a10 	vmov	r2, s0
 8008638:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800863c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008640:	ea41 0300 	orr.w	r3, r1, r0
 8008644:	ec43 2b10 	vmov	d0, r2, r3
 8008648:	4770      	bx	lr
	...

0800864c <_init>:
 800864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864e:	bf00      	nop
 8008650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008652:	bc08      	pop	{r3}
 8008654:	469e      	mov	lr, r3
 8008656:	4770      	bx	lr

08008658 <_fini>:
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	bf00      	nop
 800865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865e:	bc08      	pop	{r3}
 8008660:	469e      	mov	lr, r3
 8008662:	4770      	bx	lr
