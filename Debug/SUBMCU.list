
SUBMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bbc  08005bbc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc4  08005bc4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc4  08005bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000014  08005be0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08005be0  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139b0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f3c  00000000  00000000  000339f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  00036930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d90  00000000  00000000  00037858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ee7  00000000  00000000  000385e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f305  00000000  00000000  0005a4cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5e23  00000000  00000000  000697d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f5f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c40  00000000  00000000  0012f674  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b8c 	.word	0x08005b8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005b8c 	.word	0x08005b8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <GAS_Can_txSetting>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan);
//void GAS_Can_recieveMessage(CAN_HandleTypeDef *hcan);

void GAS_Can_txSetting(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	/*
	 * CAN tx set function
	 * set ID, IDE, DLC
	 */
	canTxHeader.ExtId = STM32_ID;
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <GAS_Can_txSetting+0x28>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <GAS_Can_txSetting+0x2c>)
 80004d2:	6053      	str	r3, [r2, #4]
	canTxHeader.IDE	= CAN_ID_EXT;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <GAS_Can_txSetting+0x2c>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	609a      	str	r2, [r3, #8]
	canTxHeader.RTR	= CAN_RTR_DATA;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <GAS_Can_txSetting+0x2c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]
	canTxHeader.DLC	=	8;
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <GAS_Can_txSetting+0x2c>)
 80004e2:	2208      	movs	r2, #8
 80004e4:	611a      	str	r2, [r3, #16]


}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	20000000 	.word	0x20000000
 80004f4:	2000005c 	.word	0x2000005c

080004f8 <GAS_Can_rxSetting>:

void GAS_Can_rxSetting(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	 * CAN rx set function
	 * IdHigh, IdLow for each 16bit in 29bit ID
	 * Set different FIFO and FilterBank
	 *
	 */
	sFilterConfig.FilterIdHigh = (STM32_ID2<<3)>>16;				/*first 2byte in 29bit (shift need to IED,RTR,0)*/
 80004fc:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <GAS_Can_rxSetting+0xbc>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	0c1b      	lsrs	r3, r3, #16
 8000504:	4a2c      	ldr	r2, [pc, #176]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000506:	6013      	str	r3, [r2, #0]
	sFilterConfig.FilterIdLow = (0xffff & (STM32_ID2 << 3)) | (1<<2);	/*second 2byte in 29bit + IDE (shift need to IED,RTR,0/)*/
 8000508:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <GAS_Can_rxSetting+0xbc>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	00db      	lsls	r3, r3, #3
 800050e:	b29b      	uxth	r3, r3
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	4a28      	ldr	r2, [pc, #160]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000516:	6053      	str	r3, [r2, #4]
	sFilterConfig.FilterMaskIdHigh = (0x0fffffff<<3)>>16;
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 800051a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800051e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow =(0xffff & (0x0FFFFFFF << 3)) | (1<<2);
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000522:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8000526:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000528:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank = 0;
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000530:	2200      	movs	r2, #0
 8000532:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800053a:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 800053c:	2201      	movs	r2, #1
 800053e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000540:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000542:	2201      	movs	r2, #1
 8000544:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000548:	220e      	movs	r2, #14
 800054a:	625a      	str	r2, [r3, #36]	; 0x24

	 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 800054c:	491a      	ldr	r1, [pc, #104]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 800054e:	481b      	ldr	r0, [pc, #108]	; (80005bc <GAS_Can_rxSetting+0xc4>)
 8000550:	f002 f850 	bl	80025f4 <HAL_CAN_ConfigFilter>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <GAS_Can_rxSetting+0x66>
	  {
	    /* Filter configuration Error */
	    Error_Handler();
 800055a:	f000 ff8b 	bl	8001474 <Error_Handler>
	  }

	 sFilterConfig2.FilterIdHigh = 0x0000;
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
	 sFilterConfig2.FilterIdLow = (0xffff & (0x0237 << 3)) | (1<<2);
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000566:	f241 12bc 	movw	r2, #4540	; 0x11bc
 800056a:	605a      	str	r2, [r3, #4]
	 sFilterConfig2.FilterMaskIdHigh = 0x0000;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
 	 sFilterConfig2.FilterMaskIdLow = (0xffff & (0x0237 << 3)) | (1<<2);
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000574:	f241 12bc 	movw	r2, #4540	; 0x11bc
 8000578:	60da      	str	r2, [r3, #12]
	 sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO1;
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 800057c:	2201      	movs	r2, #1
 800057e:	611a      	str	r2, [r3, #16]
	 sFilterConfig2.FilterBank = 1;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000582:	2201      	movs	r2, #1
 8000584:	615a      	str	r2, [r3, #20]
	 sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
	 sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 800058e:	2201      	movs	r2, #1
 8000590:	61da      	str	r2, [r3, #28]
	 sFilterConfig2.FilterActivation = ENABLE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000594:	2201      	movs	r2, #1
 8000596:	621a      	str	r2, [r3, #32]
	 sFilterConfig2.SlaveStartFilterBank = 15;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 800059a:	220f      	movs	r2, #15
 800059c:	625a      	str	r2, [r3, #36]	; 0x24

	 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 800059e:	4908      	ldr	r1, [pc, #32]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <GAS_Can_rxSetting+0xc4>)
 80005a2:	f002 f827 	bl	80025f4 <HAL_CAN_ConfigFilter>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <GAS_Can_rxSetting+0xb8>
	 {
	     /* Filter configuration Error */
	     Error_Handler();
 80005ac:	f000 ff62 	bl	8001474 <Error_Handler>
	 }
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000004 	.word	0x20000004
 80005b8:	20000034 	.word	0x20000034
 80005bc:	20000278 	.word	0x20000278
 80005c0:	200000b4 	.word	0x200000b4

080005c4 <GAS_Can_init>:

void GAS_Can_init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	/*
	 * GAS_CAN_init
	 * ActiveNotification for Rx message pending
	 */
	GAS_Can_txSetting();
 80005c8:	f7ff ff7e 	bl	80004c8 <GAS_Can_txSetting>
	GAS_Can_rxSetting();
 80005cc:	f7ff ff94 	bl	80004f8 <GAS_Can_rxSetting>
	HAL_CAN_Start(&hcan2);
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <GAS_Can_init+0x3c>)
 80005d2:	f002 f8ef 	bl	80027b4 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005d6:	2102      	movs	r1, #2
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <GAS_Can_init+0x3c>)
 80005da:	f002 fb51 	bl	8002c80 <HAL_CAN_ActivateNotification>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <GAS_Can_init+0x24>
	{
	  Error_Handler();
 80005e4:	f000 ff46 	bl	8001474 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80005e8:	2110      	movs	r1, #16
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <GAS_Can_init+0x3c>)
 80005ec:	f002 fb48 	bl	8002c80 <HAL_CAN_ActivateNotification>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <GAS_Can_init+0x36>
	{
	  Error_Handler();
 80005f6:	f000 ff3d 	bl	8001474 <Error_Handler>
	}


}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000278 	.word	0x20000278

08000604 <GAS_Can_sendMessage>:

void GAS_Can_sendMessage(uint16_t Encoder1, uint16_t Encoder2)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	460a      	mov	r2, r1
 800060e:	80fb      	strh	r3, [r7, #6]
 8000610:	4613      	mov	r3, r2
 8000612:	80bb      	strh	r3, [r7, #4]
	/*
	 * CAN send message function
	 * send Message data with sendData[8]
	 */
//	memmove(sendData, stm32_1.TxData, sizeof(uint8_t) * 8);
	stm32_1.B.sensor0 = Encoder1;
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <GAS_Can_sendMessage+0x88>)
 800061e:	b2d1      	uxtb	r1, r2
 8000620:	2000      	movs	r0, #0
 8000622:	4301      	orrs	r1, r0
 8000624:	7019      	strb	r1, [r3, #0]
 8000626:	0a12      	lsrs	r2, r2, #8
 8000628:	b292      	uxth	r2, r2
 800062a:	f002 020f 	and.w	r2, r2, #15
 800062e:	f002 000f 	and.w	r0, r2, #15
 8000632:	785a      	ldrb	r2, [r3, #1]
 8000634:	f022 020f 	bic.w	r2, r2, #15
 8000638:	4611      	mov	r1, r2
 800063a:	4602      	mov	r2, r0
 800063c:	430a      	orrs	r2, r1
 800063e:	705a      	strb	r2, [r3, #1]
	stm32_1.B.sensor1 = Encoder2;
 8000640:	88bb      	ldrh	r3, [r7, #4]
 8000642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <GAS_Can_sendMessage+0x88>)
 800064a:	f002 010f 	and.w	r1, r2, #15
 800064e:	010c      	lsls	r4, r1, #4
 8000650:	7859      	ldrb	r1, [r3, #1]
 8000652:	f001 010f 	and.w	r1, r1, #15
 8000656:	4608      	mov	r0, r1
 8000658:	4621      	mov	r1, r4
 800065a:	4301      	orrs	r1, r0
 800065c:	7059      	strb	r1, [r3, #1]
 800065e:	0912      	lsrs	r2, r2, #4
 8000660:	b292      	uxth	r2, r2
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	2100      	movs	r1, #0
 8000666:	430a      	orrs	r2, r1
 8000668:	709a      	strb	r2, [r3, #2]
	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 800066a:	4809      	ldr	r0, [pc, #36]	; (8000690 <GAS_Can_sendMessage+0x8c>)
 800066c:	f002 f9c1 	bl	80029f2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000670:	4602      	mov	r2, r0
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <GAS_Can_sendMessage+0x90>)
 8000674:	601a      	str	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, &stm32_1.TxData[0], &TxMailBox);
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <GAS_Can_sendMessage+0x90>)
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <GAS_Can_sendMessage+0x88>)
 800067a:	4907      	ldr	r1, [pc, #28]	; (8000698 <GAS_Can_sendMessage+0x94>)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <GAS_Can_sendMessage+0x8c>)
 800067e:	f002 f8dd 	bl	800283c <HAL_CAN_AddTxMessage>
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bd90      	pop	{r4, r7, pc}
 800068a:	bf00      	nop
 800068c:	20000074 	.word	0x20000074
 8000690:	20000278 	.word	0x20000278
 8000694:	20000084 	.word	0x20000084
 8000698:	2000005c 	.word	0x2000005c

0800069c <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	/*
	 * CAN recieve data interrupt function
	 * Check Instance then recieve data in stm32_2.RxData
	 */
	if(hcan->Instance == CAN2)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d105      	bne.n	80006ba <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, stm32_2.RxData);
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f002 f9d1 	bl	8002a5c <HAL_CAN_GetRxMessage>

	}
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40006800 	.word	0x40006800
 80006c8:	200000ac 	.word	0x200000ac
 80006cc:	20000090 	.word	0x20000090

080006d0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	/*
	* CAN recieve data interrupt function
	* Check Instance then recieve data in stm32_2.RxData
	*/
	if(hcan->Instance == CAN2)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d105      	bne.n	80006ee <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &canRxHeader, TC237.RxData);
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 80006e6:	2101      	movs	r1, #1
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f002 f9b7 	bl	8002a5c <HAL_CAN_GetRxMessage>

	}
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40006800 	.word	0x40006800
 80006fc:	2000007c 	.word	0x2000007c
 8000700:	20000090 	.word	0x20000090

08000704 <GAS_PWM_inputInit>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);
void GAS_PWM_changeOutput_ch1(uint16_t input);
void GAS_PWM_Check(TIM_HandleTypeDef *htim, pwmIn_t *pwmIn);

void GAS_PWM_inputInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 8000708:	2100      	movs	r1, #0
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <GAS_PWM_inputInit+0x28>)
 800070c:	f004 f88a 	bl	8004824 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8000710:	2104      	movs	r1, #4
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <GAS_PWM_inputInit+0x28>)
 8000714:	f004 f886 	bl	8004824 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000718:	2100      	movs	r1, #0
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <GAS_PWM_inputInit+0x2c>)
 800071c:	f004 f882 	bl	8004824 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000720:	2104      	movs	r1, #4
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <GAS_PWM_inputInit+0x2c>)
 8000724:	f004 f87e 	bl	8004824 <HAL_TIM_IC_Start_IT>
//	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
//	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200002bc 	.word	0x200002bc
 8000730:	2000037c 	.word	0x2000037c

08000734 <GAS_PWM_outputInit>:

void GAS_PWM_outputInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000738:	2100      	movs	r1, #0
 800073a:	4802      	ldr	r0, [pc, #8]	; (8000744 <GAS_PWM_outputInit+0x10>)
 800073c:	f003 fffe 	bl	800473c <HAL_TIM_PWM_Start>

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200002fc 	.word	0x200002fc

08000748 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	 * For PWM input function
	 * One PWM input per one htim channel(because of TIM counter)
	 * Period, width, duty cycle, frequency can be calculated.
	 */

	if(htim ->Instance == TIM8)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d106      	bne.n	8000768 <HAL_TIM_IC_CaptureCallback+0x20>
	{
		GAS_PWM_Check(htim, &pwmIn1);
 800075a:	490c      	ldr	r1, [pc, #48]	; (800078c <HAL_TIM_IC_CaptureCallback+0x44>)
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f835 	bl	80007cc <GAS_PWM_Check>
		pwmChangeFlag = 1;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
	}
	if(htim ->Instance == TIM1){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a09      	ldr	r2, [pc, #36]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x4c>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d106      	bne.n	8000780 <HAL_TIM_IC_CaptureCallback+0x38>
		GAS_PWM_Check(htim, &pwmIn2);
 8000772:	4909      	ldr	r1, [pc, #36]	; (8000798 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 f829 	bl	80007cc <GAS_PWM_Check>
		pwmChangeFlag = 1;
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x48>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
	}
//	if(htim ->Instance == TIM4){
//		GAS_PWM_Check2(htim, &pwmIn3);
//		pwmChangeFlag = 1;
//	}
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40010400 	.word	0x40010400
 800078c:	200000dc 	.word	0x200000dc
 8000790:	20000030 	.word	0x20000030
 8000794:	40010000 	.word	0x40010000
 8000798:	20000114 	.word	0x20000114

0800079c <GAS_PWM_changeOutput_ch1>:

void GAS_PWM_changeOutput_ch1(uint16_t input)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	/*
	 * PWM change duty cycle function
	 * Change duty cycle by changing register CCR directly
	 */
	TIM4->CCR1=input/10;
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <GAS_PWM_changeOutput_ch1+0x28>)
 80007aa:	fba2 2303 	umull	r2, r3, r2, r3
 80007ae:	08db      	lsrs	r3, r3, #3
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <GAS_PWM_changeOutput_ch1+0x2c>)
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	cccccccd 	.word	0xcccccccd
 80007c8:	40000800 	.word	0x40000800

080007cc <GAS_PWM_Check>:

void GAS_PWM_Check(TIM_HandleTypeDef *htim, pwmIn_t *pwmIn){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]

			if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	7f1b      	ldrb	r3, [r3, #28]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d10e      	bne.n	80007fc <GAS_PWM_Check+0x30>
			{
				pwmIn->RisingEdgeValue = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 80007de:	2100      	movs	r1, #0
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f004 fbeb 	bl	8004fbc <HAL_TIM_ReadCapturedValue>
 80007e6:	4602      	mov	r2, r0
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	601a      	str	r2, [r3, #0]
				TIM1->CNT = 0;
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <GAS_PWM_Check+0x88>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
				pwmIn->Period=pwmIn->RisingEdgeValue;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	609a      	str	r2, [r3, #8]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime)/(SeraMaxWidth-SeraRisingTime));
				if(pwmIn->angle>=3600)pwmIn->angle=0;

			}

}
 80007fa:	e026      	b.n	800084a <GAS_PWM_Check+0x7e>
			else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	7f1b      	ldrb	r3, [r3, #28]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d122      	bne.n	800084a <GAS_PWM_Check+0x7e>
				pwmIn->FallingEdgeValue=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000804:	2104      	movs	r1, #4
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f004 fbd8 	bl	8004fbc <HAL_TIM_ReadCapturedValue>
 800080c:	4602      	mov	r2, r0
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	605a      	str	r2, [r3, #4]
				pwmIn->Width=pwmIn->FallingEdgeValue;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	60da      	str	r2, [r3, #12]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime)/(SeraMaxWidth-SeraRisingTime));
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000822:	fb02 f303 	mul.w	r3, r2, r3
 8000826:	f5a3 2368 	sub.w	r3, r3, #950272	; 0xe8000
 800082a:	f5a3 6369 	sub.w	r3, r3, #3728	; 0xe90
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <GAS_PWM_Check+0x8c>)
 8000830:	fba2 2303 	umull	r2, r3, r2, r3
 8000834:	09da      	lsrs	r2, r3, #7
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	619a      	str	r2, [r3, #24]
				if(pwmIn->angle>=3600)pwmIn->angle=0;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000842:	d302      	bcc.n	800084a <GAS_PWM_Check+0x7e>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40010000 	.word	0x40010000
 8000858:	04101fff 	.word	0x04101fff

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	db0a      	blt.n	8000886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	490c      	ldr	r1, [pc, #48]	; (80008a8 <__NVIC_SetPriority+0x4c>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000884:	e00a      	b.n	800089c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4908      	ldr	r1, [pc, #32]	; (80008ac <__NVIC_SetPriority+0x50>)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	3b04      	subs	r3, #4
 8000894:	0112      	lsls	r2, r2, #4
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	440b      	add	r3, r1
 800089a:	761a      	strb	r2, [r3, #24]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f7ff ffc2 	bl	800085c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <GAS_Scheduler_init>:
void GAS_Scheduler_taskCounter_1000ms(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void GAS_Schduler(void);

void GAS_Scheduler_init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <GAS_Scheduler_init+0x38>)
 80008fa:	f003 fec5 	bl	8004688 <HAL_TIM_Base_Start_IT>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <GAS_Scheduler_init+0x14>
	  {
		  Error_Handler();
 8000904:	f000 fdb6 	bl	8001474 <Error_Handler>
	  }
	SysTick_Config(SystemCoreClock/1000);
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <GAS_Scheduler_init+0x3c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a09      	ldr	r2, [pc, #36]	; (8000934 <GAS_Scheduler_init+0x40>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	099b      	lsrs	r3, r3, #6
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ffcb 	bl	80008b0 <SysTick_Config>

//********CAN initialization********
	GAS_Can_init();
 800091a:	f7ff fe53 	bl	80005c4 <GAS_Can_init>

//********PWM initialization********
	GAS_PWM_inputInit();
 800091e:	f7ff fef1 	bl	8000704 <GAS_PWM_inputInit>
	GAS_PWM_outputInit();
 8000922:	f7ff ff07 	bl	8000734 <GAS_PWM_outputInit>

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000033c 	.word	0x2000033c
 8000930:	20000008 	.word	0x20000008
 8000934:	10624dd3 	.word	0x10624dd3

08000938 <GAS_Scheduler_taskCounter_1ms>:



void GAS_Scheduler_taskCounter_1ms(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
//	GAS_Vadc_dmaIn();
//	GAS_Vadc_getValue();

	GAS_PWM_changeOutput_ch1(200);
 800093c:	20c8      	movs	r0, #200	; 0xc8
 800093e:	f7ff ff2d 	bl	800079c <GAS_PWM_changeOutput_ch1>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <GAS_Scheduler_taskCounter_10ms>:

void GAS_Scheduler_taskCounter_10ms(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
//	GAS_Can_sendMessage();
	if (pwmChangeFlag){
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <GAS_Scheduler_taskCounter_10ms+0x2c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d00c      	beq.n	8000970 <GAS_Scheduler_taskCounter_10ms+0x28>
		GAS_Can_sendMessage(pwmIn1.angle,pwmIn2.angle);
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <GAS_Scheduler_taskCounter_10ms+0x30>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <GAS_Scheduler_taskCounter_10ms+0x34>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	b29b      	uxth	r3, r3
 8000962:	4619      	mov	r1, r3
 8000964:	4610      	mov	r0, r2
 8000966:	f7ff fe4d 	bl	8000604 <GAS_Can_sendMessage>
		pwmChangeFlag = False;
 800096a:	4b02      	ldr	r3, [pc, #8]	; (8000974 <GAS_Scheduler_taskCounter_10ms+0x2c>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
	}
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000030 	.word	0x20000030
 8000978:	200000dc 	.word	0x200000dc
 800097c:	20000114 	.word	0x20000114

08000980 <GAS_Scheduler_taskCounter_100ms>:

void GAS_Scheduler_taskCounter_100ms(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <GAS_Scheduler_taskCounter_1000ms>:
void GAS_Scheduler_taskCounter_1000ms(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	gTimerCnt++;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <HAL_SYSTICK_Callback+0x7c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <HAL_SYSTICK_Callback+0x7c>)
 80009a8:	6013      	str	r3, [r2, #0]
			gTask.flag_1ms=True;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <HAL_SYSTICK_Callback+0x80>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
			if(gTimerCnt % 10 == 0)
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_SYSTICK_Callback+0x7c>)
 80009b2:	6819      	ldr	r1, [r3, #0]
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <HAL_SYSTICK_Callback+0x84>)
 80009b6:	fb83 2301 	smull	r2, r3, r3, r1
 80009ba:	109a      	asrs	r2, r3, #2
 80009bc:	17cb      	asrs	r3, r1, #31
 80009be:	1ad2      	subs	r2, r2, r3
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	1aca      	subs	r2, r1, r3
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d102      	bne.n	80009d4 <HAL_SYSTICK_Callback+0x38>
			{
				gTask.flag_10ms=True;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_SYSTICK_Callback+0x80>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	705a      	strb	r2, [r3, #1]
			}
			if(gTimerCnt % 100 == 0)
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_SYSTICK_Callback+0x7c>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_SYSTICK_Callback+0x88>)
 80009da:	fb83 1302 	smull	r1, r3, r3, r2
 80009de:	1159      	asrs	r1, r3, #5
 80009e0:	17d3      	asrs	r3, r2, #31
 80009e2:	1acb      	subs	r3, r1, r3
 80009e4:	2164      	movs	r1, #100	; 0x64
 80009e6:	fb01 f303 	mul.w	r3, r1, r3
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <HAL_SYSTICK_Callback+0x5a>
			{
				gTask.flag_100ms=True;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_SYSTICK_Callback+0x80>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	709a      	strb	r2, [r3, #2]
			}

			if(gTimerCnt == 1000)
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_SYSTICK_Callback+0x7c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009fe:	d105      	bne.n	8000a0c <HAL_SYSTICK_Callback+0x70>
			{
				gTask.flag_1000ms=True;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_SYSTICK_Callback+0x80>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	70da      	strb	r2, [r3, #3]
				gTimerCnt = 0;
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <HAL_SYSTICK_Callback+0x7c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
			}
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000138 	.word	0x20000138
 8000a1c:	20000130 	.word	0x20000130
 8000a20:	66666667 	.word	0x66666667
 8000a24:	51eb851f 	.word	0x51eb851f

08000a28 <GAS_Scheduler>:
//		gTimerCnt = 0;
//	}
//}

void GAS_Scheduler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0


	if(gTask.flag_1ms == True)
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <GAS_Scheduler+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d104      	bne.n	8000a40 <GAS_Scheduler+0x18>
	{
		gTask.flag_1ms = False;
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <GAS_Scheduler+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
		GAS_Scheduler_taskCounter_1ms();
 8000a3c:	f7ff ff7c 	bl	8000938 <GAS_Scheduler_taskCounter_1ms>
	}

	if(gTask.flag_10ms == True)
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <GAS_Scheduler+0x58>)
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d104      	bne.n	8000a54 <GAS_Scheduler+0x2c>
	{
		gTask.flag_10ms = False;
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <GAS_Scheduler+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	705a      	strb	r2, [r3, #1]
		GAS_Scheduler_taskCounter_10ms();
 8000a50:	f7ff ff7a 	bl	8000948 <GAS_Scheduler_taskCounter_10ms>
	}

	if(gTask.flag_100ms == True)
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <GAS_Scheduler+0x58>)
 8000a56:	789b      	ldrb	r3, [r3, #2]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d104      	bne.n	8000a68 <GAS_Scheduler+0x40>
	{
		gTask.flag_100ms = False;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <GAS_Scheduler+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	709a      	strb	r2, [r3, #2]
		GAS_Scheduler_taskCounter_100ms();
 8000a64:	f7ff ff8c 	bl	8000980 <GAS_Scheduler_taskCounter_100ms>
	}

	if(gTask.flag_1000ms == True)
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <GAS_Scheduler+0x58>)
 8000a6a:	78db      	ldrb	r3, [r3, #3]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d104      	bne.n	8000a7c <GAS_Scheduler+0x54>
	{
		gTask.flag_1000ms = False;
 8000a72:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <GAS_Scheduler+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	70da      	strb	r2, [r3, #3]
		GAS_Scheduler_taskCounter_1000ms();
 8000a78:	f7ff ff89 	bl	800098e <GAS_Scheduler_taskCounter_1000ms>
	}

//	GAS_Can_recieveMessage(&hcan);
//	HAL_CAN_IRQHandler(&hcan);
//	  pin_state=HAL_GPIO_ReadPin(GPIO_PIN_8);
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000130 	.word	0x20000130

08000a84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <MX_ADC1_Init+0x9c>)
 8000a9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000a9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000ac6:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <MX_ADC1_Init+0xa0>)
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000ae6:	f001 fa27 	bl	8001f38 <HAL_ADC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000af0:	f000 fcc0 	bl	8001474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_ADC1_Init+0x98>)
 8000b06:	f001 fa5b 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b10:	f000 fcb0 	bl	8001474 <Error_Handler>
  }

}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000188 	.word	0x20000188
 8000b20:	40012000 	.word	0x40012000
 8000b24:	0f000001 	.word	0x0f000001

08000b28 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2e:	463b      	mov	r3, r7
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b3c:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <MX_ADC2_Init+0x9c>)
 8000b3e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b46:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <MX_ADC2_Init+0xa0>)
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000b8a:	f001 f9d5 	bl	8001f38 <HAL_ADC_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000b94:	f000 fc6e 	bl	8001474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b98:	2305      	movs	r3, #5
 8000b9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_ADC2_Init+0x98>)
 8000baa:	f001 fa09 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000bb4:	f000 fc5e 	bl	8001474 <Error_Handler>
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000140 	.word	0x20000140
 8000bc4:	40012100 	.word	0x40012100
 8000bc8:	0f000001 	.word	0x0f000001

08000bcc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000be0:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <MX_ADC3_Init+0x9c>)
 8000be2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000be6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <MX_ADC3_Init+0xa0>)
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000c2e:	f001 f983 	bl	8001f38 <HAL_ADC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c38:	f000 fc1c 	bl	8001474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_ADC3_Init+0x98>)
 8000c4e:	f001 f9b7 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c58:	f000 fc0c 	bl	8001474 <Error_Handler>
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200001d0 	.word	0x200001d0
 8000c68:	40012200 	.word	0x40012200
 8000c6c:	0f000001 	.word	0x0f000001

08000c70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b092      	sub	sp, #72	; 0x48
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a91      	ldr	r2, [pc, #580]	; (8000ed4 <HAL_ADC_MspInit+0x264>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	f040 808d 	bne.w	8000dae <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
 8000c98:	4b8f      	ldr	r3, [pc, #572]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9c:	4a8e      	ldr	r2, [pc, #568]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca4:	4b8c      	ldr	r3, [pc, #560]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
 8000cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb4:	4b88      	ldr	r3, [pc, #544]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	4a87      	ldr	r2, [pc, #540]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc0:	4b85      	ldr	r3, [pc, #532]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cd0:	4b81      	ldr	r3, [pc, #516]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a80      	ldr	r2, [pc, #512]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
 8000cdc:	4b7e      	ldr	r3, [pc, #504]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
 8000cec:	4b7a      	ldr	r3, [pc, #488]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	4a79      	ldr	r2, [pc, #484]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf8:	4b77      	ldr	r3, [pc, #476]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d04:	233f      	movs	r3, #63	; 0x3f
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d14:	4619      	mov	r1, r3
 8000d16:	4871      	ldr	r0, [pc, #452]	; (8000edc <HAL_ADC_MspInit+0x26c>)
 8000d18:	f002 fe82 	bl	8003a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000d1c:	23fe      	movs	r3, #254	; 0xfe
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d20:	2303      	movs	r3, #3
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	486c      	ldr	r0, [pc, #432]	; (8000ee0 <HAL_ADC_MspInit+0x270>)
 8000d30:	f002 fe76 	bl	8003a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d34:	2302      	movs	r3, #2
 8000d36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d44:	4619      	mov	r1, r3
 8000d46:	4867      	ldr	r0, [pc, #412]	; (8000ee4 <HAL_ADC_MspInit+0x274>)
 8000d48:	f002 fe6a 	bl	8003a20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d4c:	4b66      	ldr	r3, [pc, #408]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000d4e:	4a67      	ldr	r2, [pc, #412]	; (8000eec <HAL_ADC_MspInit+0x27c>)
 8000d50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d52:	4b65      	ldr	r3, [pc, #404]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d58:	4b63      	ldr	r3, [pc, #396]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5e:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d64:	4b60      	ldr	r3, [pc, #384]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d6c:	4b5e      	ldr	r3, [pc, #376]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000d6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d72:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d74:	4b5c      	ldr	r3, [pc, #368]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000d76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d7a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d7c:	4b5a      	ldr	r3, [pc, #360]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d82:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d84:	4b58      	ldr	r3, [pc, #352]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d8a:	4b57      	ldr	r3, [pc, #348]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d90:	4855      	ldr	r0, [pc, #340]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000d92:	f002 fb5d 	bl	8003450 <HAL_DMA_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000d9c:	f000 fb6a 	bl	8001474 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a51      	ldr	r2, [pc, #324]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000da4:	639a      	str	r2, [r3, #56]	; 0x38
 8000da6:	4a50      	ldr	r2, [pc, #320]	; (8000ee8 <HAL_ADC_MspInit+0x278>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000dac:	e08e      	b.n	8000ecc <HAL_ADC_MspInit+0x25c>
  else if(adcHandle->Instance==ADC2)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a4f      	ldr	r2, [pc, #316]	; (8000ef0 <HAL_ADC_MspInit+0x280>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d142      	bne.n	8000e3e <HAL_ADC_MspInit+0x1ce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
 8000dbc:	4b46      	ldr	r3, [pc, #280]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc0:	4a45      	ldr	r2, [pc, #276]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc8:	4b43      	ldr	r3, [pc, #268]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd0:	623b      	str	r3, [r7, #32]
 8000dd2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a3e      	ldr	r2, [pc, #248]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
 8000de4:	4b3c      	ldr	r3, [pc, #240]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a37      	ldr	r2, [pc, #220]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b35      	ldr	r3, [pc, #212]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e10:	2303      	movs	r3, #3
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	482f      	ldr	r0, [pc, #188]	; (8000edc <HAL_ADC_MspInit+0x26c>)
 8000e20:	f002 fdfe 	bl	8003a20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000e24:	233e      	movs	r3, #62	; 0x3e
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e34:	4619      	mov	r1, r3
 8000e36:	482a      	ldr	r0, [pc, #168]	; (8000ee0 <HAL_ADC_MspInit+0x270>)
 8000e38:	f002 fdf2 	bl	8003a20 <HAL_GPIO_Init>
}
 8000e3c:	e046      	b.n	8000ecc <HAL_ADC_MspInit+0x25c>
  else if(adcHandle->Instance==ADC3)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <HAL_ADC_MspInit+0x284>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d141      	bne.n	8000ecc <HAL_ADC_MspInit+0x25c>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e50:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6453      	str	r3, [r2, #68]	; 0x44
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_ADC_MspInit+0x268>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eac:	4619      	mov	r1, r3
 8000eae:	480b      	ldr	r0, [pc, #44]	; (8000edc <HAL_ADC_MspInit+0x26c>)
 8000eb0:	f002 fdb6 	bl	8003a20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000eb4:	230e      	movs	r3, #14
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <HAL_ADC_MspInit+0x270>)
 8000ec8:	f002 fdaa 	bl	8003a20 <HAL_GPIO_Init>
}
 8000ecc:	bf00      	nop
 8000ece:	3748      	adds	r7, #72	; 0x48
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40012000 	.word	0x40012000
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40020400 	.word	0x40020400
 8000ee8:	20000218 	.word	0x20000218
 8000eec:	40026410 	.word	0x40026410
 8000ef0:	40012100 	.word	0x40012100
 8000ef4:	40012200 	.word	0x40012200

08000ef8 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <MX_CAN2_Init+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000f16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f1a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000f1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f22:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_CAN2_Init+0x64>)
 8000f4a:	f001 fa57 	bl	80023fc <HAL_CAN_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000f54:	f000 fa8e 	bl	8001474 <Error_Handler>
  }

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000278 	.word	0x20000278
 8000f60:	40006800 	.word	0x40006800

08000f64 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a28      	ldr	r2, [pc, #160]	; (8001024 <HAL_CAN_MspInit+0xc0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d14a      	bne.n	800101c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b27      	ldr	r3, [pc, #156]	; (8001028 <HAL_CAN_MspInit+0xc4>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a26      	ldr	r2, [pc, #152]	; (8001028 <HAL_CAN_MspInit+0xc4>)
 8000f90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b24      	ldr	r3, [pc, #144]	; (8001028 <HAL_CAN_MspInit+0xc4>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <HAL_CAN_MspInit+0xc4>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a1f      	ldr	r2, [pc, #124]	; (8001028 <HAL_CAN_MspInit+0xc4>)
 8000fac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <HAL_CAN_MspInit+0xc4>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_CAN_MspInit+0xc4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a18      	ldr	r2, [pc, #96]	; (8001028 <HAL_CAN_MspInit+0xc4>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <HAL_CAN_MspInit+0xc4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000fda:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000fec:	2309      	movs	r3, #9
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480d      	ldr	r0, [pc, #52]	; (800102c <HAL_CAN_MspInit+0xc8>)
 8000ff8:	f002 fd12 	bl	8003a20 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	2040      	movs	r0, #64	; 0x40
 8001002:	f002 f95e 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001006:	2040      	movs	r0, #64	; 0x40
 8001008:	f002 f977 	bl	80032fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	2041      	movs	r0, #65	; 0x41
 8001012:	f002 f956 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001016:	2041      	movs	r0, #65	; 0x41
 8001018:	f002 f96f 	bl	80032fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	; 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40006800 	.word	0x40006800
 8001028:	40023800 	.word	0x40023800
 800102c:	40020400 	.word	0x40020400

08001030 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_CRC_Init+0x20>)
 8001036:	4a07      	ldr	r2, [pc, #28]	; (8001054 <MX_CRC_Init+0x24>)
 8001038:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_CRC_Init+0x20>)
 800103c:	f002 f97d 	bl	800333a <HAL_CRC_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001046:	f000 fa15 	bl	8001474 <Error_Handler>
  }

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200002a0 	.word	0x200002a0
 8001054:	40023000 	.word	0x40023000

08001058 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <HAL_CRC_MspInit+0x3c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10d      	bne.n	8001086 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_CRC_MspInit+0x40>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <HAL_CRC_MspInit+0x40>)
 8001074:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_CRC_MspInit+0x40>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023000 	.word	0x40023000
 8001098:	40023800 	.word	0x40023800

0800109c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80010a2:	463b      	mov	r3, r7
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_DAC_Init+0x4c>)
 80010ac:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <MX_DAC_Init+0x50>)
 80010ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_DAC_Init+0x4c>)
 80010b2:	f002 f95e 	bl	8003372 <HAL_DAC_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010bc:	f000 f9da 	bl	8001474 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_DAC_Init+0x4c>)
 80010d0:	f002 f971 	bl	80033b6 <HAL_DAC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010da:	f000 f9cb 	bl	8001474 <Error_Handler>
  }

}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200002a8 	.word	0x200002a8
 80010ec:	40007400 	.word	0x40007400

080010f0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a17      	ldr	r2, [pc, #92]	; (800116c <HAL_DAC_MspInit+0x7c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d127      	bne.n	8001162 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_DAC_MspInit+0x80>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <HAL_DAC_MspInit+0x80>)
 800111c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_DAC_MspInit+0x80>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_DAC_MspInit+0x80>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <HAL_DAC_MspInit+0x80>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_DAC_MspInit+0x80>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114a:	2310      	movs	r3, #16
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	2303      	movs	r3, #3
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <HAL_DAC_MspInit+0x84>)
 800115e:	f002 fc5f 	bl	8003a20 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40007400 	.word	0x40007400
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000

08001178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_DMA_Init+0x3c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <MX_DMA_Init+0x3c>)
 8001188:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_DMA_Init+0x3c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2038      	movs	r0, #56	; 0x38
 80011a0:	f002 f88f 	bl	80032c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011a4:	2038      	movs	r0, #56	; 0x38
 80011a6:	f002 f8a8 	bl	80032fa <HAL_NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800

080011b8 <MX_GPIO_Init>:
     PC12   ------> SPI3_MOSI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b5a      	ldr	r3, [pc, #360]	; (800133c <MX_GPIO_Init+0x184>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a59      	ldr	r2, [pc, #356]	; (800133c <MX_GPIO_Init+0x184>)
 80011d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b57      	ldr	r3, [pc, #348]	; (800133c <MX_GPIO_Init+0x184>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b53      	ldr	r3, [pc, #332]	; (800133c <MX_GPIO_Init+0x184>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a52      	ldr	r2, [pc, #328]	; (800133c <MX_GPIO_Init+0x184>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b50      	ldr	r3, [pc, #320]	; (800133c <MX_GPIO_Init+0x184>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <MX_GPIO_Init+0x184>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a4b      	ldr	r2, [pc, #300]	; (800133c <MX_GPIO_Init+0x184>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b49      	ldr	r3, [pc, #292]	; (800133c <MX_GPIO_Init+0x184>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b45      	ldr	r3, [pc, #276]	; (800133c <MX_GPIO_Init+0x184>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a44      	ldr	r2, [pc, #272]	; (800133c <MX_GPIO_Init+0x184>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b42      	ldr	r3, [pc, #264]	; (800133c <MX_GPIO_Init+0x184>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b3e      	ldr	r3, [pc, #248]	; (800133c <MX_GPIO_Init+0x184>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a3d      	ldr	r2, [pc, #244]	; (800133c <MX_GPIO_Init+0x184>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <MX_GPIO_Init+0x184>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001260:	4837      	ldr	r0, [pc, #220]	; (8001340 <MX_GPIO_Init+0x188>)
 8001262:	f002 fd77 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2104      	movs	r1, #4
 800126a:	4836      	ldr	r0, [pc, #216]	; (8001344 <MX_GPIO_Init+0x18c>)
 800126c:	f002 fd72 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	482d      	ldr	r0, [pc, #180]	; (8001340 <MX_GPIO_Init+0x188>)
 800128a:	f002 fbc9 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800128e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012a0:	2301      	movs	r3, #1
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4825      	ldr	r0, [pc, #148]	; (8001340 <MX_GPIO_Init+0x188>)
 80012ac:	f002 fbb8 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012c2:	2306      	movs	r3, #6
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	481e      	ldr	r0, [pc, #120]	; (8001348 <MX_GPIO_Init+0x190>)
 80012ce:	f002 fba7 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012d2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012e4:	2306      	movs	r3, #6
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4817      	ldr	r0, [pc, #92]	; (800134c <MX_GPIO_Init+0x194>)
 80012f0:	f002 fb96 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012f4:	2304      	movs	r3, #4
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	480e      	ldr	r0, [pc, #56]	; (8001344 <MX_GPIO_Init+0x18c>)
 800130c:	f002 fb88 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001310:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001316:	2312      	movs	r3, #18
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131a:	2301      	movs	r3, #1
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001322:	2304      	movs	r3, #4
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_GPIO_Init+0x188>)
 800132e:	f002 fb77 	bl	8003a20 <HAL_GPIO_Init>

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40020400 	.word	0x40020400
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40020000 	.word	0x40020000
 800134c:	40020800 	.word	0x40020800

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001354:	f000 fd7e 	bl	8001e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001358:	f000 f820 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135c:	f7ff ff2c 	bl	80011b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001360:	f7ff ff0a 	bl	8001178 <MX_DMA_Init>
  MX_ADC1_Init();
 8001364:	f7ff fb8e 	bl	8000a84 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001368:	f7ff fbde 	bl	8000b28 <MX_ADC2_Init>
  MX_ADC3_Init();
 800136c:	f7ff fc2e 	bl	8000bcc <MX_ADC3_Init>
  MX_CAN2_Init();
 8001370:	f7ff fdc2 	bl	8000ef8 <MX_CAN2_Init>
  MX_DAC_Init();
 8001374:	f7ff fe92 	bl	800109c <MX_DAC_Init>
  MX_CRC_Init();
 8001378:	f7ff fe5a 	bl	8001030 <MX_CRC_Init>
  MX_TIM1_Init();
 800137c:	f000 f926 	bl	80015cc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001380:	f000 f9c4 	bl	800170c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001384:	f000 fac2 	bl	800190c <MX_TIM8_Init>
  MX_TIM4_Init();
 8001388:	f000 fa4a 	bl	8001820 <MX_TIM4_Init>
  MX_TIM12_Init();
 800138c:	f000 fb5e 	bl	8001a4c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  GAS_Scheduler_init();
 8001390:	f7ff fab0 	bl	80008f4 <GAS_Scheduler_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 GAS_Scheduler();
 8001394:	f7ff fb48 	bl	8000a28 <GAS_Scheduler>
  {
 8001398:	e7fc      	b.n	8001394 <main+0x44>
	...

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	; 0x50
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0320 	add.w	r3, r7, #32
 80013a6:	2230      	movs	r2, #48	; 0x30
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f004 fbe6 	bl	8005b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <SystemClock_Config+0xd0>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	4a28      	ldr	r2, [pc, #160]	; (800146c <SystemClock_Config+0xd0>)
 80013ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ce:	6413      	str	r3, [r2, #64]	; 0x40
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <SystemClock_Config+0xd0>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <SystemClock_Config+0xd4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a22      	ldr	r2, [pc, #136]	; (8001470 <SystemClock_Config+0xd4>)
 80013e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <SystemClock_Config+0xd4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f8:	2301      	movs	r3, #1
 80013fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001402:	2302      	movs	r3, #2
 8001404:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001406:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800140a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800140c:	2304      	movs	r3, #4
 800140e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001410:	23a8      	movs	r3, #168	; 0xa8
 8001412:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001414:	2302      	movs	r3, #2
 8001416:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001418:	2307      	movs	r3, #7
 800141a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	4618      	mov	r0, r3
 8001422:	f002 fcb1 	bl	8003d88 <HAL_RCC_OscConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800142c:	f000 f822 	bl	8001474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001430:	230f      	movs	r3, #15
 8001432:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001434:	2302      	movs	r3, #2
 8001436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800143c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001440:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001446:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2105      	movs	r1, #5
 800144e:	4618      	mov	r0, r3
 8001450:	f002 ff0a 	bl	8004268 <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800145a:	f000 f80b 	bl	8001474 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800145e:	f002 ffe9 	bl	8004434 <HAL_RCC_EnableCSS>
}
 8001462:	bf00      	nop
 8001464:	3750      	adds	r7, #80	; 0x50
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40007000 	.word	0x40007000

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147a:	e7fe      	b.n	800147a <Error_Handler+0x6>

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_MspInit+0x4c>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_MspInit+0x4c>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80014d0:	f003 f894 	bl	80045fc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x8>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151c:	f000 fcec 	bl	8001ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001520:	f001 ff05 	bl	800332e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM1_CC_IRQHandler+0x10>)
 800152e:	f003 f9e1 	bl	80048f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000037c 	.word	0x2000037c

0800153c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <TIM4_IRQHandler+0x10>)
 8001542:	f003 f9d7 	bl	80048f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200002fc 	.word	0x200002fc

08001550 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM8_CC_IRQHandler+0x10>)
 8001556:	f003 f9cd 	bl	80048f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200002bc 	.word	0x200002bc

08001564 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <DMA2_Stream0_IRQHandler+0x10>)
 800156a:	f002 f81f 	bl	80035ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000218 	.word	0x20000218

08001578 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <CAN2_RX0_IRQHandler+0x10>)
 800157e:	f001 fba5 	bl	8002ccc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000278 	.word	0x20000278

0800158c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <CAN2_RX1_IRQHandler+0x10>)
 8001592:	f001 fb9b 	bl	8002ccc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000278 	.word	0x20000278

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <SystemInit+0x28>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <SystemInit+0x28>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SystemInit+0x28>)
 80015b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ba:	609a      	str	r2, [r3, #8]
#endif
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b090      	sub	sp, #64	; 0x40
 80015d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 8001606:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <MX_TIM1_Init+0x138>)
 8001608:	4a3f      	ldr	r2, [pc, #252]	; (8001708 <MX_TIM1_Init+0x13c>)
 800160a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800160c:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <MX_TIM1_Init+0x138>)
 800160e:	22a7      	movs	r2, #167	; 0xa7
 8001610:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <MX_TIM1_Init+0x138>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001618:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <MX_TIM1_Init+0x138>)
 800161a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b38      	ldr	r3, [pc, #224]	; (8001704 <MX_TIM1_Init+0x138>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <MX_TIM1_Init+0x138>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800162c:	4b35      	ldr	r3, [pc, #212]	; (8001704 <MX_TIM1_Init+0x138>)
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001632:	4834      	ldr	r0, [pc, #208]	; (8001704 <MX_TIM1_Init+0x138>)
 8001634:	f002 fffd 	bl	8004632 <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800163e:	f7ff ff19 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800164c:	4619      	mov	r1, r3
 800164e:	482d      	ldr	r0, [pc, #180]	; (8001704 <MX_TIM1_Init+0x138>)
 8001650:	f003 fbba 	bl	8004dc8 <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800165a:	f7ff ff0b 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800165e:	4829      	ldr	r0, [pc, #164]	; (8001704 <MX_TIM1_Init+0x138>)
 8001660:	f003 f8aa 	bl	80047b8 <HAL_TIM_IC_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800166a:	f7ff ff03 	bl	8001474 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800166e:	2304      	movs	r3, #4
 8001670:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001672:	2350      	movs	r3, #80	; 0x50
 8001674:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	481f      	ldr	r0, [pc, #124]	; (8001704 <MX_TIM1_Init+0x138>)
 8001686:	f003 fc56 	bl	8004f36 <HAL_TIM_SlaveConfigSynchro>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001690:	f7ff fef0 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4818      	ldr	r0, [pc, #96]	; (8001704 <MX_TIM1_Init+0x138>)
 80016a4:	f004 f9b6 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 80016ae:	f7ff fee1 	bl	8001474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016b6:	2301      	movs	r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80016be:	230f      	movs	r3, #15
 80016c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2200      	movs	r2, #0
 80016c6:	4619      	mov	r1, r3
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <MX_TIM1_Init+0x138>)
 80016ca:	f003 fa1b 	bl	8004b04 <HAL_TIM_IC_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80016d4:	f7ff fece 	bl	8001474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80016d8:	2302      	movs	r3, #2
 80016da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80016dc:	2302      	movs	r3, #2
 80016de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2204      	movs	r2, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <MX_TIM1_Init+0x138>)
 80016ec:	f003 fa0a 	bl	8004b04 <HAL_TIM_IC_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80016f6:	f7ff febd 	bl	8001474 <Error_Handler>
  }

}
 80016fa:	bf00      	nop
 80016fc:	3740      	adds	r7, #64	; 0x40
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000037c 	.word	0x2000037c
 8001708:	40010000 	.word	0x40010000

0800170c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b090      	sub	sp, #64	; 0x40
 8001710:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <MX_TIM3_Init+0x10c>)
 8001748:	4a34      	ldr	r2, [pc, #208]	; (800181c <MX_TIM3_Init+0x110>)
 800174a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <MX_TIM3_Init+0x10c>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001752:	4b31      	ldr	r3, [pc, #196]	; (8001818 <MX_TIM3_Init+0x10c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001758:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <MX_TIM3_Init+0x10c>)
 800175a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <MX_TIM3_Init+0x10c>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001766:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <MX_TIM3_Init+0x10c>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800176c:	482a      	ldr	r0, [pc, #168]	; (8001818 <MX_TIM3_Init+0x10c>)
 800176e:	f002 ff60 	bl	8004632 <HAL_TIM_Base_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001778:	f7ff fe7c 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001782:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001786:	4619      	mov	r1, r3
 8001788:	4823      	ldr	r0, [pc, #140]	; (8001818 <MX_TIM3_Init+0x10c>)
 800178a:	f003 fb1d 	bl	8004dc8 <HAL_TIM_ConfigClockSource>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001794:	f7ff fe6e 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001798:	481f      	ldr	r0, [pc, #124]	; (8001818 <MX_TIM3_Init+0x10c>)
 800179a:	f003 f80d 	bl	80047b8 <HAL_TIM_IC_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80017a4:	f7ff fe66 	bl	8001474 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80017ac:	2340      	movs	r3, #64	; 0x40
 80017ae:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	4817      	ldr	r0, [pc, #92]	; (8001818 <MX_TIM3_Init+0x10c>)
 80017bc:	f003 fbbb 	bl	8004f36 <HAL_TIM_SlaveConfigSynchro>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 80017c6:	f7ff fe55 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	480f      	ldr	r0, [pc, #60]	; (8001818 <MX_TIM3_Init+0x10c>)
 80017da:	f004 f91b 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80017e4:	f7ff fe46 	bl	8001474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 80017ec:	2303      	movs	r3, #3
 80017ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <MX_TIM3_Init+0x10c>)
 8001800:	f003 f980 	bl	8004b04 <HAL_TIM_IC_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800180a:	f7ff fe33 	bl	8001474 <Error_Handler>
  }

}
 800180e:	bf00      	nop
 8001810:	3740      	adds	r7, #64	; 0x40
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000033c 	.word	0x2000033c
 800181c:	40000400 	.word	0x40000400

08001820 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	f107 0320 	add.w	r3, r7, #32
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
 800184c:	615a      	str	r2, [r3, #20]
 800184e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001850:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <MX_TIM4_Init+0xe4>)
 8001852:	4a2d      	ldr	r2, [pc, #180]	; (8001908 <MX_TIM4_Init+0xe8>)
 8001854:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001856:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <MX_TIM4_Init+0xe4>)
 8001858:	2247      	movs	r2, #71	; 0x47
 800185a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b29      	ldr	r3, [pc, #164]	; (8001904 <MX_TIM4_Init+0xe4>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8001862:	4b28      	ldr	r3, [pc, #160]	; (8001904 <MX_TIM4_Init+0xe4>)
 8001864:	22c7      	movs	r2, #199	; 0xc7
 8001866:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <MX_TIM4_Init+0xe4>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <MX_TIM4_Init+0xe4>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001874:	4823      	ldr	r0, [pc, #140]	; (8001904 <MX_TIM4_Init+0xe4>)
 8001876:	f002 fedc 	bl	8004632 <HAL_TIM_Base_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001880:	f7ff fdf8 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800188a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188e:	4619      	mov	r1, r3
 8001890:	481c      	ldr	r0, [pc, #112]	; (8001904 <MX_TIM4_Init+0xe4>)
 8001892:	f003 fa99 	bl	8004dc8 <HAL_TIM_ConfigClockSource>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800189c:	f7ff fdea 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018a0:	4818      	ldr	r0, [pc, #96]	; (8001904 <MX_TIM4_Init+0xe4>)
 80018a2:	f002 ff15 	bl	80046d0 <HAL_TIM_PWM_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80018ac:	f7ff fde2 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018b8:	f107 0320 	add.w	r3, r7, #32
 80018bc:	4619      	mov	r1, r3
 80018be:	4811      	ldr	r0, [pc, #68]	; (8001904 <MX_TIM4_Init+0xe4>)
 80018c0:	f004 f8a8 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80018ca:	f7ff fdd3 	bl	8001474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ce:	2360      	movs	r3, #96	; 0x60
 80018d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	2200      	movs	r2, #0
 80018e2:	4619      	mov	r1, r3
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <MX_TIM4_Init+0xe4>)
 80018e6:	f003 f9a9 	bl	8004c3c <HAL_TIM_PWM_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80018f0:	f7ff fdc0 	bl	8001474 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <MX_TIM4_Init+0xe4>)
 80018f6:	f000 fa49 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 80018fa:	bf00      	nop
 80018fc:	3738      	adds	r7, #56	; 0x38
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002fc 	.word	0x200002fc
 8001908:	40000800 	.word	0x40000800

0800190c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b090      	sub	sp, #64	; 0x40
 8001910:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]

  htim8.Instance = TIM8;
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <MX_TIM8_Init+0x138>)
 8001948:	4a3f      	ldr	r2, [pc, #252]	; (8001a48 <MX_TIM8_Init+0x13c>)
 800194a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 800194c:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <MX_TIM8_Init+0x138>)
 800194e:	22a7      	movs	r2, #167	; 0xa7
 8001950:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b3c      	ldr	r3, [pc, #240]	; (8001a44 <MX_TIM8_Init+0x138>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001958:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <MX_TIM8_Init+0x138>)
 800195a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800195e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001960:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <MX_TIM8_Init+0x138>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <MX_TIM8_Init+0x138>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <MX_TIM8_Init+0x138>)
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001972:	4834      	ldr	r0, [pc, #208]	; (8001a44 <MX_TIM8_Init+0x138>)
 8001974:	f002 fe5d 	bl	8004632 <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800197e:	f7ff fd79 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198c:	4619      	mov	r1, r3
 800198e:	482d      	ldr	r0, [pc, #180]	; (8001a44 <MX_TIM8_Init+0x138>)
 8001990:	f003 fa1a 	bl	8004dc8 <HAL_TIM_ConfigClockSource>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800199a:	f7ff fd6b 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800199e:	4829      	ldr	r0, [pc, #164]	; (8001a44 <MX_TIM8_Init+0x138>)
 80019a0:	f002 ff0a 	bl	80047b8 <HAL_TIM_IC_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 80019aa:	f7ff fd63 	bl	8001474 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80019ae:	2304      	movs	r3, #4
 80019b0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80019b2:	2350      	movs	r3, #80	; 0x50
 80019b4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	481f      	ldr	r0, [pc, #124]	; (8001a44 <MX_TIM8_Init+0x138>)
 80019c6:	f003 fab6 	bl	8004f36 <HAL_TIM_SlaveConfigSynchro>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80019d0:	f7ff fd50 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	4818      	ldr	r0, [pc, #96]	; (8001a44 <MX_TIM8_Init+0x138>)
 80019e4:	f004 f816 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 80019ee:	f7ff fd41 	bl	8001474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019f6:	2301      	movs	r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80019fe:	230f      	movs	r3, #15
 8001a00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2200      	movs	r2, #0
 8001a06:	4619      	mov	r1, r3
 8001a08:	480e      	ldr	r0, [pc, #56]	; (8001a44 <MX_TIM8_Init+0x138>)
 8001a0a:	f003 f87b 	bl	8004b04 <HAL_TIM_IC_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8001a14:	f7ff fd2e 	bl	8001474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2204      	movs	r2, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <MX_TIM8_Init+0x138>)
 8001a2c:	f003 f86a 	bl	8004b04 <HAL_TIM_IC_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8001a36:	f7ff fd1d 	bl	8001474 <Error_Handler>
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3740      	adds	r7, #64	; 0x40
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200002bc 	.word	0x200002bc
 8001a48:	40010400 	.word	0x40010400

08001a4c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08e      	sub	sp, #56	; 0x38
 8001a50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 8001a7c:	4b35      	ldr	r3, [pc, #212]	; (8001b54 <MX_TIM12_Init+0x108>)
 8001a7e:	4a36      	ldr	r2, [pc, #216]	; (8001b58 <MX_TIM12_Init+0x10c>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 167;
 8001a82:	4b34      	ldr	r3, [pc, #208]	; (8001b54 <MX_TIM12_Init+0x108>)
 8001a84:	22a7      	movs	r2, #167	; 0xa7
 8001a86:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <MX_TIM12_Init+0x108>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001a8e:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <MX_TIM12_Init+0x108>)
 8001a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a94:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <MX_TIM12_Init+0x108>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <MX_TIM12_Init+0x108>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001aa2:	482c      	ldr	r0, [pc, #176]	; (8001b54 <MX_TIM12_Init+0x108>)
 8001aa4:	f002 fdc5 	bl	8004632 <HAL_TIM_Base_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8001aae:	f7ff fce1 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001ab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001abc:	4619      	mov	r1, r3
 8001abe:	4825      	ldr	r0, [pc, #148]	; (8001b54 <MX_TIM12_Init+0x108>)
 8001ac0:	f003 f982 	bl	8004dc8 <HAL_TIM_ConfigClockSource>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8001aca:	f7ff fcd3 	bl	8001474 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8001ace:	4821      	ldr	r0, [pc, #132]	; (8001b54 <MX_TIM12_Init+0x108>)
 8001ad0:	f002 fe72 	bl	80047b8 <HAL_TIM_IC_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 8001ada:	f7ff fccb 	bl	8001474 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ae2:	2350      	movs	r3, #80	; 0x50
 8001ae4:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerFilter = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4817      	ldr	r0, [pc, #92]	; (8001b54 <MX_TIM12_Init+0x108>)
 8001af6:	f003 fa1e 	bl	8004f36 <HAL_TIM_SlaveConfigSynchro>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM12_Init+0xb8>
  {
    Error_Handler();
 8001b00:	f7ff fcb8 	bl	8001474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8001b10:	230f      	movs	r3, #15
 8001b12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	2200      	movs	r2, #0
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480e      	ldr	r0, [pc, #56]	; (8001b54 <MX_TIM12_Init+0x108>)
 8001b1c:	f002 fff2 	bl	8004b04 <HAL_TIM_IC_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM12_Init+0xde>
  {
    Error_Handler();
 8001b26:	f7ff fca5 	bl	8001474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2204      	movs	r2, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_TIM12_Init+0x108>)
 8001b3e:	f002 ffe1 	bl	8004b04 <HAL_TIM_IC_ConfigChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 8001b48:	f7ff fc94 	bl	8001474 <Error_Handler>
  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3738      	adds	r7, #56	; 0x38
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200003bc 	.word	0x200003bc
 8001b58:	40001800 	.word	0x40001800

08001b5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b090      	sub	sp, #64	; 0x40
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a7b      	ldr	r2, [pc, #492]	; (8001d68 <HAL_TIM_Base_MspInit+0x20c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d135      	bne.n	8001bea <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b82:	4b7a      	ldr	r3, [pc, #488]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a79      	ldr	r2, [pc, #484]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9e:	4b73      	ldr	r3, [pc, #460]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a72      	ldr	r2, [pc, #456]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b70      	ldr	r3, [pc, #448]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001bb6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4867      	ldr	r0, [pc, #412]	; (8001d70 <HAL_TIM_Base_MspInit+0x214>)
 8001bd4:	f001 ff24 	bl	8003a20 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	201b      	movs	r0, #27
 8001bde:	f001 fb70 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001be2:	201b      	movs	r0, #27
 8001be4:	f001 fb89 	bl	80032fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001be8:	e0ba      	b.n	8001d60 <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM3)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a61      	ldr	r2, [pc, #388]	; (8001d74 <HAL_TIM_Base_MspInit+0x218>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d12c      	bne.n	8001c4e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	4b5c      	ldr	r3, [pc, #368]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a5b      	ldr	r2, [pc, #364]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001bfe:	f043 0302 	orr.w	r3, r3, #2
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	623b      	str	r3, [r7, #32]
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	4b55      	ldr	r3, [pc, #340]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	4a54      	ldr	r2, [pc, #336]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c20:	4b52      	ldr	r3, [pc, #328]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c2c:	2310      	movs	r3, #16
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c44:	4619      	mov	r1, r3
 8001c46:	484c      	ldr	r0, [pc, #304]	; (8001d78 <HAL_TIM_Base_MspInit+0x21c>)
 8001c48:	f001 feea 	bl	8003a20 <HAL_GPIO_Init>
}
 8001c4c:	e088      	b.n	8001d60 <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM4)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a4a      	ldr	r2, [pc, #296]	; (8001d7c <HAL_TIM_Base_MspInit+0x220>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d116      	bne.n	8001c86 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a42      	ldr	r2, [pc, #264]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b40      	ldr	r3, [pc, #256]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	201e      	movs	r0, #30
 8001c7a:	f001 fb22 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c7e:	201e      	movs	r0, #30
 8001c80:	f001 fb3b 	bl	80032fa <HAL_NVIC_EnableIRQ>
}
 8001c84:	e06c      	b.n	8001d60 <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM8)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a3d      	ldr	r2, [pc, #244]	; (8001d80 <HAL_TIM_Base_MspInit+0x224>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d135      	bne.n	8001cfc <HAL_TIM_Base_MspInit+0x1a0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c98:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca0:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4a2d      	ldr	r2, [pc, #180]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001cc8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4827      	ldr	r0, [pc, #156]	; (8001d84 <HAL_TIM_Base_MspInit+0x228>)
 8001ce6:	f001 fe9b 	bl	8003a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	202e      	movs	r0, #46	; 0x2e
 8001cf0:	f001 fae7 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001cf4:	202e      	movs	r0, #46	; 0x2e
 8001cf6:	f001 fb00 	bl	80032fa <HAL_NVIC_EnableIRQ>
}
 8001cfa:	e031      	b.n	8001d60 <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM12)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <HAL_TIM_Base_MspInit+0x22c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d12c      	bne.n	8001d60 <HAL_TIM_Base_MspInit+0x204>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_TIM_Base_MspInit+0x210>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001d50:	2309      	movs	r3, #9
 8001d52:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4807      	ldr	r0, [pc, #28]	; (8001d78 <HAL_TIM_Base_MspInit+0x21c>)
 8001d5c:	f001 fe60 	bl	8003a20 <HAL_GPIO_Init>
}
 8001d60:	bf00      	nop
 8001d62:	3740      	adds	r7, #64	; 0x40
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40000400 	.word	0x40000400
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40000800 	.word	0x40000800
 8001d80:	40010400 	.word	0x40010400
 8001d84:	40020800 	.word	0x40020800
 8001d88:	40001800 	.word	0x40001800

08001d8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <HAL_TIM_MspPostInit+0x68>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d11d      	bne.n	8001dea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a10      	ldr	r2, [pc, #64]	; (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dca:	2340      	movs	r3, #64	; 0x40
 8001dcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <HAL_TIM_MspPostInit+0x70>)
 8001de6:	f001 fe1b 	bl	8003a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40000800 	.word	0x40000800
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020400 	.word	0x40020400

08001e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e06:	e003      	b.n	8001e10 <LoopCopyDataInit>

08001e08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e0e:	3104      	adds	r1, #4

08001e10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e18:	d3f6      	bcc.n	8001e08 <CopyDataInit>
  ldr  r2, =_sbss
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e1c:	e002      	b.n	8001e24 <LoopFillZerobss>

08001e1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e20:	f842 3b04 	str.w	r3, [r2], #4

08001e24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e28:	d3f9      	bcc.n	8001e1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e2a:	f7ff fbb9 	bl	80015a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f003 fe81 	bl	8005b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e32:	f7ff fa8d 	bl	8001350 <main>
  bx  lr    
 8001e36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e3c:	08005bcc 	.word	0x08005bcc
  ldr  r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e44:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001e48:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001e4c:	20000400 	.word	0x20000400

08001e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC_IRQHandler>
	...

08001e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_Init+0x40>)
 8001e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_Init+0x40>)
 8001e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_Init+0x40>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f001 fa15 	bl	80032ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f000 f808 	bl	8001e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e88:	f7ff faf8 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023c00 	.word	0x40023c00

08001e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_InitTick+0x54>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x58>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f001 fa2d 	bl	8003316 <HAL_SYSTICK_Config>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00e      	b.n	8001ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b0f      	cmp	r3, #15
 8001eca:	d80a      	bhi.n	8001ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed4:	f001 f9f5 	bl	80032c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed8:	4a06      	ldr	r2, [pc, #24]	; (8001ef4 <HAL_InitTick+0x5c>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e000      	b.n	8001ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	20000010 	.word	0x20000010
 8001ef4:	2000000c 	.word	0x2000000c

08001ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x20>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x24>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_IncTick+0x24>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000010 	.word	0x20000010
 8001f1c:	200003fc 	.word	0x200003fc

08001f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_GetTick+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	200003fc 	.word	0x200003fc

08001f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e033      	b.n	8001fb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe fe8a 	bl	8000c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d118      	bne.n	8001fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f7e:	f023 0302 	bic.w	r3, r3, #2
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f93a 	bl	8002204 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fa6:	e001      	b.n	8001fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1c>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e105      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x228>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	d925      	bls.n	8002038 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68d9      	ldr	r1, [r3, #12]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	3b1e      	subs	r3, #30
 8002002:	2207      	movs	r2, #7
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43da      	mvns	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	400a      	ands	r2, r1
 8002010:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68d9      	ldr	r1, [r3, #12]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	4603      	mov	r3, r0
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4403      	add	r3, r0
 800202a:	3b1e      	subs	r3, #30
 800202c:	409a      	lsls	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	e022      	b.n	800207e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6919      	ldr	r1, [r3, #16]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	2207      	movs	r2, #7
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	400a      	ands	r2, r1
 800205a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	4603      	mov	r3, r0
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4403      	add	r3, r0
 8002074:	409a      	lsls	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b06      	cmp	r3, #6
 8002084:	d824      	bhi.n	80020d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	3b05      	subs	r3, #5
 8002098:	221f      	movs	r2, #31
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	400a      	ands	r2, r1
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3b05      	subs	r3, #5
 80020c2:	fa00 f203 	lsl.w	r2, r0, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	635a      	str	r2, [r3, #52]	; 0x34
 80020ce:	e04c      	b.n	800216a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b0c      	cmp	r3, #12
 80020d6:	d824      	bhi.n	8002122 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	3b23      	subs	r3, #35	; 0x23
 80020ea:	221f      	movs	r2, #31
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43da      	mvns	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	400a      	ands	r2, r1
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	4618      	mov	r0, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	3b23      	subs	r3, #35	; 0x23
 8002114:	fa00 f203 	lsl.w	r2, r0, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
 8002120:	e023      	b.n	800216a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b41      	subs	r3, #65	; 0x41
 8002134:	221f      	movs	r2, #31
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	400a      	ands	r2, r1
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	3b41      	subs	r3, #65	; 0x41
 800215e:	fa00 f203 	lsl.w	r2, r0, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_ADC_ConfigChannel+0x234>)
 800216c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <HAL_ADC_ConfigChannel+0x238>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d109      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1cc>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b12      	cmp	r3, #18
 800217e:	d105      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a19      	ldr	r2, [pc, #100]	; (80021f8 <HAL_ADC_ConfigChannel+0x238>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d123      	bne.n	80021de <HAL_ADC_ConfigChannel+0x21e>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b10      	cmp	r3, #16
 800219c:	d003      	beq.n	80021a6 <HAL_ADC_ConfigChannel+0x1e6>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b11      	cmp	r3, #17
 80021a4:	d11b      	bne.n	80021de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d111      	bne.n	80021de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <HAL_ADC_ConfigChannel+0x23c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a10      	ldr	r2, [pc, #64]	; (8002200 <HAL_ADC_ConfigChannel+0x240>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	0c9a      	lsrs	r2, r3, #18
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021d0:	e002      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f9      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	40012300 	.word	0x40012300
 80021f8:	40012000 	.word	0x40012000
 80021fc:	20000008 	.word	0x20000008
 8002200:	431bde83 	.word	0x431bde83

08002204 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800220c:	4b79      	ldr	r3, [pc, #484]	; (80023f4 <ADC_Init+0x1f0>)
 800220e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	431a      	orrs	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	021a      	lsls	r2, r3, #8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800225c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6899      	ldr	r1, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	4a58      	ldr	r2, [pc, #352]	; (80023f8 <ADC_Init+0x1f4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d022      	beq.n	80022e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6899      	ldr	r1, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	e00f      	b.n	8002302 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002300:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0202 	bic.w	r2, r2, #2
 8002310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6899      	ldr	r1, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7e1b      	ldrb	r3, [r3, #24]
 800231c:	005a      	lsls	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01b      	beq.n	8002368 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800233e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800234e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6859      	ldr	r1, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	3b01      	subs	r3, #1
 800235c:	035a      	lsls	r2, r3, #13
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	e007      	b.n	8002378 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002376:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	3b01      	subs	r3, #1
 8002394:	051a      	lsls	r2, r3, #20
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ba:	025a      	lsls	r2, r3, #9
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6899      	ldr	r1, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	029a      	lsls	r2, r3, #10
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40012300 	.word	0x40012300
 80023f8:	0f000001 	.word	0x0f000001

080023fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0ed      	b.n	80025ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fda2 	bl	8000f64 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0202 	bic.w	r2, r2, #2
 800242e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002430:	f7ff fd76 	bl	8001f20 <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002436:	e012      	b.n	800245e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002438:	f7ff fd72 	bl	8001f20 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b0a      	cmp	r3, #10
 8002444:	d90b      	bls.n	800245e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2205      	movs	r2, #5
 8002456:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0c5      	b.n	80025ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1e5      	bne.n	8002438 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800247c:	f7ff fd50 	bl	8001f20 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002482:	e012      	b.n	80024aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002484:	f7ff fd4c 	bl	8001f20 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b0a      	cmp	r3, #10
 8002490:	d90b      	bls.n	80024aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2205      	movs	r2, #5
 80024a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e09f      	b.n	80025ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0e5      	beq.n	8002484 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7e1b      	ldrb	r3, [r3, #24]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d108      	bne.n	80024d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e007      	b.n	80024e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7e5b      	ldrb	r3, [r3, #25]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d108      	bne.n	80024fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e007      	b.n	800250c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7e9b      	ldrb	r3, [r3, #26]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d108      	bne.n	8002526 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0220 	orr.w	r2, r2, #32
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e007      	b.n	8002536 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0220 	bic.w	r2, r2, #32
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7edb      	ldrb	r3, [r3, #27]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d108      	bne.n	8002550 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0210 	bic.w	r2, r2, #16
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e007      	b.n	8002560 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0210 	orr.w	r2, r2, #16
 800255e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7f1b      	ldrb	r3, [r3, #28]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d108      	bne.n	800257a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0208 	orr.w	r2, r2, #8
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e007      	b.n	800258a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0208 	bic.w	r2, r2, #8
 8002588:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7f5b      	ldrb	r3, [r3, #29]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d108      	bne.n	80025a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0204 	orr.w	r2, r2, #4
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	e007      	b.n	80025b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0204 	bic.w	r2, r2, #4
 80025b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	ea42 0103 	orr.w	r1, r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	1e5a      	subs	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3020 	ldrb.w	r3, [r3, #32]
 800260a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d003      	beq.n	800261a <HAL_CAN_ConfigFilter+0x26>
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	2b02      	cmp	r3, #2
 8002616:	f040 80be 	bne.w	8002796 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800261c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002634:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	431a      	orrs	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	2201      	movs	r2, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	43db      	mvns	r3, r3
 800266c:	401a      	ands	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d123      	bne.n	80026c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43db      	mvns	r3, r3
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800269e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3248      	adds	r2, #72	; 0x48
 80026a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ba:	6979      	ldr	r1, [r7, #20]
 80026bc:	3348      	adds	r3, #72	; 0x48
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d122      	bne.n	8002712 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3248      	adds	r2, #72	; 0x48
 80026f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002706:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002708:	6979      	ldr	r1, [r7, #20]
 800270a:	3348      	adds	r3, #72	; 0x48
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43db      	mvns	r3, r3
 8002724:	401a      	ands	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800272c:	e007      	b.n	800273e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	431a      	orrs	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43db      	mvns	r3, r3
 8002750:	401a      	ands	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002758:	e007      	b.n	800276a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	431a      	orrs	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d107      	bne.n	8002782 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	431a      	orrs	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002788:	f023 0201 	bic.w	r2, r3, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e006      	b.n	80027a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
  }
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40006400 	.word	0x40006400

080027b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d12e      	bne.n	8002826 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027e0:	f7ff fb9e 	bl	8001f20 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027e6:	e012      	b.n	800280e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027e8:	f7ff fb9a 	bl	8001f20 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b0a      	cmp	r3, #10
 80027f4:	d90b      	bls.n	800280e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2205      	movs	r2, #5
 8002806:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e012      	b.n	8002834 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e5      	bne.n	80027e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e006      	b.n	8002834 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
  }
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800283c:	b480      	push	{r7}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002850:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d003      	beq.n	8002868 <HAL_CAN_AddTxMessage+0x2c>
 8002860:	7ffb      	ldrb	r3, [r7, #31]
 8002862:	2b02      	cmp	r3, #2
 8002864:	f040 80b8 	bne.w	80029d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80a0 	beq.w	80029c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	0e1b      	lsrs	r3, r3, #24
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d907      	bls.n	80028a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e09e      	b.n	80029e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80028a8:	2201      	movs	r2, #1
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	409a      	lsls	r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028c4:	68f9      	ldr	r1, [r7, #12]
 80028c6:	6809      	ldr	r1, [r1, #0]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3318      	adds	r3, #24
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	440b      	add	r3, r1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e00f      	b.n	80028f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028e6:	68f9      	ldr	r1, [r7, #12]
 80028e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80028ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	3318      	adds	r3, #24
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	440b      	add	r3, r1
 80028f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	3318      	adds	r3, #24
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	440b      	add	r3, r1
 8002906:	3304      	adds	r3, #4
 8002908:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	7d1b      	ldrb	r3, [r3, #20]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d111      	bne.n	8002936 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3318      	adds	r3, #24
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	4413      	add	r3, r2
 800291e:	3304      	adds	r3, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	6811      	ldr	r1, [r2, #0]
 8002926:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3318      	adds	r3, #24
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	440b      	add	r3, r1
 8002932:	3304      	adds	r3, #4
 8002934:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3307      	adds	r3, #7
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	061a      	lsls	r2, r3, #24
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3306      	adds	r3, #6
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3305      	adds	r3, #5
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	4313      	orrs	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	3204      	adds	r2, #4
 8002956:	7812      	ldrb	r2, [r2, #0]
 8002958:	4610      	mov	r0, r2
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	6811      	ldr	r1, [r2, #0]
 800295e:	ea43 0200 	orr.w	r2, r3, r0
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	440b      	add	r3, r1
 8002968:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800296c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3303      	adds	r3, #3
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	061a      	lsls	r2, r3, #24
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3302      	adds	r3, #2
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3301      	adds	r3, #1
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	4313      	orrs	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	4610      	mov	r0, r2
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	6811      	ldr	r1, [r2, #0]
 8002994:	ea43 0200 	orr.w	r2, r3, r0
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	440b      	add	r3, r1
 800299e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80029a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3318      	adds	r3, #24
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	4413      	add	r3, r2
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6811      	ldr	r1, [r2, #0]
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3318      	adds	r3, #24
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	440b      	add	r3, r1
 80029c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e00e      	b.n	80029e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e006      	b.n	80029e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	; 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a04:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a06:	7afb      	ldrb	r3, [r7, #11]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d002      	beq.n	8002a12 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d11d      	bne.n	8002a4e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3301      	adds	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3301      	adds	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a70:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d003      	beq.n	8002a80 <HAL_CAN_GetRxMessage+0x24>
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	f040 80f3 	bne.w	8002c66 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10e      	bne.n	8002aa4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d116      	bne.n	8002ac2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0e7      	b.n	8002c74 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0d8      	b.n	8002c74 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	331b      	adds	r3, #27
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	4413      	add	r3, r2
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0204 	and.w	r2, r3, #4
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10c      	bne.n	8002afa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	331b      	adds	r3, #27
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	4413      	add	r3, r2
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	0d5b      	lsrs	r3, r3, #21
 8002af0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e00b      	b.n	8002b12 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	331b      	adds	r3, #27
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	4413      	add	r3, r2
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	08db      	lsrs	r3, r3, #3
 8002b0a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	331b      	adds	r3, #27
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	4413      	add	r3, r2
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0202 	and.w	r2, r3, #2
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	331b      	adds	r3, #27
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	3304      	adds	r3, #4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 020f 	and.w	r2, r3, #15
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	331b      	adds	r3, #27
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	331b      	adds	r3, #27
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	0a1a      	lsrs	r2, r3, #8
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0c1a      	lsrs	r2, r3, #16
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	0e1a      	lsrs	r2, r3, #24
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	3303      	adds	r3, #3
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	3304      	adds	r3, #4
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	0a1a      	lsrs	r2, r3, #8
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	3305      	adds	r3, #5
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	0c1a      	lsrs	r2, r3, #16
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	3306      	adds	r3, #6
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0e1a      	lsrs	r2, r3, #24
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	3307      	adds	r3, #7
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d108      	bne.n	8002c52 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0220 	orr.w	r2, r2, #32
 8002c4e:	60da      	str	r2, [r3, #12]
 8002c50:	e007      	b.n	8002c62 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0220 	orr.w	r2, r2, #32
 8002c60:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e006      	b.n	8002c74 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
  }
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c90:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d002      	beq.n	8002c9e <HAL_CAN_ActivateNotification+0x1e>
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d109      	bne.n	8002cb2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6959      	ldr	r1, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e006      	b.n	8002cc0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
  }
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	; 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d07c      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d023      	beq.n	8002d64 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2201      	movs	r2, #1
 8002d22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f97d 	bl	800302e <HAL_CAN_TxMailbox0CompleteCallback>
 8002d34:	e016      	b.n	8002d64 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
 8002d48:	e00c      	b.n	8002d64 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	e002      	b.n	8002d64 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f983 	bl	800306a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d024      	beq.n	8002db8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f95d 	bl	8003042 <HAL_CAN_TxMailbox1CompleteCallback>
 8002d88:	e016      	b.n	8002db8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9c:	e00c      	b.n	8002db8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
 8002db0:	e002      	b.n	8002db8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f963 	bl	800307e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d024      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f93d 	bl	8003056 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ddc:	e016      	b.n	8002e0c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
 8002df0:	e00c      	b.n	8002e0c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d004      	beq.n	8002e06 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
 8002e04:	e002      	b.n	8002e0c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f943 	bl	8003092 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d006      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2208      	movs	r2, #8
 8002e4a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f92a 	bl	80030a6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd fc16 	bl	800069c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2210      	movs	r2, #16
 8002e92:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2208      	movs	r2, #8
 8002eae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f902 	bl	80030ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fd fbfe 	bl	80006d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d006      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2210      	movs	r2, #16
 8002eee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f8ec 	bl	80030ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2208      	movs	r2, #8
 8002f10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8e5 	bl	80030e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d075      	beq.n	800300e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d06c      	beq.n	8003006 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	f043 0302 	orr.w	r3, r3, #2
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d03d      	beq.n	8003006 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d038      	beq.n	8003006 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f9a:	2b30      	cmp	r3, #48	; 0x30
 8002f9c:	d017      	beq.n	8002fce <HAL_CAN_IRQHandler+0x302>
 8002f9e:	2b30      	cmp	r3, #48	; 0x30
 8002fa0:	d804      	bhi.n	8002fac <HAL_CAN_IRQHandler+0x2e0>
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d009      	beq.n	8002fba <HAL_CAN_IRQHandler+0x2ee>
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002faa:	e024      	b.n	8002ff6 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002fac:	2b50      	cmp	r3, #80	; 0x50
 8002fae:	d018      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0x316>
 8002fb0:	2b60      	cmp	r3, #96	; 0x60
 8002fb2:	d01b      	beq.n	8002fec <HAL_CAN_IRQHandler+0x320>
 8002fb4:	2b40      	cmp	r3, #64	; 0x40
 8002fb6:	d00f      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002fb8:	e01d      	b.n	8002ff6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fc2:	e018      	b.n	8002ff6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	f043 0310 	orr.w	r3, r3, #16
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fcc:	e013      	b.n	8002ff6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	f043 0320 	orr.w	r3, r3, #32
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fd6:	e00e      	b.n	8002ff6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fe0:	e009      	b.n	8002ff6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fea:	e004      	b.n	8002ff6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ff4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003004:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2204      	movs	r2, #4
 800300c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f868 	bl	80030f6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003026:	bf00      	nop
 8003028:	3728      	adds	r7, #40	; 0x28
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <__NVIC_SetPriorityGrouping>:
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313e:	4a04      	ldr	r2, [pc, #16]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	60d3      	str	r3, [r2, #12]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_GetPriorityGrouping>:
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__NVIC_GetPriorityGrouping+0x18>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0307 	and.w	r3, r3, #7
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_EnableIRQ>:
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db0b      	blt.n	800319a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	4907      	ldr	r1, [pc, #28]	; (80031a8 <__NVIC_EnableIRQ+0x38>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2001      	movs	r0, #1
 8003192:	fa00 f202 	lsl.w	r2, r0, r2
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100

080031ac <__NVIC_SetPriority>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	db0a      	blt.n	80031d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	490c      	ldr	r1, [pc, #48]	; (80031f8 <__NVIC_SetPriority+0x4c>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	0112      	lsls	r2, r2, #4
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	440b      	add	r3, r1
 80031d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031d4:	e00a      	b.n	80031ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4908      	ldr	r1, [pc, #32]	; (80031fc <__NVIC_SetPriority+0x50>)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	3b04      	subs	r3, #4
 80031e4:	0112      	lsls	r2, r2, #4
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	440b      	add	r3, r1
 80031ea:	761a      	strb	r2, [r3, #24]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000e100 	.word	0xe000e100
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <NVIC_EncodePriority>:
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f1c3 0307 	rsb	r3, r3, #7
 800321a:	2b04      	cmp	r3, #4
 800321c:	bf28      	it	cs
 800321e:	2304      	movcs	r3, #4
 8003220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3304      	adds	r3, #4
 8003226:	2b06      	cmp	r3, #6
 8003228:	d902      	bls.n	8003230 <NVIC_EncodePriority+0x30>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3b03      	subs	r3, #3
 800322e:	e000      	b.n	8003232 <NVIC_EncodePriority+0x32>
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	f04f 32ff 	mov.w	r2, #4294967295
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	401a      	ands	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003248:	f04f 31ff 	mov.w	r1, #4294967295
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	43d9      	mvns	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	4313      	orrs	r3, r2
}
 800325a:	4618      	mov	r0, r3
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <SysTick_Config>:
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003278:	d301      	bcc.n	800327e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800327a:	2301      	movs	r3, #1
 800327c:	e00f      	b.n	800329e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <SysTick_Config+0x40>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003286:	210f      	movs	r1, #15
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	f7ff ff8e 	bl	80031ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <SysTick_Config+0x40>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <SysTick_Config+0x40>)
 8003298:	2207      	movs	r2, #7
 800329a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	e000e010 	.word	0xe000e010

080032ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff29 	bl	800310c <__NVIC_SetPriorityGrouping>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d4:	f7ff ff3e 	bl	8003154 <__NVIC_GetPriorityGrouping>
 80032d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	6978      	ldr	r0, [r7, #20]
 80032e0:	f7ff ff8e 	bl	8003200 <NVIC_EncodePriority>
 80032e4:	4602      	mov	r2, r0
 80032e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ff5d 	bl	80031ac <__NVIC_SetPriority>
}
 80032f2:	bf00      	nop
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff31 	bl	8003170 <__NVIC_EnableIRQ>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ffa2 	bl	8003268 <SysTick_Config>
 8003324:	4603      	mov	r3, r0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003332:	f7fd fb33 	bl	800099c <HAL_SYSTICK_Callback>
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e00e      	b.n	800336a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	795b      	ldrb	r3, [r3, #5]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fd fe7b 	bl	8001058 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e014      	b.n	80033ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	791b      	ldrb	r3, [r3, #4]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d105      	bne.n	800339a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7fd feab 	bl	80010f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2202      	movs	r2, #2
 800339e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b087      	sub	sp, #28
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	795b      	ldrb	r3, [r3, #5]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_DAC_ConfigChannel+0x20>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e036      	b.n	8003444 <HAL_DAC_ConfigChannel+0x8e>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2202      	movs	r2, #2
 80033e0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80033ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4013      	ands	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6819      	ldr	r1, [r3, #0]
 8003424:	22c0      	movs	r2, #192	; 0xc0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43da      	mvns	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	400a      	ands	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7fe fd60 	bl	8001f20 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e099      	b.n	80035a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348c:	e00f      	b.n	80034ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800348e:	f7fe fd47 	bl	8001f20 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b05      	cmp	r3, #5
 800349a:	d908      	bls.n	80034ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2203      	movs	r2, #3
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e078      	b.n	80035a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e8      	bne.n	800348e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_DMA_Init+0x158>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	2b04      	cmp	r3, #4
 8003506:	d107      	bne.n	8003518 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	4313      	orrs	r3, r2
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0307 	bic.w	r3, r3, #7
 800352e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	2b04      	cmp	r3, #4
 8003540:	d117      	bne.n	8003572 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f9e9 	bl	800392c <DMA_CheckFifoParam>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2240      	movs	r2, #64	; 0x40
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800356e:	2301      	movs	r3, #1
 8003570:	e016      	b.n	80035a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f9a0 	bl	80038c0 <DMA_CalcBaseAndBitshift>
 8003580:	4603      	mov	r3, r0
 8003582:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	223f      	movs	r2, #63	; 0x3f
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	f010803f 	.word	0xf010803f

080035ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035b8:	4b92      	ldr	r3, [pc, #584]	; (8003804 <HAL_DMA_IRQHandler+0x258>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a92      	ldr	r2, [pc, #584]	; (8003808 <HAL_DMA_IRQHandler+0x25c>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	0a9b      	lsrs	r3, r3, #10
 80035c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d6:	2208      	movs	r2, #8
 80035d8:	409a      	lsls	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4013      	ands	r3, r2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01a      	beq.n	8003618 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d013      	beq.n	8003618 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0204 	bic.w	r2, r2, #4
 80035fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	2208      	movs	r2, #8
 8003606:	409a      	lsls	r2, r3
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	f043 0201 	orr.w	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	2201      	movs	r2, #1
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d012      	beq.n	800364e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	2201      	movs	r2, #1
 800363c:	409a      	lsls	r2, r3
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	f043 0202 	orr.w	r2, r3, #2
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2204      	movs	r2, #4
 8003654:	409a      	lsls	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d012      	beq.n	8003684 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003670:	2204      	movs	r2, #4
 8003672:	409a      	lsls	r2, r3
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	f043 0204 	orr.w	r2, r3, #4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	2210      	movs	r2, #16
 800368a:	409a      	lsls	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d043      	beq.n	800371c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d03c      	beq.n	800371c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	2210      	movs	r2, #16
 80036a8:	409a      	lsls	r2, r3
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d018      	beq.n	80036ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d108      	bne.n	80036dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d024      	beq.n	800371c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
 80036da:	e01f      	b.n	800371c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01b      	beq.n	800371c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
 80036ec:	e016      	b.n	800371c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d107      	bne.n	800370c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0208 	bic.w	r2, r2, #8
 800370a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	2220      	movs	r2, #32
 8003722:	409a      	lsls	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 808e 	beq.w	800384a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8086 	beq.w	800384a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003742:	2220      	movs	r2, #32
 8003744:	409a      	lsls	r2, r3
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b05      	cmp	r3, #5
 8003754:	d136      	bne.n	80037c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0216 	bic.w	r2, r2, #22
 8003764:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003774:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <HAL_DMA_IRQHandler+0x1da>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0208 	bic.w	r2, r2, #8
 8003794:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379a:	223f      	movs	r2, #63	; 0x3f
 800379c:	409a      	lsls	r2, r3
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d07d      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
        }
        return;
 80037c2:	e078      	b.n	80038b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d01c      	beq.n	800380c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d108      	bne.n	80037f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d030      	beq.n	800384a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
 80037f0:	e02b      	b.n	800384a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d027      	beq.n	800384a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	4798      	blx	r3
 8003802:	e022      	b.n	800384a <HAL_DMA_IRQHandler+0x29e>
 8003804:	20000008 	.word	0x20000008
 8003808:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10f      	bne.n	800383a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0210 	bic.w	r2, r2, #16
 8003828:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	2b00      	cmp	r3, #0
 8003850:	d032      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d022      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2205      	movs	r2, #5
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	3301      	adds	r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	429a      	cmp	r2, r3
 8003880:	d307      	bcc.n	8003892 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f2      	bne.n	8003876 <HAL_DMA_IRQHandler+0x2ca>
 8003890:	e000      	b.n	8003894 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003892:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
 80038b4:	e000      	b.n	80038b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80038b6:	bf00      	nop
    }
  }
}
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop

080038c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	3b10      	subs	r3, #16
 80038d0:	4a14      	ldr	r2, [pc, #80]	; (8003924 <DMA_CalcBaseAndBitshift+0x64>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038da:	4a13      	ldr	r2, [pc, #76]	; (8003928 <DMA_CalcBaseAndBitshift+0x68>)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d909      	bls.n	8003902 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038f6:	f023 0303 	bic.w	r3, r3, #3
 80038fa:	1d1a      	adds	r2, r3, #4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003900:	e007      	b.n	8003912 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	aaaaaaab 	.word	0xaaaaaaab
 8003928:	08005bb4 	.word	0x08005bb4

0800392c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d11f      	bne.n	8003986 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d855      	bhi.n	80039f8 <DMA_CheckFifoParam+0xcc>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <DMA_CheckFifoParam+0x28>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003965 	.word	0x08003965
 8003958:	08003977 	.word	0x08003977
 800395c:	08003965 	.word	0x08003965
 8003960:	080039f9 	.word	0x080039f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d045      	beq.n	80039fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003974:	e042      	b.n	80039fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800397e:	d13f      	bne.n	8003a00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003984:	e03c      	b.n	8003a00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398e:	d121      	bne.n	80039d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d836      	bhi.n	8003a04 <DMA_CheckFifoParam+0xd8>
 8003996:	a201      	add	r2, pc, #4	; (adr r2, 800399c <DMA_CheckFifoParam+0x70>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039b3 	.word	0x080039b3
 80039a4:	080039ad 	.word	0x080039ad
 80039a8:	080039c5 	.word	0x080039c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
      break;
 80039b0:	e02f      	b.n	8003a12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d024      	beq.n	8003a08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c2:	e021      	b.n	8003a08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039cc:	d11e      	bne.n	8003a0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039d2:	e01b      	b.n	8003a0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <DMA_CheckFifoParam+0xb4>
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d003      	beq.n	80039e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039de:	e018      	b.n	8003a12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      break;
 80039e4:	e015      	b.n	8003a12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00e      	beq.n	8003a10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
      break;
 80039f6:	e00b      	b.n	8003a10 <DMA_CheckFifoParam+0xe4>
      break;
 80039f8:	bf00      	nop
 80039fa:	e00a      	b.n	8003a12 <DMA_CheckFifoParam+0xe6>
      break;
 80039fc:	bf00      	nop
 80039fe:	e008      	b.n	8003a12 <DMA_CheckFifoParam+0xe6>
      break;
 8003a00:	bf00      	nop
 8003a02:	e006      	b.n	8003a12 <DMA_CheckFifoParam+0xe6>
      break;
 8003a04:	bf00      	nop
 8003a06:	e004      	b.n	8003a12 <DMA_CheckFifoParam+0xe6>
      break;
 8003a08:	bf00      	nop
 8003a0a:	e002      	b.n	8003a12 <DMA_CheckFifoParam+0xe6>
      break;   
 8003a0c:	bf00      	nop
 8003a0e:	e000      	b.n	8003a12 <DMA_CheckFifoParam+0xe6>
      break;
 8003a10:	bf00      	nop
    }
  } 
  
  return status; 
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	e16b      	b.n	8003d14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	f040 815a 	bne.w	8003d0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d00b      	beq.n	8003a7a <HAL_GPIO_Init+0x5a>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d007      	beq.n	8003a7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a6e:	2b11      	cmp	r3, #17
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b12      	cmp	r3, #18
 8003a78:	d130      	bne.n	8003adc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	2203      	movs	r2, #3
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 0201 	and.w	r2, r3, #1
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0xfc>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b12      	cmp	r3, #18
 8003b1a:	d123      	bne.n	8003b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	08da      	lsrs	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3208      	adds	r2, #8
 8003b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	220f      	movs	r2, #15
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	08da      	lsrs	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3208      	adds	r2, #8
 8003b5e:	69b9      	ldr	r1, [r7, #24]
 8003b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2203      	movs	r2, #3
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0203 	and.w	r2, r3, #3
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80b4 	beq.w	8003d0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b5f      	ldr	r3, [pc, #380]	; (8003d28 <HAL_GPIO_Init+0x308>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	4a5e      	ldr	r2, [pc, #376]	; (8003d28 <HAL_GPIO_Init+0x308>)
 8003bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bb6:	4b5c      	ldr	r3, [pc, #368]	; (8003d28 <HAL_GPIO_Init+0x308>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bc2:	4a5a      	ldr	r2, [pc, #360]	; (8003d2c <HAL_GPIO_Init+0x30c>)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	3302      	adds	r3, #2
 8003bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	220f      	movs	r2, #15
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a51      	ldr	r2, [pc, #324]	; (8003d30 <HAL_GPIO_Init+0x310>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d02b      	beq.n	8003c46 <HAL_GPIO_Init+0x226>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a50      	ldr	r2, [pc, #320]	; (8003d34 <HAL_GPIO_Init+0x314>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d025      	beq.n	8003c42 <HAL_GPIO_Init+0x222>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4f      	ldr	r2, [pc, #316]	; (8003d38 <HAL_GPIO_Init+0x318>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01f      	beq.n	8003c3e <HAL_GPIO_Init+0x21e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4e      	ldr	r2, [pc, #312]	; (8003d3c <HAL_GPIO_Init+0x31c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d019      	beq.n	8003c3a <HAL_GPIO_Init+0x21a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4d      	ldr	r2, [pc, #308]	; (8003d40 <HAL_GPIO_Init+0x320>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_GPIO_Init+0x216>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4c      	ldr	r2, [pc, #304]	; (8003d44 <HAL_GPIO_Init+0x324>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00d      	beq.n	8003c32 <HAL_GPIO_Init+0x212>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4b      	ldr	r2, [pc, #300]	; (8003d48 <HAL_GPIO_Init+0x328>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <HAL_GPIO_Init+0x20e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <HAL_GPIO_Init+0x32c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_GPIO_Init+0x20a>
 8003c26:	2307      	movs	r3, #7
 8003c28:	e00e      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	e00c      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c2e:	2306      	movs	r3, #6
 8003c30:	e00a      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c32:	2305      	movs	r3, #5
 8003c34:	e008      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c36:	2304      	movs	r3, #4
 8003c38:	e006      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e004      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e002      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c46:	2300      	movs	r3, #0
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	f002 0203 	and.w	r2, r2, #3
 8003c4e:	0092      	lsls	r2, r2, #2
 8003c50:	4093      	lsls	r3, r2
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c58:	4934      	ldr	r1, [pc, #208]	; (8003d2c <HAL_GPIO_Init+0x30c>)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c66:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c8a:	4a31      	ldr	r2, [pc, #196]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c90:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cb4:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cba:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cde:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d08:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b0f      	cmp	r3, #15
 8003d18:	f67f ae90 	bls.w	8003a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	3724      	adds	r7, #36	; 0x24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	40020000 	.word	0x40020000
 8003d34:	40020400 	.word	0x40020400
 8003d38:	40020800 	.word	0x40020800
 8003d3c:	40020c00 	.word	0x40020c00
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40021400 	.word	0x40021400
 8003d48:	40021800 	.word	0x40021800
 8003d4c:	40021c00 	.word	0x40021c00
 8003d50:	40013c00 	.word	0x40013c00

08003d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
 8003d60:	4613      	mov	r3, r2
 8003d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d64:	787b      	ldrb	r3, [r7, #1]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d70:	e003      	b.n	8003d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d72:	887b      	ldrh	r3, [r7, #2]
 8003d74:	041a      	lsls	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	619a      	str	r2, [r3, #24]
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e25b      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d075      	beq.n	8003e92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003da6:	4ba3      	ldr	r3, [pc, #652]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d00c      	beq.n	8003dcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db2:	4ba0      	ldr	r3, [pc, #640]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d112      	bne.n	8003de4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dbe:	4b9d      	ldr	r3, [pc, #628]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dca:	d10b      	bne.n	8003de4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dcc:	4b99      	ldr	r3, [pc, #612]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d05b      	beq.n	8003e90 <HAL_RCC_OscConfig+0x108>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d157      	bne.n	8003e90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e236      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dec:	d106      	bne.n	8003dfc <HAL_RCC_OscConfig+0x74>
 8003dee:	4b91      	ldr	r3, [pc, #580]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a90      	ldr	r2, [pc, #576]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e01d      	b.n	8003e38 <HAL_RCC_OscConfig+0xb0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x98>
 8003e06:	4b8b      	ldr	r3, [pc, #556]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a8a      	ldr	r2, [pc, #552]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b88      	ldr	r3, [pc, #544]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a87      	ldr	r2, [pc, #540]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e00b      	b.n	8003e38 <HAL_RCC_OscConfig+0xb0>
 8003e20:	4b84      	ldr	r3, [pc, #528]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a83      	ldr	r2, [pc, #524]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	4b81      	ldr	r3, [pc, #516]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a80      	ldr	r2, [pc, #512]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d013      	beq.n	8003e68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe f86e 	bl	8001f20 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e48:	f7fe f86a 	bl	8001f20 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e1fb      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b76      	ldr	r3, [pc, #472]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0xc0>
 8003e66:	e014      	b.n	8003e92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe f85a 	bl	8001f20 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fe f856 	bl	8001f20 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e1e7      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	4b6c      	ldr	r3, [pc, #432]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0xe8>
 8003e8e:	e000      	b.n	8003e92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d063      	beq.n	8003f66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e9e:	4b65      	ldr	r3, [pc, #404]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eaa:	4b62      	ldr	r3, [pc, #392]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d11c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eb6:	4b5f      	ldr	r3, [pc, #380]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d116      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec2:	4b5c      	ldr	r3, [pc, #368]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_RCC_OscConfig+0x152>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d001      	beq.n	8003eda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e1bb      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	4b56      	ldr	r3, [pc, #344]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4952      	ldr	r1, [pc, #328]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eee:	e03a      	b.n	8003f66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef8:	4b4f      	ldr	r3, [pc, #316]	; (8004038 <HAL_RCC_OscConfig+0x2b0>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fe f80f 	bl	8001f20 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f06:	f7fe f80b 	bl	8001f20 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e19c      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	4b46      	ldr	r3, [pc, #280]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f24:	4b43      	ldr	r3, [pc, #268]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4940      	ldr	r1, [pc, #256]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]
 8003f38:	e015      	b.n	8003f66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3a:	4b3f      	ldr	r3, [pc, #252]	; (8004038 <HAL_RCC_OscConfig+0x2b0>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fd ffee 	bl	8001f20 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f48:	f7fd ffea 	bl	8001f20 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e17b      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	4b36      	ldr	r3, [pc, #216]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d030      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d016      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7a:	4b30      	ldr	r3, [pc, #192]	; (800403c <HAL_RCC_OscConfig+0x2b4>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f80:	f7fd ffce 	bl	8001f20 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fd ffca 	bl	8001f20 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e15b      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	4b26      	ldr	r3, [pc, #152]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x200>
 8003fa6:	e015      	b.n	8003fd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa8:	4b24      	ldr	r3, [pc, #144]	; (800403c <HAL_RCC_OscConfig+0x2b4>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fae:	f7fd ffb7 	bl	8001f20 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb6:	f7fd ffb3 	bl	8001f20 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e144      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f0      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80a0 	beq.w	8004122 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	4a0e      	ldr	r2, [pc, #56]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004000:	6413      	str	r3, [r2, #64]	; 0x40
 8004002:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_OscConfig+0x2b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d121      	bne.n	8004062 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800401e:	4b08      	ldr	r3, [pc, #32]	; (8004040 <HAL_RCC_OscConfig+0x2b8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a07      	ldr	r2, [pc, #28]	; (8004040 <HAL_RCC_OscConfig+0x2b8>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402a:	f7fd ff79 	bl	8001f20 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	e011      	b.n	8004056 <HAL_RCC_OscConfig+0x2ce>
 8004032:	bf00      	nop
 8004034:	40023800 	.word	0x40023800
 8004038:	42470000 	.word	0x42470000
 800403c:	42470e80 	.word	0x42470e80
 8004040:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7fd ff6c 	bl	8001f20 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e0fd      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b81      	ldr	r3, [pc, #516]	; (800425c <HAL_RCC_OscConfig+0x4d4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d106      	bne.n	8004078 <HAL_RCC_OscConfig+0x2f0>
 800406a:	4b7d      	ldr	r3, [pc, #500]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	4a7c      	ldr	r2, [pc, #496]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	6713      	str	r3, [r2, #112]	; 0x70
 8004076:	e01c      	b.n	80040b2 <HAL_RCC_OscConfig+0x32a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b05      	cmp	r3, #5
 800407e:	d10c      	bne.n	800409a <HAL_RCC_OscConfig+0x312>
 8004080:	4b77      	ldr	r3, [pc, #476]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	4a76      	ldr	r2, [pc, #472]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	6713      	str	r3, [r2, #112]	; 0x70
 800408c:	4b74      	ldr	r3, [pc, #464]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004090:	4a73      	ldr	r2, [pc, #460]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6713      	str	r3, [r2, #112]	; 0x70
 8004098:	e00b      	b.n	80040b2 <HAL_RCC_OscConfig+0x32a>
 800409a:	4b71      	ldr	r3, [pc, #452]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a70      	ldr	r2, [pc, #448]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	4b6e      	ldr	r3, [pc, #440]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	4a6d      	ldr	r2, [pc, #436]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 80040ac:	f023 0304 	bic.w	r3, r3, #4
 80040b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d015      	beq.n	80040e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ba:	f7fd ff31 	bl	8001f20 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fd ff2d 	bl	8001f20 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e0bc      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d8:	4b61      	ldr	r3, [pc, #388]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ee      	beq.n	80040c2 <HAL_RCC_OscConfig+0x33a>
 80040e4:	e014      	b.n	8004110 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e6:	f7fd ff1b 	bl	8001f20 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ec:	e00a      	b.n	8004104 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7fd ff17 	bl	8001f20 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0a6      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004104:	4b56      	ldr	r3, [pc, #344]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ee      	bne.n	80040ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004116:	4b52      	ldr	r3, [pc, #328]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	4a51      	ldr	r2, [pc, #324]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 800411c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004120:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8092 	beq.w	8004250 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800412c:	4b4c      	ldr	r3, [pc, #304]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b08      	cmp	r3, #8
 8004136:	d05c      	beq.n	80041f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d141      	bne.n	80041c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004140:	4b48      	ldr	r3, [pc, #288]	; (8004264 <HAL_RCC_OscConfig+0x4dc>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004146:	f7fd feeb 	bl	8001f20 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414e:	f7fd fee7 	bl	8001f20 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e078      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004160:	4b3f      	ldr	r3, [pc, #252]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f0      	bne.n	800414e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69da      	ldr	r2, [r3, #28]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	019b      	lsls	r3, r3, #6
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	3b01      	subs	r3, #1
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	061b      	lsls	r3, r3, #24
 8004190:	4933      	ldr	r1, [pc, #204]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004196:	4b33      	ldr	r3, [pc, #204]	; (8004264 <HAL_RCC_OscConfig+0x4dc>)
 8004198:	2201      	movs	r2, #1
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fd fec0 	bl	8001f20 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fd febc 	bl	8001f20 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e04d      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x41c>
 80041c2:	e045      	b.n	8004250 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c4:	4b27      	ldr	r3, [pc, #156]	; (8004264 <HAL_RCC_OscConfig+0x4dc>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ca:	f7fd fea9 	bl	8001f20 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d2:	f7fd fea5 	bl	8001f20 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e036      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e4:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f0      	bne.n	80041d2 <HAL_RCC_OscConfig+0x44a>
 80041f0:	e02e      	b.n	8004250 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e029      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041fe:	4b18      	ldr	r3, [pc, #96]	; (8004260 <HAL_RCC_OscConfig+0x4d8>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	429a      	cmp	r2, r3
 8004210:	d11c      	bne.n	800424c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d115      	bne.n	800424c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004226:	4013      	ands	r3, r2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800422c:	4293      	cmp	r3, r2
 800422e:	d10d      	bne.n	800424c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d106      	bne.n	800424c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40007000 	.word	0x40007000
 8004260:	40023800 	.word	0x40023800
 8004264:	42470060 	.word	0x42470060

08004268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0cc      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800427c:	4b68      	ldr	r3, [pc, #416]	; (8004420 <HAL_RCC_ClockConfig+0x1b8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d90c      	bls.n	80042a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428a:	4b65      	ldr	r3, [pc, #404]	; (8004420 <HAL_RCC_ClockConfig+0x1b8>)
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004292:	4b63      	ldr	r3, [pc, #396]	; (8004420 <HAL_RCC_ClockConfig+0x1b8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0b8      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d020      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042bc:	4b59      	ldr	r3, [pc, #356]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	4a58      	ldr	r2, [pc, #352]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d4:	4b53      	ldr	r3, [pc, #332]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	4a52      	ldr	r2, [pc, #328]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e0:	4b50      	ldr	r3, [pc, #320]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	494d      	ldr	r1, [pc, #308]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d044      	beq.n	8004388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d107      	bne.n	8004316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	4b47      	ldr	r3, [pc, #284]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d119      	bne.n	8004346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e07f      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d003      	beq.n	8004326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004322:	2b03      	cmp	r3, #3
 8004324:	d107      	bne.n	8004336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004326:	4b3f      	ldr	r3, [pc, #252]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e06f      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004336:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e067      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004346:	4b37      	ldr	r3, [pc, #220]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f023 0203 	bic.w	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4934      	ldr	r1, [pc, #208]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004358:	f7fd fde2 	bl	8001f20 <HAL_GetTick>
 800435c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435e:	e00a      	b.n	8004376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004360:	f7fd fdde 	bl	8001f20 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	; 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e04f      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004376:	4b2b      	ldr	r3, [pc, #172]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 020c 	and.w	r2, r3, #12
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	429a      	cmp	r2, r3
 8004386:	d1eb      	bne.n	8004360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004388:	4b25      	ldr	r3, [pc, #148]	; (8004420 <HAL_RCC_ClockConfig+0x1b8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d20c      	bcs.n	80043b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004396:	4b22      	ldr	r3, [pc, #136]	; (8004420 <HAL_RCC_ClockConfig+0x1b8>)
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439e:	4b20      	ldr	r3, [pc, #128]	; (8004420 <HAL_RCC_ClockConfig+0x1b8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e032      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043bc:	4b19      	ldr	r3, [pc, #100]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4916      	ldr	r1, [pc, #88]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043da:	4b12      	ldr	r3, [pc, #72]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	490e      	ldr	r1, [pc, #56]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043ee:	f000 f82d 	bl	800444c <HAL_RCC_GetSysClockFreq>
 80043f2:	4601      	mov	r1, r0
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 8004400:	5cd3      	ldrb	r3, [r2, r3]
 8004402:	fa21 f303 	lsr.w	r3, r1, r3
 8004406:	4a09      	ldr	r2, [pc, #36]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800440a:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fd fd42 	bl	8001e98 <HAL_InitTick>

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40023c00 	.word	0x40023c00
 8004424:	40023800 	.word	0x40023800
 8004428:	08005ba4 	.word	0x08005ba4
 800442c:	20000008 	.word	0x20000008
 8004430:	2000000c 	.word	0x2000000c

08004434 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_RCC_EnableCSS+0x14>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]
}
 800443e:	bf00      	nop
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	4247004c 	.word	0x4247004c

0800444c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800444c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	2300      	movs	r3, #0
 800445c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004462:	4b63      	ldr	r3, [pc, #396]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b04      	cmp	r3, #4
 800446c:	d007      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0x32>
 800446e:	2b08      	cmp	r3, #8
 8004470:	d008      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x38>
 8004472:	2b00      	cmp	r3, #0
 8004474:	f040 80b4 	bne.w	80045e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004478:	4b5e      	ldr	r3, [pc, #376]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800447a:	60bb      	str	r3, [r7, #8]
       break;
 800447c:	e0b3      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800447e:	4b5e      	ldr	r3, [pc, #376]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004480:	60bb      	str	r3, [r7, #8]
      break;
 8004482:	e0b0      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004484:	4b5a      	ldr	r3, [pc, #360]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800448c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800448e:	4b58      	ldr	r3, [pc, #352]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d04a      	beq.n	8004530 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449a:	4b55      	ldr	r3, [pc, #340]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	f04f 0400 	mov.w	r4, #0
 80044a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	ea03 0501 	and.w	r5, r3, r1
 80044b0:	ea04 0602 	and.w	r6, r4, r2
 80044b4:	4629      	mov	r1, r5
 80044b6:	4632      	mov	r2, r6
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	f04f 0400 	mov.w	r4, #0
 80044c0:	0154      	lsls	r4, r2, #5
 80044c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044c6:	014b      	lsls	r3, r1, #5
 80044c8:	4619      	mov	r1, r3
 80044ca:	4622      	mov	r2, r4
 80044cc:	1b49      	subs	r1, r1, r5
 80044ce:	eb62 0206 	sbc.w	r2, r2, r6
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	f04f 0400 	mov.w	r4, #0
 80044da:	0194      	lsls	r4, r2, #6
 80044dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044e0:	018b      	lsls	r3, r1, #6
 80044e2:	1a5b      	subs	r3, r3, r1
 80044e4:	eb64 0402 	sbc.w	r4, r4, r2
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	00e2      	lsls	r2, r4, #3
 80044f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044f6:	00d9      	lsls	r1, r3, #3
 80044f8:	460b      	mov	r3, r1
 80044fa:	4614      	mov	r4, r2
 80044fc:	195b      	adds	r3, r3, r5
 80044fe:	eb44 0406 	adc.w	r4, r4, r6
 8004502:	f04f 0100 	mov.w	r1, #0
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	0262      	lsls	r2, r4, #9
 800450c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004510:	0259      	lsls	r1, r3, #9
 8004512:	460b      	mov	r3, r1
 8004514:	4614      	mov	r4, r2
 8004516:	4618      	mov	r0, r3
 8004518:	4621      	mov	r1, r4
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f04f 0400 	mov.w	r4, #0
 8004520:	461a      	mov	r2, r3
 8004522:	4623      	mov	r3, r4
 8004524:	f7fb fe50 	bl	80001c8 <__aeabi_uldivmod>
 8004528:	4603      	mov	r3, r0
 800452a:	460c      	mov	r4, r1
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	e049      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004530:	4b2f      	ldr	r3, [pc, #188]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	099b      	lsrs	r3, r3, #6
 8004536:	f04f 0400 	mov.w	r4, #0
 800453a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	ea03 0501 	and.w	r5, r3, r1
 8004546:	ea04 0602 	and.w	r6, r4, r2
 800454a:	4629      	mov	r1, r5
 800454c:	4632      	mov	r2, r6
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	f04f 0400 	mov.w	r4, #0
 8004556:	0154      	lsls	r4, r2, #5
 8004558:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800455c:	014b      	lsls	r3, r1, #5
 800455e:	4619      	mov	r1, r3
 8004560:	4622      	mov	r2, r4
 8004562:	1b49      	subs	r1, r1, r5
 8004564:	eb62 0206 	sbc.w	r2, r2, r6
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	f04f 0400 	mov.w	r4, #0
 8004570:	0194      	lsls	r4, r2, #6
 8004572:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004576:	018b      	lsls	r3, r1, #6
 8004578:	1a5b      	subs	r3, r3, r1
 800457a:	eb64 0402 	sbc.w	r4, r4, r2
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	00e2      	lsls	r2, r4, #3
 8004588:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800458c:	00d9      	lsls	r1, r3, #3
 800458e:	460b      	mov	r3, r1
 8004590:	4614      	mov	r4, r2
 8004592:	195b      	adds	r3, r3, r5
 8004594:	eb44 0406 	adc.w	r4, r4, r6
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	02a2      	lsls	r2, r4, #10
 80045a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045a6:	0299      	lsls	r1, r3, #10
 80045a8:	460b      	mov	r3, r1
 80045aa:	4614      	mov	r4, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	4621      	mov	r1, r4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f04f 0400 	mov.w	r4, #0
 80045b6:	461a      	mov	r2, r3
 80045b8:	4623      	mov	r3, r4
 80045ba:	f7fb fe05 	bl	80001c8 <__aeabi_uldivmod>
 80045be:	4603      	mov	r3, r0
 80045c0:	460c      	mov	r4, r1
 80045c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	3301      	adds	r3, #1
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	60bb      	str	r3, [r7, #8]
      break;
 80045de:	e002      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045e2:	60bb      	str	r3, [r7, #8]
      break;
 80045e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e6:	68bb      	ldr	r3, [r7, #8]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	00f42400 	.word	0x00f42400
 80045f8:	007a1200 	.word	0x007a1200

080045fc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004608:	2b80      	cmp	r3, #128	; 0x80
 800460a:	d104      	bne.n	8004616 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800460c:	f000 f80a 	bl	8004624 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004612:	2280      	movs	r2, #128	; 0x80
 8004614:	701a      	strb	r2, [r3, #0]
  }
}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40023800 	.word	0x40023800
 8004620:	4002380e 	.word	0x4002380e

08004624 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e01d      	b.n	8004680 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7fd fa7f 	bl	8001b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2202      	movs	r2, #2
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3304      	adds	r3, #4
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f000 fd0f 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d007      	beq.n	80046c2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e01d      	b.n	800471e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f815 	bl	8004726 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f000 fcc0 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2201      	movs	r2, #1
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f001 f93a 	bl	80059c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <HAL_TIM_PWM_Start+0x74>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_TIM_PWM_Start+0x2c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <HAL_TIM_PWM_Start+0x78>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <HAL_TIM_PWM_Start+0x30>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_TIM_PWM_Start+0x32>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004780:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b06      	cmp	r3, #6
 8004792:	d007      	beq.n	80047a4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40010000 	.word	0x40010000
 80047b4:	40010400 	.word	0x40010400

080047b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e01d      	b.n	8004806 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f815 	bl	800480e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f000 fc4c 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d841      	bhi.n	80048b8 <HAL_TIM_IC_Start_IT+0x94>
 8004834:	a201      	add	r2, pc, #4	; (adr r2, 800483c <HAL_TIM_IC_Start_IT+0x18>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	08004871 	.word	0x08004871
 8004840:	080048b9 	.word	0x080048b9
 8004844:	080048b9 	.word	0x080048b9
 8004848:	080048b9 	.word	0x080048b9
 800484c:	08004883 	.word	0x08004883
 8004850:	080048b9 	.word	0x080048b9
 8004854:	080048b9 	.word	0x080048b9
 8004858:	080048b9 	.word	0x080048b9
 800485c:	08004895 	.word	0x08004895
 8004860:	080048b9 	.word	0x080048b9
 8004864:	080048b9 	.word	0x080048b9
 8004868:	080048b9 	.word	0x080048b9
 800486c:	080048a7 	.word	0x080048a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0202 	orr.w	r2, r2, #2
 800487e:	60da      	str	r2, [r3, #12]
      break;
 8004880:	e01b      	b.n	80048ba <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0204 	orr.w	r2, r2, #4
 8004890:	60da      	str	r2, [r3, #12]
      break;
 8004892:	e012      	b.n	80048ba <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0208 	orr.w	r2, r2, #8
 80048a2:	60da      	str	r2, [r3, #12]
      break;
 80048a4:	e009      	b.n	80048ba <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0210 	orr.w	r2, r2, #16
 80048b4:	60da      	str	r2, [r3, #12]
      break;
 80048b6:	e000      	b.n	80048ba <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80048b8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	6839      	ldr	r1, [r7, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 f880 	bl	80059c8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b06      	cmp	r3, #6
 80048d8:	d007      	beq.n	80048ea <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b02      	cmp	r3, #2
 8004908:	d122      	bne.n	8004950 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b02      	cmp	r3, #2
 8004916:	d11b      	bne.n	8004950 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0202 	mvn.w	r2, #2
 8004920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fb ff06 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 800493c:	e005      	b.n	800494a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fb8a 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fb91 	bl	800506c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b04      	cmp	r3, #4
 800495c:	d122      	bne.n	80049a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b04      	cmp	r3, #4
 800496a:	d11b      	bne.n	80049a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0204 	mvn.w	r2, #4
 8004974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fb fedc 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 8004990:	e005      	b.n	800499e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fb60 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fb67 	bl	800506c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d122      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d11b      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0208 	mvn.w	r2, #8
 80049c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2204      	movs	r2, #4
 80049ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fb feb2 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 80049e4:	e005      	b.n	80049f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fb36 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fb3d 	bl	800506c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	2b10      	cmp	r3, #16
 8004a04:	d122      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d11b      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0210 	mvn.w	r2, #16
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2208      	movs	r2, #8
 8004a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fb fe88 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fb0c 	bl	8005058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fb13 	bl	800506c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d10e      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d107      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0201 	mvn.w	r2, #1
 8004a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fae6 	bl	8005044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b80      	cmp	r3, #128	; 0x80
 8004a84:	d10e      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a90:	2b80      	cmp	r3, #128	; 0x80
 8004a92:	d107      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f001 f83e 	bl	8005b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b40      	cmp	r3, #64	; 0x40
 8004ab0:	d10e      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d107      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fad8 	bl	8005080 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b20      	cmp	r3, #32
 8004adc:	d10e      	bne.n	8004afc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d107      	bne.n	8004afc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0220 	mvn.w	r2, #32
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f001 f808 	bl	8005b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004afc:	bf00      	nop
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_TIM_IC_ConfigChannel+0x1a>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e08a      	b.n	8004c34 <HAL_TIM_IC_ConfigChannel+0x130>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d11b      	bne.n	8004b6c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6818      	ldr	r0, [r3, #0]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6819      	ldr	r1, [r3, #0]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f000 fd7c 	bl	8005640 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 020c 	bic.w	r2, r2, #12
 8004b56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6999      	ldr	r1, [r3, #24]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	619a      	str	r2, [r3, #24]
 8004b6a:	e05a      	b.n	8004c22 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d11c      	bne.n	8004bac <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6819      	ldr	r1, [r3, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f000 fe00 	bl	8005786 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699a      	ldr	r2, [r3, #24]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6999      	ldr	r1, [r3, #24]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	021a      	lsls	r2, r3, #8
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	619a      	str	r2, [r3, #24]
 8004baa:	e03a      	b.n	8004c22 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d11b      	bne.n	8004bea <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	6819      	ldr	r1, [r3, #0]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f000 fe4d 	bl	8005860 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 020c 	bic.w	r2, r2, #12
 8004bd4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69d9      	ldr	r1, [r3, #28]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	61da      	str	r2, [r3, #28]
 8004be8:	e01b      	b.n	8004c22 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	6819      	ldr	r1, [r3, #0]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f000 fe6d 	bl	80058d8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c0c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69d9      	ldr	r1, [r3, #28]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	021a      	lsls	r2, r3, #8
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e0b4      	b.n	8004dc0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b0c      	cmp	r3, #12
 8004c6a:	f200 809f 	bhi.w	8004dac <HAL_TIM_PWM_ConfigChannel+0x170>
 8004c6e:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004ca9 	.word	0x08004ca9
 8004c78:	08004dad 	.word	0x08004dad
 8004c7c:	08004dad 	.word	0x08004dad
 8004c80:	08004dad 	.word	0x08004dad
 8004c84:	08004ce9 	.word	0x08004ce9
 8004c88:	08004dad 	.word	0x08004dad
 8004c8c:	08004dad 	.word	0x08004dad
 8004c90:	08004dad 	.word	0x08004dad
 8004c94:	08004d2b 	.word	0x08004d2b
 8004c98:	08004dad 	.word	0x08004dad
 8004c9c:	08004dad 	.word	0x08004dad
 8004ca0:	08004dad 	.word	0x08004dad
 8004ca4:	08004d6b 	.word	0x08004d6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fa90 	bl	80051d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0208 	orr.w	r2, r2, #8
 8004cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0204 	bic.w	r2, r2, #4
 8004cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	619a      	str	r2, [r3, #24]
      break;
 8004ce6:	e062      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fae0 	bl	80052b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6999      	ldr	r1, [r3, #24]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	021a      	lsls	r2, r3, #8
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	619a      	str	r2, [r3, #24]
      break;
 8004d28:	e041      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fb35 	bl	80053a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0208 	orr.w	r2, r2, #8
 8004d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0204 	bic.w	r2, r2, #4
 8004d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69d9      	ldr	r1, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	61da      	str	r2, [r3, #28]
      break;
 8004d68:	e021      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fb89 	bl	8005488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69d9      	ldr	r1, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	021a      	lsls	r2, r3, #8
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	61da      	str	r2, [r3, #28]
      break;
 8004daa:	e000      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004dac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIM_ConfigClockSource+0x18>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e0a6      	b.n	8004f2e <HAL_TIM_ConfigClockSource+0x166>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d067      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0x120>
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d80b      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x6c>
 8004e1c:	2b10      	cmp	r3, #16
 8004e1e:	d073      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x140>
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d802      	bhi.n	8004e2a <HAL_TIM_ConfigClockSource+0x62>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d06f      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e28:	e078      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d06c      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x140>
 8004e2e:	2b30      	cmp	r3, #48	; 0x30
 8004e30:	d06a      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e32:	e073      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e34:	2b70      	cmp	r3, #112	; 0x70
 8004e36:	d00d      	beq.n	8004e54 <HAL_TIM_ConfigClockSource+0x8c>
 8004e38:	2b70      	cmp	r3, #112	; 0x70
 8004e3a:	d804      	bhi.n	8004e46 <HAL_TIM_ConfigClockSource+0x7e>
 8004e3c:	2b50      	cmp	r3, #80	; 0x50
 8004e3e:	d033      	beq.n	8004ea8 <HAL_TIM_ConfigClockSource+0xe0>
 8004e40:	2b60      	cmp	r3, #96	; 0x60
 8004e42:	d041      	beq.n	8004ec8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e44:	e06a      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4a:	d066      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x152>
 8004e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e50:	d017      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e52:	e063      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6899      	ldr	r1, [r3, #8]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f000 fd90 	bl	8005988 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	609a      	str	r2, [r3, #8]
      break;
 8004e80:	e04c      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6899      	ldr	r1, [r3, #8]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f000 fd79 	bl	8005988 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ea4:	609a      	str	r2, [r3, #8]
      break;
 8004ea6:	e039      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f000 fc37 	bl	8005728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2150      	movs	r1, #80	; 0x50
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fd46 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 8004ec6:	e029      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	6859      	ldr	r1, [r3, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f000 fc93 	bl	8005800 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2160      	movs	r1, #96	; 0x60
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fd36 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 8004ee6:	e019      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6859      	ldr	r1, [r3, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f000 fc17 	bl	8005728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2140      	movs	r1, #64	; 0x40
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fd26 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 8004f06:	e009      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f000 fd1d 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 8004f18:	e000      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_TIM_SlaveConfigSynchro+0x18>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e031      	b.n	8004fb2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004f5e:	6839      	ldr	r1, [r7, #0]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fae7 	bl	8005534 <TIM_SlaveTimer_SetConfig>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e018      	b.n	8004fb2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f8e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f9e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b0c      	cmp	r3, #12
 8004fce:	d831      	bhi.n	8005034 <HAL_TIM_ReadCapturedValue+0x78>
 8004fd0:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	0800500d 	.word	0x0800500d
 8004fdc:	08005035 	.word	0x08005035
 8004fe0:	08005035 	.word	0x08005035
 8004fe4:	08005035 	.word	0x08005035
 8004fe8:	08005017 	.word	0x08005017
 8004fec:	08005035 	.word	0x08005035
 8004ff0:	08005035 	.word	0x08005035
 8004ff4:	08005035 	.word	0x08005035
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005035 	.word	0x08005035
 8005000:	08005035 	.word	0x08005035
 8005004:	08005035 	.word	0x08005035
 8005008:	0800502b 	.word	0x0800502b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	60fb      	str	r3, [r7, #12]

      break;
 8005014:	e00f      	b.n	8005036 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	60fb      	str	r3, [r7, #12]

      break;
 800501e:	e00a      	b.n	8005036 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005026:	60fb      	str	r3, [r7, #12]

      break;
 8005028:	e005      	b.n	8005036 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	60fb      	str	r3, [r7, #12]

      break;
 8005032:	e000      	b.n	8005036 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005034:	bf00      	nop
  }

  return tmpreg;
 8005036:	68fb      	ldr	r3, [r7, #12]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a40      	ldr	r2, [pc, #256]	; (80051a8 <TIM_Base_SetConfig+0x114>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d013      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b2:	d00f      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3d      	ldr	r2, [pc, #244]	; (80051ac <TIM_Base_SetConfig+0x118>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00b      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3c      	ldr	r2, [pc, #240]	; (80051b0 <TIM_Base_SetConfig+0x11c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d007      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3b      	ldr	r2, [pc, #236]	; (80051b4 <TIM_Base_SetConfig+0x120>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3a      	ldr	r2, [pc, #232]	; (80051b8 <TIM_Base_SetConfig+0x124>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d108      	bne.n	80050e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2f      	ldr	r2, [pc, #188]	; (80051a8 <TIM_Base_SetConfig+0x114>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d02b      	beq.n	8005146 <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f4:	d027      	beq.n	8005146 <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2c      	ldr	r2, [pc, #176]	; (80051ac <TIM_Base_SetConfig+0x118>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d023      	beq.n	8005146 <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2b      	ldr	r2, [pc, #172]	; (80051b0 <TIM_Base_SetConfig+0x11c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01f      	beq.n	8005146 <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <TIM_Base_SetConfig+0x120>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01b      	beq.n	8005146 <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <TIM_Base_SetConfig+0x124>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d017      	beq.n	8005146 <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a28      	ldr	r2, [pc, #160]	; (80051bc <TIM_Base_SetConfig+0x128>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a27      	ldr	r2, [pc, #156]	; (80051c0 <TIM_Base_SetConfig+0x12c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00f      	beq.n	8005146 <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a26      	ldr	r2, [pc, #152]	; (80051c4 <TIM_Base_SetConfig+0x130>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00b      	beq.n	8005146 <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a25      	ldr	r2, [pc, #148]	; (80051c8 <TIM_Base_SetConfig+0x134>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d007      	beq.n	8005146 <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a24      	ldr	r2, [pc, #144]	; (80051cc <TIM_Base_SetConfig+0x138>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a23      	ldr	r2, [pc, #140]	; (80051d0 <TIM_Base_SetConfig+0x13c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d108      	bne.n	8005158 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <TIM_Base_SetConfig+0x114>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a0c      	ldr	r2, [pc, #48]	; (80051b8 <TIM_Base_SetConfig+0x124>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d103      	bne.n	8005194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	615a      	str	r2, [r3, #20]
}
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40010000 	.word	0x40010000
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40010400 	.word	0x40010400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800
 80051c8:	40001800 	.word	0x40001800
 80051cc:	40001c00 	.word	0x40001c00
 80051d0:	40002000 	.word	0x40002000

080051d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f023 0201 	bic.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0303 	bic.w	r3, r3, #3
 800520a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f023 0302 	bic.w	r3, r3, #2
 800521c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a20      	ldr	r2, [pc, #128]	; (80052ac <TIM_OC1_SetConfig+0xd8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_OC1_SetConfig+0x64>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1f      	ldr	r2, [pc, #124]	; (80052b0 <TIM_OC1_SetConfig+0xdc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d10c      	bne.n	8005252 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0308 	bic.w	r3, r3, #8
 800523e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 0304 	bic.w	r3, r3, #4
 8005250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a15      	ldr	r2, [pc, #84]	; (80052ac <TIM_OC1_SetConfig+0xd8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d003      	beq.n	8005262 <TIM_OC1_SetConfig+0x8e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <TIM_OC1_SetConfig+0xdc>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d111      	bne.n	8005286 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	621a      	str	r2, [r3, #32]
}
 80052a0:	bf00      	nop
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	40010000 	.word	0x40010000
 80052b0:	40010400 	.word	0x40010400

080052b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f023 0210 	bic.w	r2, r3, #16
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f023 0320 	bic.w	r3, r3, #32
 80052fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a22      	ldr	r2, [pc, #136]	; (8005398 <TIM_OC2_SetConfig+0xe4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_OC2_SetConfig+0x68>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a21      	ldr	r2, [pc, #132]	; (800539c <TIM_OC2_SetConfig+0xe8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d10d      	bne.n	8005338 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005336:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a17      	ldr	r2, [pc, #92]	; (8005398 <TIM_OC2_SetConfig+0xe4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_OC2_SetConfig+0x94>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a16      	ldr	r2, [pc, #88]	; (800539c <TIM_OC2_SetConfig+0xe8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d113      	bne.n	8005370 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800534e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	621a      	str	r2, [r3, #32]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40010000 	.word	0x40010000
 800539c:	40010400 	.word	0x40010400

080053a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0303 	bic.w	r3, r3, #3
 80053d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a21      	ldr	r2, [pc, #132]	; (8005480 <TIM_OC3_SetConfig+0xe0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d003      	beq.n	8005406 <TIM_OC3_SetConfig+0x66>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a20      	ldr	r2, [pc, #128]	; (8005484 <TIM_OC3_SetConfig+0xe4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d10d      	bne.n	8005422 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800540c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a16      	ldr	r2, [pc, #88]	; (8005480 <TIM_OC3_SetConfig+0xe0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d003      	beq.n	8005432 <TIM_OC3_SetConfig+0x92>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a15      	ldr	r2, [pc, #84]	; (8005484 <TIM_OC3_SetConfig+0xe4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d113      	bne.n	800545a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4313      	orrs	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	621a      	str	r2, [r3, #32]
}
 8005474:	bf00      	nop
 8005476:	371c      	adds	r7, #28
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	40010000 	.word	0x40010000
 8005484:	40010400 	.word	0x40010400

08005488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	031b      	lsls	r3, r3, #12
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a12      	ldr	r2, [pc, #72]	; (800552c <TIM_OC4_SetConfig+0xa4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_OC4_SetConfig+0x68>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a11      	ldr	r2, [pc, #68]	; (8005530 <TIM_OC4_SetConfig+0xa8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d109      	bne.n	8005504 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40010400 	.word	0x40010400

08005534 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0307 	bic.w	r3, r3, #7
 800555e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b30      	cmp	r3, #48	; 0x30
 8005578:	d05c      	beq.n	8005634 <TIM_SlaveTimer_SetConfig+0x100>
 800557a:	2b30      	cmp	r3, #48	; 0x30
 800557c:	d806      	bhi.n	800558c <TIM_SlaveTimer_SetConfig+0x58>
 800557e:	2b10      	cmp	r3, #16
 8005580:	d058      	beq.n	8005634 <TIM_SlaveTimer_SetConfig+0x100>
 8005582:	2b20      	cmp	r3, #32
 8005584:	d056      	beq.n	8005634 <TIM_SlaveTimer_SetConfig+0x100>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d054      	beq.n	8005634 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800558a:	e054      	b.n	8005636 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800558c:	2b50      	cmp	r3, #80	; 0x50
 800558e:	d03d      	beq.n	800560c <TIM_SlaveTimer_SetConfig+0xd8>
 8005590:	2b50      	cmp	r3, #80	; 0x50
 8005592:	d802      	bhi.n	800559a <TIM_SlaveTimer_SetConfig+0x66>
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d010      	beq.n	80055ba <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8005598:	e04d      	b.n	8005636 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800559a:	2b60      	cmp	r3, #96	; 0x60
 800559c:	d040      	beq.n	8005620 <TIM_SlaveTimer_SetConfig+0xec>
 800559e:	2b70      	cmp	r3, #112	; 0x70
 80055a0:	d000      	beq.n	80055a4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80055a2:	e048      	b.n	8005636 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	68d9      	ldr	r1, [r3, #12]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f000 f9e8 	bl	8005988 <TIM_ETR_SetConfig>
      break;
 80055b8:	e03d      	b.n	8005636 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d101      	bne.n	80055c6 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e038      	b.n	8005638 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0201 	bic.w	r2, r2, #1
 80055dc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ec:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	621a      	str	r2, [r3, #32]
      break;
 800560a:	e014      	b.n	8005636 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6899      	ldr	r1, [r3, #8]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	461a      	mov	r2, r3
 800561a:	f000 f885 	bl	8005728 <TIM_TI1_ConfigInputStage>
      break;
 800561e:	e00a      	b.n	8005636 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6899      	ldr	r1, [r3, #8]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	461a      	mov	r2, r3
 800562e:	f000 f8e7 	bl	8005800 <TIM_TI2_ConfigInputStage>
      break;
 8005632:	e000      	b.n	8005636 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8005634:	bf00      	nop
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f023 0201 	bic.w	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4a28      	ldr	r2, [pc, #160]	; (800570c <TIM_TI1_SetConfig+0xcc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01b      	beq.n	80056a6 <TIM_TI1_SetConfig+0x66>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005674:	d017      	beq.n	80056a6 <TIM_TI1_SetConfig+0x66>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4a25      	ldr	r2, [pc, #148]	; (8005710 <TIM_TI1_SetConfig+0xd0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <TIM_TI1_SetConfig+0x66>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a24      	ldr	r2, [pc, #144]	; (8005714 <TIM_TI1_SetConfig+0xd4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00f      	beq.n	80056a6 <TIM_TI1_SetConfig+0x66>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a23      	ldr	r2, [pc, #140]	; (8005718 <TIM_TI1_SetConfig+0xd8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00b      	beq.n	80056a6 <TIM_TI1_SetConfig+0x66>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4a22      	ldr	r2, [pc, #136]	; (800571c <TIM_TI1_SetConfig+0xdc>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d007      	beq.n	80056a6 <TIM_TI1_SetConfig+0x66>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a21      	ldr	r2, [pc, #132]	; (8005720 <TIM_TI1_SetConfig+0xe0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d003      	beq.n	80056a6 <TIM_TI1_SetConfig+0x66>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4a20      	ldr	r2, [pc, #128]	; (8005724 <TIM_TI1_SetConfig+0xe4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d101      	bne.n	80056aa <TIM_TI1_SetConfig+0x6a>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <TIM_TI1_SetConfig+0x6c>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	e003      	b.n	80056ca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f023 030a 	bic.w	r3, r3, #10
 80056e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f003 030a 	and.w	r3, r3, #10
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40010000 	.word	0x40010000
 8005710:	40000400 	.word	0x40000400
 8005714:	40000800 	.word	0x40000800
 8005718:	40000c00 	.word	0x40000c00
 800571c:	40010400 	.word	0x40010400
 8005720:	40014000 	.word	0x40014000
 8005724:	40001800 	.word	0x40001800

08005728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f023 0201 	bic.w	r2, r3, #1
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f023 030a 	bic.w	r3, r3, #10
 8005764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	621a      	str	r2, [r3, #32]
}
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005786:	b480      	push	{r7}
 8005788:	b087      	sub	sp, #28
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f023 0210 	bic.w	r2, r3, #16
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	031b      	lsls	r3, r3, #12
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	621a      	str	r2, [r3, #32]
}
 80057f4:	bf00      	nop
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f023 0210 	bic.w	r2, r3, #16
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800582a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	031b      	lsls	r3, r3, #12
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800583c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	621a      	str	r2, [r3, #32]
}
 8005854:	bf00      	nop
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f023 0303 	bic.w	r3, r3, #3
 800588c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800589c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80058b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005904:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005916:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	031b      	lsls	r3, r3, #12
 800591c:	b29b      	uxth	r3, r3
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800592a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	031b      	lsls	r3, r3, #12
 8005930:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	621a      	str	r2, [r3, #32]
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005952:	b480      	push	{r7}
 8005954:	b085      	sub	sp, #20
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	f043 0307 	orr.w	r3, r3, #7
 8005974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	609a      	str	r2, [r3, #8]
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	021a      	lsls	r2, r3, #8
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	609a      	str	r2, [r3, #8]
}
 80059bc:	bf00      	nop
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	2201      	movs	r2, #1
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1a      	ldr	r2, [r3, #32]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	43db      	mvns	r3, r3
 80059ea:	401a      	ands	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a1a      	ldr	r2, [r3, #32]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005a00:	431a      	orrs	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e05a      	b.n	8005ae2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a21      	ldr	r2, [pc, #132]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d022      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a78:	d01d      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d018      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1b      	ldr	r2, [pc, #108]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1a      	ldr	r2, [pc, #104]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00e      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d009      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a17      	ldr	r2, [pc, #92]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d004      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a15      	ldr	r2, [pc, #84]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d10c      	bne.n	8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40010000 	.word	0x40010000
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40000c00 	.word	0x40000c00
 8005b00:	40010400 	.word	0x40010400
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40001800 	.word	0x40001800

08005b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <__libc_init_array>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	4e0d      	ldr	r6, [pc, #52]	; (8005b6c <__libc_init_array+0x38>)
 8005b38:	4c0d      	ldr	r4, [pc, #52]	; (8005b70 <__libc_init_array+0x3c>)
 8005b3a:	1ba4      	subs	r4, r4, r6
 8005b3c:	10a4      	asrs	r4, r4, #2
 8005b3e:	2500      	movs	r5, #0
 8005b40:	42a5      	cmp	r5, r4
 8005b42:	d109      	bne.n	8005b58 <__libc_init_array+0x24>
 8005b44:	4e0b      	ldr	r6, [pc, #44]	; (8005b74 <__libc_init_array+0x40>)
 8005b46:	4c0c      	ldr	r4, [pc, #48]	; (8005b78 <__libc_init_array+0x44>)
 8005b48:	f000 f820 	bl	8005b8c <_init>
 8005b4c:	1ba4      	subs	r4, r4, r6
 8005b4e:	10a4      	asrs	r4, r4, #2
 8005b50:	2500      	movs	r5, #0
 8005b52:	42a5      	cmp	r5, r4
 8005b54:	d105      	bne.n	8005b62 <__libc_init_array+0x2e>
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b5c:	4798      	blx	r3
 8005b5e:	3501      	adds	r5, #1
 8005b60:	e7ee      	b.n	8005b40 <__libc_init_array+0xc>
 8005b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b66:	4798      	blx	r3
 8005b68:	3501      	adds	r5, #1
 8005b6a:	e7f2      	b.n	8005b52 <__libc_init_array+0x1e>
 8005b6c:	08005bc4 	.word	0x08005bc4
 8005b70:	08005bc4 	.word	0x08005bc4
 8005b74:	08005bc4 	.word	0x08005bc4
 8005b78:	08005bc8 	.word	0x08005bc8

08005b7c <memset>:
 8005b7c:	4402      	add	r2, r0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d100      	bne.n	8005b86 <memset+0xa>
 8005b84:	4770      	bx	lr
 8005b86:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8a:	e7f9      	b.n	8005b80 <memset+0x4>

08005b8c <_init>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr

08005b98 <_fini>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	bf00      	nop
 8005b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9e:	bc08      	pop	{r3}
 8005ba0:	469e      	mov	lr, r3
 8005ba2:	4770      	bx	lr
