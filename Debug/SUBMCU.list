
SUBMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007450  08007450  00017450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007470  08007470  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007478  08007478  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007478  08007478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800747c  0800747c  0001747c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  20000018  08007498  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  08007498  00020848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5dd  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e89  00000000  00000000  0003b625  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001460  00000000  00000000  0003f4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001258  00000000  00000000  00040910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023bf8  00000000  00000000  00041b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014bbb  00000000  00000000  00065760  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca4d3  00000000  00000000  0007a31b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001447ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ac  00000000  00000000  0014486c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007438 	.word	0x08007438

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08007438 	.word	0x08007438

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <GAS_Can_txSetting>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan);
//void GAS_Can_recieveMessage(CAN_HandleTypeDef *hcan);

void GAS_Can_txSetting(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	/*
	 * CAN tx set function
	 * set ID, IDE, DLC
	 */
	canTxHeader.ExtId = STM32_ID2;
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <GAS_Can_txSetting+0x28>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <GAS_Can_txSetting+0x2c>)
 80004d2:	6053      	str	r3, [r2, #4]
	canTxHeader.IDE	= CAN_ID_EXT;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <GAS_Can_txSetting+0x2c>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	609a      	str	r2, [r3, #8]
	canTxHeader.RTR	= CAN_RTR_DATA;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <GAS_Can_txSetting+0x2c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]
	canTxHeader.DLC	=	8;
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <GAS_Can_txSetting+0x2c>)
 80004e2:	2208      	movs	r2, #8
 80004e4:	611a      	str	r2, [r3, #16]


}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	20000004 	.word	0x20000004
 80004f4:	20000060 	.word	0x20000060

080004f8 <GAS_Can_rxSetting>:

void GAS_Can_rxSetting(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	 * CAN rx set function
	 * IdHigh, IdLow for each 16bit in 29bit ID
	 * Set different FIFO and FilterBank
	 *
	 */
	sFilterConfig.FilterIdHigh = (STM32_ID<<3)>>16;				/*first 2byte in 29bit (shift need to IED,RTR,0)*/
 80004fc:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <GAS_Can_rxSetting+0xbc>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	0c1b      	lsrs	r3, r3, #16
 8000504:	4a2c      	ldr	r2, [pc, #176]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000506:	6013      	str	r3, [r2, #0]
	sFilterConfig.FilterIdLow = (0xffff & (STM32_ID << 3)) | (1<<2);	/*second 2byte in 29bit + IDE (shift need to IED,RTR,0/)*/
 8000508:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <GAS_Can_rxSetting+0xbc>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	00db      	lsls	r3, r3, #3
 800050e:	b29b      	uxth	r3, r3
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	4a28      	ldr	r2, [pc, #160]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000516:	6053      	str	r3, [r2, #4]
	sFilterConfig.FilterMaskIdHigh = (0x0fffffff<<3)>>16;
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 800051a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800051e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow =(0xffff & (0x0FFFFFFF << 3)) | (1<<2);
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000522:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8000526:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000528:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank = 0;
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000530:	2200      	movs	r2, #0
 8000532:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800053a:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 800053c:	2201      	movs	r2, #1
 800053e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000540:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000542:	2201      	movs	r2, #1
 8000544:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000548:	220e      	movs	r2, #14
 800054a:	625a      	str	r2, [r3, #36]	; 0x24

	 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 800054c:	491a      	ldr	r1, [pc, #104]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 800054e:	481b      	ldr	r0, [pc, #108]	; (80005bc <GAS_Can_rxSetting+0xc4>)
 8000550:	f002 fa46 	bl	80029e0 <HAL_CAN_ConfigFilter>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <GAS_Can_rxSetting+0x66>
	  {
	    /* Filter configuration Error */
	    Error_Handler();
 800055a:	f001 f80d 	bl	8001578 <Error_Handler>
	  }

	 sFilterConfig2.FilterIdHigh = 0x0000;
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
	 sFilterConfig2.FilterIdLow = (0xffff & (0x0237 << 3)) | (1<<2);
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000566:	f241 12bc 	movw	r2, #4540	; 0x11bc
 800056a:	605a      	str	r2, [r3, #4]
	 sFilterConfig2.FilterMaskIdHigh = 0x0000;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
 	 sFilterConfig2.FilterMaskIdLow = (0xffff & (0x0237 << 3)) | (1<<2);
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000574:	f241 12bc 	movw	r2, #4540	; 0x11bc
 8000578:	60da      	str	r2, [r3, #12]
	 sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO1;
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 800057c:	2201      	movs	r2, #1
 800057e:	611a      	str	r2, [r3, #16]
	 sFilterConfig2.FilterBank = 1;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000582:	2201      	movs	r2, #1
 8000584:	615a      	str	r2, [r3, #20]
	 sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
	 sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 800058e:	2201      	movs	r2, #1
 8000590:	61da      	str	r2, [r3, #28]
	 sFilterConfig2.FilterActivation = ENABLE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000594:	2201      	movs	r2, #1
 8000596:	621a      	str	r2, [r3, #32]
	 sFilterConfig2.SlaveStartFilterBank = 15;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 800059a:	220f      	movs	r2, #15
 800059c:	625a      	str	r2, [r3, #36]	; 0x24

	 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 800059e:	4908      	ldr	r1, [pc, #32]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <GAS_Can_rxSetting+0xc4>)
 80005a2:	f002 fa1d 	bl	80029e0 <HAL_CAN_ConfigFilter>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <GAS_Can_rxSetting+0xb8>
	 {
	     /* Filter configuration Error */
	     Error_Handler();
 80005ac:	f000 ffe4 	bl	8001578 <Error_Handler>
	 }
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000038 	.word	0x20000038
 80005bc:	200002f8 	.word	0x200002f8
 80005c0:	200000b8 	.word	0x200000b8

080005c4 <GAS_Can_init>:

void GAS_Can_init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	/*
	 * GAS_CAN_init
	 * ActiveNotification for Rx message pending
	 */
	GAS_Can_txSetting();
 80005c8:	f7ff ff7e 	bl	80004c8 <GAS_Can_txSetting>
	GAS_Can_rxSetting();
 80005cc:	f7ff ff94 	bl	80004f8 <GAS_Can_rxSetting>
	HAL_CAN_Start(&hcan2);
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <GAS_Can_init+0x3c>)
 80005d2:	f002 fae5 	bl	8002ba0 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005d6:	2102      	movs	r1, #2
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <GAS_Can_init+0x3c>)
 80005da:	f002 fc37 	bl	8002e4c <HAL_CAN_ActivateNotification>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <GAS_Can_init+0x24>
	{
	  Error_Handler();
 80005e4:	f000 ffc8 	bl	8001578 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80005e8:	2110      	movs	r1, #16
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <GAS_Can_init+0x3c>)
 80005ec:	f002 fc2e 	bl	8002e4c <HAL_CAN_ActivateNotification>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <GAS_Can_init+0x36>
	{
	  Error_Handler();
 80005f6:	f000 ffbf 	bl	8001578 <Error_Handler>
	}


}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200002f8 	.word	0x200002f8

08000604 <HAL_CAN_RxFifo0MsgPendingCallback>:
}



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	/*
	 * CAN recieve data interrupt function
	 * Check Instance then recieve data in stm32_2.RxData
	 */
	if(hcan->Instance == CAN2)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d105      	bne.n	8000622 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, stm32_2.RxData);
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800061a:	2100      	movs	r1, #0
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f002 fb03 	bl	8002c28 <HAL_CAN_GetRxMessage>

	}
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40006800 	.word	0x40006800
 8000630:	200000b0 	.word	0x200000b0
 8000634:	20000094 	.word	0x20000094

08000638 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	/*
	* CAN recieve data interrupt function
	* Check Instance then recieve data in stm32_2.RxData
	*/
	if(hcan->Instance == CAN2)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d105      	bne.n	8000656 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &canRxHeader, TC237.RxData);
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800064e:	2101      	movs	r1, #1
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f002 fae9 	bl	8002c28 <HAL_CAN_GetRxMessage>

	}
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40006800 	.word	0x40006800
 8000664:	20000080 	.word	0x20000080
 8000668:	20000094 	.word	0x20000094

0800066c <GAS_PWM_inputInit>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);
void GAS_PWM_changeOutput_ch1(uint16_t input);


void GAS_PWM_inputInit(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 8000670:	2100      	movs	r1, #0
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <GAS_PWM_inputInit+0x18>)
 8000674:	f004 fbd0 	bl	8004e18 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8000678:	2104      	movs	r1, #4
 800067a:	4802      	ldr	r0, [pc, #8]	; (8000684 <GAS_PWM_inputInit+0x18>)
 800067c:	f004 fbcc 	bl	8004e18 <HAL_TIM_IC_Start_IT>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000033c 	.word	0x2000033c

08000688 <GAS_PWM_outputInit>:

void GAS_PWM_outputInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800068c:	2100      	movs	r1, #0
 800068e:	4808      	ldr	r0, [pc, #32]	; (80006b0 <GAS_PWM_outputInit+0x28>)
 8000690:	f004 fb4e 	bl	8004d30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000694:	2104      	movs	r1, #4
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <GAS_PWM_outputInit+0x28>)
 8000698:	f004 fb4a 	bl	8004d30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800069c:	2108      	movs	r1, #8
 800069e:	4804      	ldr	r0, [pc, #16]	; (80006b0 <GAS_PWM_outputInit+0x28>)
 80006a0:	f004 fb46 	bl	8004d30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006a4:	210c      	movs	r1, #12
 80006a6:	4802      	ldr	r0, [pc, #8]	; (80006b0 <GAS_PWM_outputInit+0x28>)
 80006a8:	f004 fb42 	bl	8004d30 <HAL_TIM_PWM_Start>

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200003bc 	.word	0x200003bc

080006b4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	/*
	 * For PWM input function
	 * One PWM input per one htim channel(because of TIM counter)
	 * Period, width, duty cycle, frequency can be calculated.
	 */
	if(htim ->Instance == TIM8)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x84>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d133      	bne.n	800072e <HAL_TIM_IC_CaptureCallback+0x7a>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7f1b      	ldrb	r3, [r3, #28]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d10e      	bne.n	80006ec <HAL_TIM_IC_CaptureCallback+0x38>
		{
			pwmIn1.RisingEdgeValue = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f004 ff6d 	bl	80055b0 <HAL_TIM_ReadCapturedValue>
 80006d6:	4602      	mov	r2, r0
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <HAL_TIM_IC_CaptureCallback+0x88>)
 80006da:	601a      	str	r2, [r3, #0]
			TIM8->CNT = 0;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x84>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
			pwmIn1.Period=pwmIn1.RisingEdgeValue;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_TIM_IC_CaptureCallback+0x88>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <HAL_TIM_IC_CaptureCallback+0x88>)
 80006e8:	6093      	str	r3, [r2, #8]
			pwmIn1.Width=pwmIn1.FallingEdgeValue;
			pwmIn1.DutyCycle = 100*pwmIn1.Width/pwmIn1.Period;
			pwmIn1.Frequency= 1000000/pwmIn1.Period; //1sec=10^6us
		}
	}
}
 80006ea:	e020      	b.n	800072e <HAL_TIM_IC_CaptureCallback+0x7a>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	7f1b      	ldrb	r3, [r3, #28]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d11c      	bne.n	800072e <HAL_TIM_IC_CaptureCallback+0x7a>
			pwmIn1.FallingEdgeValue=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80006f4:	2104      	movs	r1, #4
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f004 ff5a 	bl	80055b0 <HAL_TIM_ReadCapturedValue>
 80006fc:	4602      	mov	r2, r0
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000700:	605a      	str	r2, [r3, #4]
			pwmIn1.Width=pwmIn1.FallingEdgeValue;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	4a0d      	ldr	r2, [pc, #52]	; (800073c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000708:	60d3      	str	r3, [r2, #12]
			pwmIn1.DutyCycle = 100*pwmIn1.Width/pwmIn1.Period;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <HAL_TIM_IC_CaptureCallback+0x88>)
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	2264      	movs	r2, #100	; 0x64
 8000710:	fb02 f203 	mul.w	r2, r2, r3
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	fbb2 f3f3 	udiv	r3, r2, r3
 800071c:	4a07      	ldr	r2, [pc, #28]	; (800073c <HAL_TIM_IC_CaptureCallback+0x88>)
 800071e:	6113      	str	r3, [r2, #16]
			pwmIn1.Frequency= 1000000/pwmIn1.Period; //1sec=10^6us
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	4a06      	ldr	r2, [pc, #24]	; (8000740 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_TIM_IC_CaptureCallback+0x88>)
 800072c:	6153      	str	r3, [r2, #20]
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40010400 	.word	0x40010400
 800073c:	200000e0 	.word	0x200000e0
 8000740:	000f4240 	.word	0x000f4240

08000744 <GAS_PWM_changeOutput_ch1>:

void GAS_PWM_changeOutput_ch1(uint16_t input)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	80fb      	strh	r3, [r7, #6]
	/*
	 * PWM change duty cycle function
	 * Change duty cycle by changing register CCR directly
	 */
	TIM1->CCR1=input/10;
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <GAS_PWM_changeOutput_ch1+0x28>)
 8000752:	fba2 2303 	umull	r2, r3, r2, r3
 8000756:	08db      	lsrs	r3, r3, #3
 8000758:	b29a      	uxth	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <GAS_PWM_changeOutput_ch1+0x2c>)
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	cccccccd 	.word	0xcccccccd
 8000770:	40010000 	.word	0x40010000

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d8:	d301      	bcc.n	80007de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007da:	2301      	movs	r3, #1
 80007dc:	e00f      	b.n	80007fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <SysTick_Config+0x40>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e6:	210f      	movs	r1, #15
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f7ff ffc2 	bl	8000774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <SysTick_Config+0x40>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <SysTick_Config+0x40>)
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	e000e010 	.word	0xe000e010

0800080c <GAS_Scheduler_init>:
void GAS_Scheduler_taskCounter_1000ms(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void GAS_Schduler(void);

void GAS_Scheduler_init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <GAS_Scheduler_init+0x38>)
 8000812:	f004 fa33 	bl	8004c7c <HAL_TIM_Base_Start_IT>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <GAS_Scheduler_init+0x14>
	  {
		  Error_Handler();
 800081c:	f000 feac 	bl	8001578 <Error_Handler>
	  }
	SysTick_Config(SystemCoreClock/1000);
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <GAS_Scheduler_init+0x3c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a09      	ldr	r2, [pc, #36]	; (800084c <GAS_Scheduler_init+0x40>)
 8000826:	fba2 2303 	umull	r2, r3, r2, r3
 800082a:	099b      	lsrs	r3, r3, #6
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ffcb 	bl	80007c8 <SysTick_Config>

//********CAN initialization********
	GAS_Can_init();
 8000832:	f7ff fec7 	bl	80005c4 <GAS_Can_init>

//********PWM initialization********
	GAS_PWM_inputInit();
 8000836:	f7ff ff19 	bl	800066c <GAS_PWM_inputInit>
	GAS_PWM_outputInit();
 800083a:	f7ff ff25 	bl	8000688 <GAS_PWM_outputInit>

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000037c 	.word	0x2000037c
 8000848:	2000000c 	.word	0x2000000c
 800084c:	10624dd3 	.word	0x10624dd3

08000850 <GAS_Scheduler_taskCounter_1ms>:



void GAS_Scheduler_taskCounter_1ms(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	GAS_Vadc_dmaIn();
 8000854:	f000 f94a 	bl	8000aec <GAS_Vadc_dmaIn>
//	GAS_Vadc_getValue();
//	GAS_Can_sendMessage();
	GAS_PWM_changeOutput_ch1(ValueOfADC[0]);
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <GAS_Scheduler_taskCounter_1ms+0x18>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	b29b      	uxth	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff70 	bl	8000744 <GAS_PWM_changeOutput_ch1>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200001a8 	.word	0x200001a8

0800086c <GAS_Scheduler_taskCounter_10ms>:

void GAS_Scheduler_taskCounter_10ms(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
//	GAS_Can_sendMessage();
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <GAS_Scheduler_taskCounter_100ms>:

void GAS_Scheduler_taskCounter_100ms(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <GAS_Scheduler_taskCounter_1000ms>:
void GAS_Scheduler_taskCounter_1000ms(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800088c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <GAS_Scheduler_taskCounter_1000ms+0x30>)
 8000892:	f003 fc06 	bl	80040a2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8000896:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <GAS_Scheduler_taskCounter_1000ms+0x30>)
 800089c:	f003 fc01 	bl	80040a2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80008a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <GAS_Scheduler_taskCounter_1000ms+0x30>)
 80008a6:	f003 fbfc 	bl	80040a2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80008aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <GAS_Scheduler_taskCounter_1000ms+0x34>)
 80008b0:	f003 fbf7 	bl	80040a2 <HAL_GPIO_TogglePin>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40020800 	.word	0x40020800
 80008bc:	40020400 	.word	0x40020400

080008c0 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
	gTimerCnt++;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_SYSTICK_Callback+0x7c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <HAL_SYSTICK_Callback+0x7c>)
 80008cc:	6013      	str	r3, [r2, #0]
			gTask.flag_1ms=True;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <HAL_SYSTICK_Callback+0x80>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
			if(gTimerCnt % 10 == 0)
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <HAL_SYSTICK_Callback+0x7c>)
 80008d6:	6819      	ldr	r1, [r3, #0]
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <HAL_SYSTICK_Callback+0x84>)
 80008da:	fb83 2301 	smull	r2, r3, r3, r1
 80008de:	109a      	asrs	r2, r3, #2
 80008e0:	17cb      	asrs	r3, r1, #31
 80008e2:	1ad2      	subs	r2, r2, r3
 80008e4:	4613      	mov	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	1aca      	subs	r2, r1, r3
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d102      	bne.n	80008f8 <HAL_SYSTICK_Callback+0x38>
			{
				gTask.flag_10ms=True;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <HAL_SYSTICK_Callback+0x80>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	705a      	strb	r2, [r3, #1]
			}
			if(gTimerCnt % 100 == 0)
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <HAL_SYSTICK_Callback+0x7c>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_SYSTICK_Callback+0x88>)
 80008fe:	fb83 1302 	smull	r1, r3, r3, r2
 8000902:	1159      	asrs	r1, r3, #5
 8000904:	17d3      	asrs	r3, r2, #31
 8000906:	1acb      	subs	r3, r1, r3
 8000908:	2164      	movs	r1, #100	; 0x64
 800090a:	fb01 f303 	mul.w	r3, r1, r3
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <HAL_SYSTICK_Callback+0x5a>
			{
				gTask.flag_100ms=True;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_SYSTICK_Callback+0x80>)
 8000916:	2201      	movs	r2, #1
 8000918:	709a      	strb	r2, [r3, #2]
			}

			if(gTimerCnt == 1000)
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_SYSTICK_Callback+0x7c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000922:	d105      	bne.n	8000930 <HAL_SYSTICK_Callback+0x70>
			{
				gTask.flag_1000ms=True;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_SYSTICK_Callback+0x80>)
 8000926:	2201      	movs	r2, #1
 8000928:	70da      	strb	r2, [r3, #3]
				gTimerCnt = 0;
 800092a:	4b04      	ldr	r3, [pc, #16]	; (800093c <HAL_SYSTICK_Callback+0x7c>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
			}
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000118 	.word	0x20000118
 8000940:	20000110 	.word	0x20000110
 8000944:	66666667 	.word	0x66666667
 8000948:	51eb851f 	.word	0x51eb851f

0800094c <GAS_Scheduler>:
//		gTimerCnt = 0;
//	}
//}

void GAS_Scheduler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0


	if(gTask.flag_1ms == True)
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <GAS_Scheduler+0x58>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b01      	cmp	r3, #1
 8000958:	d104      	bne.n	8000964 <GAS_Scheduler+0x18>
	{
		gTask.flag_1ms = False;
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <GAS_Scheduler+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
		GAS_Scheduler_taskCounter_1ms();
 8000960:	f7ff ff76 	bl	8000850 <GAS_Scheduler_taskCounter_1ms>
	}

	if(gTask.flag_10ms == True)
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <GAS_Scheduler+0x58>)
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b01      	cmp	r3, #1
 800096c:	d104      	bne.n	8000978 <GAS_Scheduler+0x2c>
	{
		gTask.flag_10ms = False;
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <GAS_Scheduler+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	705a      	strb	r2, [r3, #1]
		GAS_Scheduler_taskCounter_10ms();
 8000974:	f7ff ff7a 	bl	800086c <GAS_Scheduler_taskCounter_10ms>
	}

	if(gTask.flag_100ms == True)
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <GAS_Scheduler+0x58>)
 800097a:	789b      	ldrb	r3, [r3, #2]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b01      	cmp	r3, #1
 8000980:	d104      	bne.n	800098c <GAS_Scheduler+0x40>
	{
		gTask.flag_100ms = False;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <GAS_Scheduler+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	709a      	strb	r2, [r3, #2]
		GAS_Scheduler_taskCounter_100ms();
 8000988:	f7ff ff77 	bl	800087a <GAS_Scheduler_taskCounter_100ms>
	}

	if(gTask.flag_1000ms == True)
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <GAS_Scheduler+0x58>)
 800098e:	78db      	ldrb	r3, [r3, #3]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b01      	cmp	r3, #1
 8000994:	d104      	bne.n	80009a0 <GAS_Scheduler+0x54>
	{
		gTask.flag_1000ms = False;
 8000996:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <GAS_Scheduler+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	70da      	strb	r2, [r3, #3]
		GAS_Scheduler_taskCounter_1000ms();
 800099c:	f7ff ff74 	bl	8000888 <GAS_Scheduler_taskCounter_1000ms>
	}

//	GAS_Can_recieveMessage(&hcan);
//	HAL_CAN_IRQHandler(&hcan);
//	  pin_state=HAL_GPIO_ReadPin(GPIO_PIN_8);
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000110 	.word	0x20000110

080009a8 <HAL_UART_RxCpltCallback>:
	HAL_UART_Receive_IT(&huart1, &uartData,1);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	/*
	 * Uart receive interrupt function
	 * USE!! GAS_Uart_decode function after receive uart data.
	 */
	if(huart->Instance == USART1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_UART_RxCpltCallback+0x30>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d109      	bne.n	80009ce <HAL_UART_RxCpltCallback+0x26>
	{
		HAL_UART_Receive_IT(&huart1, &uartData,1);
 80009ba:	2201      	movs	r2, #1
 80009bc:	4907      	ldr	r1, [pc, #28]	; (80009dc <HAL_UART_RxCpltCallback+0x34>)
 80009be:	4808      	ldr	r0, [pc, #32]	; (80009e0 <HAL_UART_RxCpltCallback+0x38>)
 80009c0:	f005 fc51 	bl	8006266 <HAL_UART_Receive_IT>
		GAS_Uart_decode(uartData);
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_UART_RxCpltCallback+0x34>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 f80b 	bl	80009e4 <GAS_Uart_decode>
	}
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40011000 	.word	0x40011000
 80009dc:	2000011c 	.word	0x2000011c
 80009e0:	200003fc 	.word	0x200003fc

080009e4 <GAS_Uart_decode>:
	return Output;
}


void GAS_Uart_decode(uint8_t inputdata)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]

	if((inputdata >> 5) == IDCODE && ReadCount == 0){
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	095b      	lsrs	r3, r3, #5
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b06      	cmp	r3, #6
 80009f6:	d110      	bne.n	8000a1a <GAS_Uart_decode+0x36>
 80009f8:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <GAS_Uart_decode+0xf4>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d10c      	bne.n	8000a1a <GAS_Uart_decode+0x36>
			R_ID= inputdata&0b11111;
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	f003 031f 	and.w	r3, r3, #31
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b34      	ldr	r3, [pc, #208]	; (8000adc <GAS_Uart_decode+0xf8>)
 8000a0a:	701a      	strb	r2, [r3, #0]
			ReadCount++;
 8000a0c:	4b32      	ldr	r3, [pc, #200]	; (8000ad8 <GAS_Uart_decode+0xf4>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <GAS_Uart_decode+0xf4>)
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e057      	b.n	8000aca <GAS_Uart_decode+0xe6>
	}
	else if((inputdata >> 4) == DATACODE1 && ReadCount == 1){
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	091b      	lsrs	r3, r3, #4
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b0e      	cmp	r3, #14
 8000a22:	d113      	bne.n	8000a4c <GAS_Uart_decode+0x68>
 8000a24:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <GAS_Uart_decode+0xf4>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d10f      	bne.n	8000a4c <GAS_Uart_decode+0x68>
			R_Data.S_Data.data1 = inputdata&0b1111;
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	b2d9      	uxtb	r1, r3
 8000a34:	4a2a      	ldr	r2, [pc, #168]	; (8000ae0 <GAS_Uart_decode+0xfc>)
 8000a36:	7853      	ldrb	r3, [r2, #1]
 8000a38:	f361 1307 	bfi	r3, r1, #4, #4
 8000a3c:	7053      	strb	r3, [r2, #1]
			ReadCount++;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <GAS_Uart_decode+0xf4>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <GAS_Uart_decode+0xf4>)
 8000a48:	701a      	strb	r2, [r3, #0]
 8000a4a:	e03e      	b.n	8000aca <GAS_Uart_decode+0xe6>
	}
	else if((inputdata >> 6) == DATACODE2 && ReadCount == 2){
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	099b      	lsrs	r3, r3, #6
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d113      	bne.n	8000a7e <GAS_Uart_decode+0x9a>
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <GAS_Uart_decode+0xf4>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d10f      	bne.n	8000a7e <GAS_Uart_decode+0x9a>
			R_Data.S_Data.data2 = inputdata&0b111111;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a64:	b2d9      	uxtb	r1, r3
 8000a66:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <GAS_Uart_decode+0xfc>)
 8000a68:	8813      	ldrh	r3, [r2, #0]
 8000a6a:	f361 138b 	bfi	r3, r1, #6, #6
 8000a6e:	8013      	strh	r3, [r2, #0]
			ReadCount++;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <GAS_Uart_decode+0xf4>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <GAS_Uart_decode+0xf4>)
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e025      	b.n	8000aca <GAS_Uart_decode+0xe6>
		}
	else if((inputdata >> 6) == DATACODE3 && ReadCount == 3){
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	099b      	lsrs	r3, r3, #6
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d118      	bne.n	8000aba <GAS_Uart_decode+0xd6>
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <GAS_Uart_decode+0xf4>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d114      	bne.n	8000aba <GAS_Uart_decode+0xd6>

			R_Data.S_Data.data3 = inputdata&0b111111;
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a96:	b2d9      	uxtb	r1, r3
 8000a98:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <GAS_Uart_decode+0xfc>)
 8000a9a:	7813      	ldrb	r3, [r2, #0]
 8000a9c:	f361 0305 	bfi	r3, r1, #0, #6
 8000aa0:	7013      	strb	r3, [r2, #0]
			ReadCount = 0;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <GAS_Uart_decode+0xf4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
			RecieveData[R_ID] = R_Data.Data;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <GAS_Uart_decode+0xf8>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <GAS_Uart_decode+0xfc>)
 8000ab0:	8819      	ldrh	r1, [r3, #0]
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <GAS_Uart_decode+0x100>)
 8000ab4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000ab8:	e007      	b.n	8000aca <GAS_Uart_decode+0xe6>
		}
	else{
		ErrorCount[0]++;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <GAS_Uart_decode+0x104>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <GAS_Uart_decode+0x104>)
 8000ac2:	6013      	str	r3, [r2, #0]
		ReadCount = 0;
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <GAS_Uart_decode+0xf4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	}
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000034 	.word	0x20000034
 8000adc:	20000148 	.word	0x20000148
 8000ae0:	200001a4 	.word	0x200001a4
 8000ae4:	20000120 	.word	0x20000120
 8000ae8:	2000014c 	.word	0x2000014c

08000aec <GAS_Vadc_dmaIn>:
void GAS_Vadc_dmaIn(void);
void GAS_Vadc_getValue(void);


void GAS_Vadc_dmaIn(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	/*
	 * In F405R No need initialize for ADC DMA
	 * Just Start DMA only
	 * Analog data received in to array ValueOfADC
	 */
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ValueOfADC, NumberOfVadc) != HAL_OK)
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <GAS_Vadc_dmaIn+0x20>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4906      	ldr	r1, [pc, #24]	; (8000b10 <GAS_Vadc_dmaIn+0x24>)
 8000af8:	4806      	ldr	r0, [pc, #24]	; (8000b14 <GAS_Vadc_dmaIn+0x28>)
 8000afa:	f001 fac5 	bl	8002088 <HAL_ADC_Start_DMA>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <GAS_Vadc_dmaIn+0x1c>
	{
		Error_Handler();
 8000b04:	f000 fd38 	bl	8001578 <Error_Handler>
	}


}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	200001a8 	.word	0x200001a8
 8000b14:	20000208 	.word	0x20000208

08000b18 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b2a:	4b44      	ldr	r3, [pc, #272]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b2c:	4a44      	ldr	r2, [pc, #272]	; (8000c40 <MX_ADC1_Init+0x128>)
 8000b2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b30:	4b42      	ldr	r3, [pc, #264]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b38:	4b40      	ldr	r3, [pc, #256]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b3e:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b44:	4b3d      	ldr	r3, [pc, #244]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b4a:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b52:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b58:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b5a:	4a3a      	ldr	r2, [pc, #232]	; (8000c44 <MX_ADC1_Init+0x12c>)
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b5e:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000b64:	4b35      	ldr	r3, [pc, #212]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b66:	2206      	movs	r2, #6
 8000b68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b6a:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b72:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b78:	4830      	ldr	r0, [pc, #192]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b7a:	f001 fa41 	bl	8002000 <HAL_ADC_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b84:	f000 fcf8 	bl	8001578 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	4619      	mov	r1, r3
 8000b98:	4828      	ldr	r0, [pc, #160]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000b9a:	f001 fb85 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ba4:	f000 fce8 	bl	8001578 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4821      	ldr	r0, [pc, #132]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000bb6:	f001 fb77 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000bc0:	f000 fcda 	bl	8001578 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4619      	mov	r1, r3
 8000bd0:	481a      	ldr	r0, [pc, #104]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000bd2:	f001 fb69 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000bdc:	f000 fccc 	bl	8001578 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000be0:	230b      	movs	r3, #11
 8000be2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000be4:	2304      	movs	r3, #4
 8000be6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	4619      	mov	r1, r3
 8000bec:	4813      	ldr	r0, [pc, #76]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000bee:	f001 fb5b 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000bf8:	f000 fcbe 	bl	8001578 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000c00:	2305      	movs	r3, #5
 8000c02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000c0a:	f001 fb4d 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000c14:	f000 fcb0 	bl	8001578 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c18:	230d      	movs	r3, #13
 8000c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000c1c:	2306      	movs	r3, #6
 8000c1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_ADC1_Init+0x124>)
 8000c26:	f001 fb3f 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000c30:	f000 fca2 	bl	8001578 <Error_Handler>
  }

}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000208 	.word	0x20000208
 8000c40:	40012000 	.word	0x40012000
 8000c44:	0f000001 	.word	0x0f000001

08000c48 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <MX_ADC2_Init+0x9c>)
 8000c5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <MX_ADC2_Init+0xa0>)
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000caa:	f001 f9a9 	bl	8002000 <HAL_ADC_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000cb4:	f000 fc60 	bl	8001578 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cb8:	2305      	movs	r3, #5
 8000cba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_ADC2_Init+0x98>)
 8000cca:	f001 faed 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000cd4:	f000 fc50 	bl	8001578 <Error_Handler>
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200001c0 	.word	0x200001c0
 8000ce4:	40012100 	.word	0x40012100
 8000ce8:	0f000001 	.word	0x0f000001

08000cec <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d00:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <MX_ADC3_Init+0x9c>)
 8000d02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d0a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <MX_ADC3_Init+0xa0>)
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d4e:	f001 f957 	bl	8002000 <HAL_ADC_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d58:	f000 fc0e 	bl	8001578 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_ADC3_Init+0x98>)
 8000d6e:	f001 fa9b 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000d78:	f000 fbfe 	bl	8001578 <Error_Handler>
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000250 	.word	0x20000250
 8000d88:	40012200 	.word	0x40012200
 8000d8c:	0f000001 	.word	0x0f000001

08000d90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b092      	sub	sp, #72	; 0x48
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a91      	ldr	r2, [pc, #580]	; (8000ff4 <HAL_ADC_MspInit+0x264>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	f040 808d 	bne.w	8000ece <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
 8000db8:	4b8f      	ldr	r3, [pc, #572]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbc:	4a8e      	ldr	r2, [pc, #568]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc2:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc4:	4b8c      	ldr	r3, [pc, #560]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8000dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dd4:	4b88      	ldr	r3, [pc, #544]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a87      	ldr	r2, [pc, #540]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b85      	ldr	r3, [pc, #532]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000df0:	4b81      	ldr	r3, [pc, #516]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	4a80      	ldr	r2, [pc, #512]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfc:	4b7e      	ldr	r3, [pc, #504]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e0c:	4b7a      	ldr	r3, [pc, #488]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	4a79      	ldr	r2, [pc, #484]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	6313      	str	r3, [r2, #48]	; 0x30
 8000e18:	4b77      	ldr	r3, [pc, #476]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e24:	233f      	movs	r3, #63	; 0x3f
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e34:	4619      	mov	r1, r3
 8000e36:	4871      	ldr	r0, [pc, #452]	; (8000ffc <HAL_ADC_MspInit+0x26c>)
 8000e38:	f002 ff80 	bl	8003d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e3c:	23ff      	movs	r3, #255	; 0xff
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e40:	2303      	movs	r3, #3
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	486c      	ldr	r0, [pc, #432]	; (8001000 <HAL_ADC_MspInit+0x270>)
 8000e50:	f002 ff74 	bl	8003d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e54:	2303      	movs	r3, #3
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e64:	4619      	mov	r1, r3
 8000e66:	4867      	ldr	r0, [pc, #412]	; (8001004 <HAL_ADC_MspInit+0x274>)
 8000e68:	f002 ff68 	bl	8003d3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e6c:	4b66      	ldr	r3, [pc, #408]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000e6e:	4a67      	ldr	r2, [pc, #412]	; (800100c <HAL_ADC_MspInit+0x27c>)
 8000e70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e72:	4b65      	ldr	r3, [pc, #404]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e78:	4b63      	ldr	r3, [pc, #396]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7e:	4b62      	ldr	r3, [pc, #392]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e84:	4b60      	ldr	r3, [pc, #384]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e8c:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000e8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e94:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e9c:	4b5a      	ldr	r3, [pc, #360]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ea4:	4b58      	ldr	r3, [pc, #352]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eaa:	4b57      	ldr	r3, [pc, #348]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eb0:	4855      	ldr	r0, [pc, #340]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000eb2:	f002 fbb3 	bl	800361c <HAL_DMA_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000ebc:	f000 fb5c 	bl	8001578 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a51      	ldr	r2, [pc, #324]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ec6:	4a50      	ldr	r2, [pc, #320]	; (8001008 <HAL_ADC_MspInit+0x278>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000ecc:	e08e      	b.n	8000fec <HAL_ADC_MspInit+0x25c>
  else if(adcHandle->Instance==ADC2)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a4f      	ldr	r2, [pc, #316]	; (8001010 <HAL_ADC_MspInit+0x280>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d142      	bne.n	8000f5e <HAL_ADC_MspInit+0x1ce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
 8000edc:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	4a45      	ldr	r2, [pc, #276]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee8:	4b43      	ldr	r3, [pc, #268]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ef0:	623b      	str	r3, [r7, #32]
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a3e      	ldr	r2, [pc, #248]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
 8000f04:	4b3c      	ldr	r3, [pc, #240]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a37      	ldr	r2, [pc, #220]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f30:	2303      	movs	r3, #3
 8000f32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	482f      	ldr	r0, [pc, #188]	; (8000ffc <HAL_ADC_MspInit+0x26c>)
 8000f40:	f002 fefc 	bl	8003d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f44:	233e      	movs	r3, #62	; 0x3e
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f54:	4619      	mov	r1, r3
 8000f56:	482a      	ldr	r0, [pc, #168]	; (8001000 <HAL_ADC_MspInit+0x270>)
 8000f58:	f002 fef0 	bl	8003d3c <HAL_GPIO_Init>
}
 8000f5c:	e046      	b.n	8000fec <HAL_ADC_MspInit+0x25c>
  else if(adcHandle->Instance==ADC3)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a2c      	ldr	r2, [pc, #176]	; (8001014 <HAL_ADC_MspInit+0x284>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d141      	bne.n	8000fec <HAL_ADC_MspInit+0x25c>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6453      	str	r3, [r2, #68]	; 0x44
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_ADC_MspInit+0x268>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480b      	ldr	r0, [pc, #44]	; (8000ffc <HAL_ADC_MspInit+0x26c>)
 8000fd0:	f002 feb4 	bl	8003d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <HAL_ADC_MspInit+0x270>)
 8000fe8:	f002 fea8 	bl	8003d3c <HAL_GPIO_Init>
}
 8000fec:	bf00      	nop
 8000fee:	3748      	adds	r7, #72	; 0x48
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40012000 	.word	0x40012000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020000 	.word	0x40020000
 8001004:	40020400 	.word	0x40020400
 8001008:	20000298 	.word	0x20000298
 800100c:	40026410 	.word	0x40026410
 8001010:	40012100 	.word	0x40012100
 8001014:	40012200 	.word	0x40012200

08001018 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_CAN2_Init+0x64>)
 800101e:	4a18      	ldr	r2, [pc, #96]	; (8001080 <MX_CAN2_Init+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_CAN2_Init+0x64>)
 8001024:	2207      	movs	r2, #7
 8001026:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_CAN2_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <MX_CAN2_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_CAN2_Init+0x64>)
 8001036:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800103a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_CAN2_Init+0x64>)
 800103e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001042:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <MX_CAN2_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_CAN2_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <MX_CAN2_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_CAN2_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <MX_CAN2_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_CAN2_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <MX_CAN2_Init+0x64>)
 800106a:	f001 fbbd 	bl	80027e8 <HAL_CAN_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001074:	f000 fa80 	bl	8001578 <Error_Handler>
  }

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200002f8 	.word	0x200002f8
 8001080:	40006800 	.word	0x40006800

08001084 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <HAL_CAN_MspInit+0xc0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d14a      	bne.n	800113c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <HAL_CAN_MspInit+0xc4>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a26      	ldr	r2, [pc, #152]	; (8001148 <HAL_CAN_MspInit+0xc4>)
 80010b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_CAN_MspInit+0xc4>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <HAL_CAN_MspInit+0xc4>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <HAL_CAN_MspInit+0xc4>)
 80010cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_CAN_MspInit+0xc4>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_CAN_MspInit+0xc4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a18      	ldr	r2, [pc, #96]	; (8001148 <HAL_CAN_MspInit+0xc4>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <HAL_CAN_MspInit+0xc4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800110c:	2309      	movs	r3, #9
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <HAL_CAN_MspInit+0xc8>)
 8001118:	f002 fe10 	bl	8003d3c <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2040      	movs	r0, #64	; 0x40
 8001122:	f002 f9b4 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001126:	2040      	movs	r0, #64	; 0x40
 8001128:	f002 f9cd 	bl	80034c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	2041      	movs	r0, #65	; 0x41
 8001132:	f002 f9ac 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001136:	2041      	movs	r0, #65	; 0x41
 8001138:	f002 f9c5 	bl	80034c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40006800 	.word	0x40006800
 8001148:	40023800 	.word	0x40023800
 800114c:	40020400 	.word	0x40020400

08001150 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_CRC_Init+0x20>)
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <MX_CRC_Init+0x24>)
 8001158:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_CRC_Init+0x20>)
 800115c:	f002 f9d3 	bl	8003506 <HAL_CRC_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001166:	f000 fa07 	bl	8001578 <Error_Handler>
  }

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000320 	.word	0x20000320
 8001174:	40023000 	.word	0x40023000

08001178 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_CRC_MspInit+0x3c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10d      	bne.n	80011a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_CRC_MspInit+0x40>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <HAL_CRC_MspInit+0x40>)
 8001194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <HAL_CRC_MspInit+0x40>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023000 	.word	0x40023000
 80011b8:	40023800 	.word	0x40023800

080011bc <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_DAC_Init+0x4c>)
 80011cc:	4a0f      	ldr	r2, [pc, #60]	; (800120c <MX_DAC_Init+0x50>)
 80011ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_DAC_Init+0x4c>)
 80011d2:	f002 f9b4 	bl	800353e <HAL_DAC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011dc:	f000 f9cc 	bl	8001578 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_DAC_Init+0x4c>)
 80011f0:	f002 f9c7 	bl	8003582 <HAL_DAC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011fa:	f000 f9bd 	bl	8001578 <Error_Handler>
  }

}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000328 	.word	0x20000328
 800120c:	40007400 	.word	0x40007400

08001210 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_DAC_MspInit+0x7c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d127      	bne.n	8001282 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_DAC_MspInit+0x80>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <HAL_DAC_MspInit+0x80>)
 800123c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_DAC_MspInit+0x80>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_DAC_MspInit+0x80>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <HAL_DAC_MspInit+0x80>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_DAC_MspInit+0x80>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800126a:	2310      	movs	r3, #16
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126e:	2303      	movs	r3, #3
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_DAC_MspInit+0x84>)
 800127e:	f002 fd5d 	bl	8003d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40007400 	.word	0x40007400
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000

08001298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_DMA_Init+0x3c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <MX_DMA_Init+0x3c>)
 80012a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_DMA_Init+0x3c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2038      	movs	r0, #56	; 0x38
 80012c0:	f002 f8e5 	bl	800348e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012c4:	2038      	movs	r0, #56	; 0x38
 80012c6:	f002 f8fe 	bl	80034c6 <HAL_NVIC_EnableIRQ>

}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <MX_GPIO_Init>:
     PC12   ------> SPI3_MOSI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b54      	ldr	r3, [pc, #336]	; (8001444 <MX_GPIO_Init+0x16c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a53      	ldr	r2, [pc, #332]	; (8001444 <MX_GPIO_Init+0x16c>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b51      	ldr	r3, [pc, #324]	; (8001444 <MX_GPIO_Init+0x16c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b4d      	ldr	r3, [pc, #308]	; (8001444 <MX_GPIO_Init+0x16c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a4c      	ldr	r2, [pc, #304]	; (8001444 <MX_GPIO_Init+0x16c>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <MX_GPIO_Init+0x16c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b46      	ldr	r3, [pc, #280]	; (8001444 <MX_GPIO_Init+0x16c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a45      	ldr	r2, [pc, #276]	; (8001444 <MX_GPIO_Init+0x16c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <MX_GPIO_Init+0x16c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <MX_GPIO_Init+0x16c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a3e      	ldr	r2, [pc, #248]	; (8001444 <MX_GPIO_Init+0x16c>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <MX_GPIO_Init+0x16c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001364:	4838      	ldr	r0, [pc, #224]	; (8001448 <MX_GPIO_Init+0x170>)
 8001366:	f002 fe83 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001370:	4836      	ldr	r0, [pc, #216]	; (800144c <MX_GPIO_Init+0x174>)
 8001372:	f002 fe7d 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001376:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	482e      	ldr	r0, [pc, #184]	; (8001448 <MX_GPIO_Init+0x170>)
 8001390:	f002 fcd4 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4827      	ldr	r0, [pc, #156]	; (800144c <MX_GPIO_Init+0x174>)
 80013ae:	f002 fcc5 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013c4:	2301      	movs	r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	481f      	ldr	r0, [pc, #124]	; (800144c <MX_GPIO_Init+0x174>)
 80013d0:	f002 fcb4 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013e6:	2306      	movs	r3, #6
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4817      	ldr	r0, [pc, #92]	; (8001450 <MX_GPIO_Init+0x178>)
 80013f2:	f002 fca3 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001408:	2306      	movs	r3, #6
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_GPIO_Init+0x170>)
 8001414:	f002 fc92 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001418:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141e:	2312      	movs	r3, #18
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001422:	2301      	movs	r3, #1
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800142a:	2304      	movs	r3, #4
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_GPIO_Init+0x174>)
 8001436:	f002 fc81 	bl	8003d3c <HAL_GPIO_Init>

}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	; 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40020800 	.word	0x40020800
 800144c:	40020400 	.word	0x40020400
 8001450:	40020000 	.word	0x40020000

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001458:	f000 fd3e 	bl	8001ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145c:	f000 f820 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001460:	f7ff ff3a 	bl	80012d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001464:	f7ff ff18 	bl	8001298 <MX_DMA_Init>
  MX_ADC1_Init();
 8001468:	f7ff fb56 	bl	8000b18 <MX_ADC1_Init>
  MX_ADC2_Init();
 800146c:	f7ff fbec 	bl	8000c48 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001470:	f7ff fc3c 	bl	8000cec <MX_ADC3_Init>
  MX_CAN2_Init();
 8001474:	f7ff fdd0 	bl	8001018 <MX_CAN2_Init>
  MX_DAC_Init();
 8001478:	f7ff fea0 	bl	80011bc <MX_DAC_Init>
  MX_CRC_Init();
 800147c:	f7ff fe68 	bl	8001150 <MX_CRC_Init>
  MX_TIM1_Init();
 8001480:	f000 f91c 	bl	80016bc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001484:	f000 f9e8 	bl	8001858 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001488:	f000 fa70 	bl	800196c <MX_TIM8_Init>
  MX_USB_OTG_HS_PCD_Init();
 800148c:	f000 fc80 	bl	8001d90 <MX_USB_OTG_HS_PCD_Init>
  MX_USART1_UART_Init();
 8001490:	f000 fc04 	bl	8001c9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GAS_Scheduler_init();
 8001494:	f7ff f9ba 	bl	800080c <GAS_Scheduler_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 GAS_Scheduler();
 8001498:	f7ff fa58 	bl	800094c <GAS_Scheduler>
  {
 800149c:	e7fc      	b.n	8001498 <main+0x44>
	...

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2230      	movs	r2, #48	; 0x30
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f005 ffba 	bl	8007428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <SystemClock_Config+0xd0>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a28      	ldr	r2, [pc, #160]	; (8001570 <SystemClock_Config+0xd0>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <SystemClock_Config+0xd0>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <SystemClock_Config+0xd4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a22      	ldr	r2, [pc, #136]	; (8001574 <SystemClock_Config+0xd4>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <SystemClock_Config+0xd4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001506:	2302      	movs	r3, #2
 8001508:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001510:	2304      	movs	r3, #4
 8001512:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001514:	23a8      	movs	r3, #168	; 0xa8
 8001516:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001518:	2302      	movs	r3, #2
 800151a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800151c:	2307      	movs	r3, #7
 800151e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fef5 	bl	8004314 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001530:	f000 f822 	bl	8001578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001540:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2105      	movs	r1, #5
 8001552:	4618      	mov	r0, r3
 8001554:	f003 f94e 	bl	80047f4 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800155e:	f000 f80b 	bl	8001578 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001562:	f003 fa2d 	bl	80049c0 <HAL_RCC_EnableCSS>
}
 8001566:	bf00      	nop
 8001568:	3750      	adds	r7, #80	; 0x50
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157e:	e7fe      	b.n	800157e <Error_Handler+0x6>

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <HAL_MspInit+0x4c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_MspInit+0x4c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80015d4:	f003 fb0c 	bl	8004bf0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x8>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 fcac 	bl	8001f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001624:	f001 ff69 	bl	80034fa <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <USART1_IRQHandler+0x10>)
 8001632:	f004 fe6d 	bl	8006310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200003fc 	.word	0x200003fc

08001640 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <TIM8_CC_IRQHandler+0x10>)
 8001646:	f003 fc4f 	bl	8004ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000033c 	.word	0x2000033c

08001654 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <DMA2_Stream0_IRQHandler+0x10>)
 800165a:	f002 f907 	bl	800386c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000298 	.word	0x20000298

08001668 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <CAN2_RX0_IRQHandler+0x10>)
 800166e:	f001 fc13 	bl	8002e98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200002f8 	.word	0x200002f8

0800167c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <CAN2_RX1_IRQHandler+0x10>)
 8001682:	f001 fc09 	bl	8002e98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200002f8 	.word	0x200002f8

08001690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <SystemInit+0x28>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <SystemInit+0x28>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SystemInit+0x28>)
 80016a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016aa:	609a      	str	r2, [r3, #8]
#endif
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b096      	sub	sp, #88	; 0x58
 80016c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2220      	movs	r2, #32
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f005 fe97 	bl	8007428 <memset>

  htim1.Instance = TIM1;
 80016fa:	4b55      	ldr	r3, [pc, #340]	; (8001850 <MX_TIM1_Init+0x194>)
 80016fc:	4a55      	ldr	r2, [pc, #340]	; (8001854 <MX_TIM1_Init+0x198>)
 80016fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001700:	4b53      	ldr	r3, [pc, #332]	; (8001850 <MX_TIM1_Init+0x194>)
 8001702:	22a7      	movs	r2, #167	; 0xa7
 8001704:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b52      	ldr	r3, [pc, #328]	; (8001850 <MX_TIM1_Init+0x194>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800170c:	4b50      	ldr	r3, [pc, #320]	; (8001850 <MX_TIM1_Init+0x194>)
 800170e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001712:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001714:	4b4e      	ldr	r3, [pc, #312]	; (8001850 <MX_TIM1_Init+0x194>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800171a:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <MX_TIM1_Init+0x194>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001720:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <MX_TIM1_Init+0x194>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001726:	484a      	ldr	r0, [pc, #296]	; (8001850 <MX_TIM1_Init+0x194>)
 8001728:	f003 fa7d 	bl	8004c26 <HAL_TIM_Base_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001732:	f7ff ff21 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800173c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001740:	4619      	mov	r1, r3
 8001742:	4843      	ldr	r0, [pc, #268]	; (8001850 <MX_TIM1_Init+0x194>)
 8001744:	f003 fe3a 	bl	80053bc <HAL_TIM_ConfigClockSource>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800174e:	f7ff ff13 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001752:	483f      	ldr	r0, [pc, #252]	; (8001850 <MX_TIM1_Init+0x194>)
 8001754:	f003 fab6 	bl	8004cc4 <HAL_TIM_PWM_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800175e:	f7ff ff0b 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800176a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800176e:	4619      	mov	r1, r3
 8001770:	4837      	ldr	r0, [pc, #220]	; (8001850 <MX_TIM1_Init+0x194>)
 8001772:	f004 fc49 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800177c:	f7ff fefc 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001780:	2360      	movs	r3, #96	; 0x60
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 250;
 8001784:	23fa      	movs	r3, #250	; 0xfa
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800178c:	2300      	movs	r3, #0
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	482a      	ldr	r0, [pc, #168]	; (8001850 <MX_TIM1_Init+0x194>)
 80017a6:	f003 fd43 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80017b0:	f7ff fee2 	bl	8001578 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 80017b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017be:	2204      	movs	r2, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	4823      	ldr	r0, [pc, #140]	; (8001850 <MX_TIM1_Init+0x194>)
 80017c4:	f003 fd34 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80017ce:	f7ff fed3 	bl	8001578 <Error_Handler>
  }
  sConfigOC.Pulse = 750;
 80017d2:	f240 23ee 	movw	r3, #750	; 0x2ee
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	2208      	movs	r2, #8
 80017de:	4619      	mov	r1, r3
 80017e0:	481b      	ldr	r0, [pc, #108]	; (8001850 <MX_TIM1_Init+0x194>)
 80017e2:	f003 fd25 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80017ec:	f7ff fec4 	bl	8001578 <Error_Handler>
  }
  sConfigOC.Pulse = 900;
 80017f0:	f44f 7361 	mov.w	r3, #900	; 0x384
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fa:	220c      	movs	r2, #12
 80017fc:	4619      	mov	r1, r3
 80017fe:	4814      	ldr	r0, [pc, #80]	; (8001850 <MX_TIM1_Init+0x194>)
 8001800:	f003 fd16 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 800180a:	f7ff feb5 	bl	8001578 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001826:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4807      	ldr	r0, [pc, #28]	; (8001850 <MX_TIM1_Init+0x194>)
 8001832:	f004 fc65 	bl	8006100 <HAL_TIMEx_ConfigBreakDeadTime>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 800183c:	f7ff fe9c 	bl	8001578 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <MX_TIM1_Init+0x194>)
 8001842:	f000 f9f1 	bl	8001c28 <HAL_TIM_MspPostInit>

}
 8001846:	bf00      	nop
 8001848:	3758      	adds	r7, #88	; 0x58
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200003bc 	.word	0x200003bc
 8001854:	40010000 	.word	0x40010000

08001858 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b090      	sub	sp, #64	; 0x40
 800185c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8001892:	4b34      	ldr	r3, [pc, #208]	; (8001964 <MX_TIM3_Init+0x10c>)
 8001894:	4a34      	ldr	r2, [pc, #208]	; (8001968 <MX_TIM3_Init+0x110>)
 8001896:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <MX_TIM3_Init+0x10c>)
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189e:	4b31      	ldr	r3, [pc, #196]	; (8001964 <MX_TIM3_Init+0x10c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <MX_TIM3_Init+0x10c>)
 80018a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ac:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <MX_TIM3_Init+0x10c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <MX_TIM3_Init+0x10c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018b8:	482a      	ldr	r0, [pc, #168]	; (8001964 <MX_TIM3_Init+0x10c>)
 80018ba:	f003 f9b4 	bl	8004c26 <HAL_TIM_Base_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80018c4:	f7ff fe58 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d2:	4619      	mov	r1, r3
 80018d4:	4823      	ldr	r0, [pc, #140]	; (8001964 <MX_TIM3_Init+0x10c>)
 80018d6:	f003 fd71 	bl	80053bc <HAL_TIM_ConfigClockSource>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018e0:	f7ff fe4a 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80018e4:	481f      	ldr	r0, [pc, #124]	; (8001964 <MX_TIM3_Init+0x10c>)
 80018e6:	f003 fa61 	bl	8004dac <HAL_TIM_IC_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80018f0:	f7ff fe42 	bl	8001578 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80018f8:	2340      	movs	r3, #64	; 0x40
 80018fa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	4817      	ldr	r0, [pc, #92]	; (8001964 <MX_TIM3_Init+0x10c>)
 8001908:	f003 fe0f 	bl	800552a <HAL_TIM_SlaveConfigSynchro>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8001912:	f7ff fe31 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	480f      	ldr	r0, [pc, #60]	; (8001964 <MX_TIM3_Init+0x10c>)
 8001926:	f004 fb6f 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001930:	f7ff fe22 	bl	8001578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 8001938:	2303      	movs	r3, #3
 800193a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	2200      	movs	r2, #0
 8001948:	4619      	mov	r1, r3
 800194a:	4806      	ldr	r0, [pc, #24]	; (8001964 <MX_TIM3_Init+0x10c>)
 800194c:	f003 fbd4 	bl	80050f8 <HAL_TIM_IC_ConfigChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001956:	f7ff fe0f 	bl	8001578 <Error_Handler>
  }

}
 800195a:	bf00      	nop
 800195c:	3740      	adds	r7, #64	; 0x40
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000037c 	.word	0x2000037c
 8001968:	40000400 	.word	0x40000400

0800196c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b090      	sub	sp, #64	; 0x40
 8001970:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001972:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]

  htim8.Instance = TIM8;
 80019a6:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 80019a8:	4a50      	ldr	r2, [pc, #320]	; (8001aec <MX_TIM8_Init+0x180>)
 80019aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 80019ac:	4b4e      	ldr	r3, [pc, #312]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 80019ae:	22a7      	movs	r2, #167	; 0xa7
 80019b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80019b8:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 80019ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019be:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	4b49      	ldr	r3, [pc, #292]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019c6:	4b48      	ldr	r3, [pc, #288]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019cc:	4b46      	ldr	r3, [pc, #280]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019d2:	4845      	ldr	r0, [pc, #276]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 80019d4:	f003 f927 	bl	8004c26 <HAL_TIM_Base_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80019de:	f7ff fdcb 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ec:	4619      	mov	r1, r3
 80019ee:	483e      	ldr	r0, [pc, #248]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 80019f0:	f003 fce4 	bl	80053bc <HAL_TIM_ConfigClockSource>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80019fa:	f7ff fdbd 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80019fe:	483a      	ldr	r0, [pc, #232]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 8001a00:	f003 f9d4 	bl	8004dac <HAL_TIM_IC_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8001a0a:	f7ff fdb5 	bl	8001578 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a12:	2350      	movs	r3, #80	; 0x50
 8001a14:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4619      	mov	r1, r3
 8001a24:	4830      	ldr	r0, [pc, #192]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 8001a26:	f003 fd80 	bl	800552a <HAL_TIM_SlaveConfigSynchro>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001a30:	f7ff fda2 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4829      	ldr	r0, [pc, #164]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 8001a44:	f004 fae0 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8001a4e:	f7ff fd93 	bl	8001578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a56:	2301      	movs	r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8001a5e:	230f      	movs	r3, #15
 8001a60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2200      	movs	r2, #0
 8001a66:	4619      	mov	r1, r3
 8001a68:	481f      	ldr	r0, [pc, #124]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 8001a6a:	f003 fb45 	bl	80050f8 <HAL_TIM_IC_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8001a74:	f7ff fd80 	bl	8001578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2204      	movs	r2, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4817      	ldr	r0, [pc, #92]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 8001a8c:	f003 fb34 	bl	80050f8 <HAL_TIM_IC_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8001a96:	f7ff fd6f 	bl	8001578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001aa2:	230f      	movs	r3, #15
 8001aa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480e      	ldr	r0, [pc, #56]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 8001aae:	f003 fb23 	bl	80050f8 <HAL_TIM_IC_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM8_Init+0x150>
  {
    Error_Handler();
 8001ab8:	f7ff fd5e 	bl	8001578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001abc:	2302      	movs	r3, #2
 8001abe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	220c      	movs	r2, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <MX_TIM8_Init+0x17c>)
 8001ad0:	f003 fb12 	bl	80050f8 <HAL_TIM_IC_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001ada:	f7ff fd4d 	bl	8001578 <Error_Handler>
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3740      	adds	r7, #64	; 0x40
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000033c 	.word	0x2000033c
 8001aec:	40010400 	.word	0x40010400

08001af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	; 0x30
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a40      	ldr	r2, [pc, #256]	; (8001c10 <HAL_TIM_Base_MspInit+0x120>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d10e      	bne.n	8001b30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a3e      	ldr	r2, [pc, #248]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b3c      	ldr	r3, [pc, #240]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001b2e:	e06b      	b.n	8001c08 <HAL_TIM_Base_MspInit+0x118>
  else if(tim_baseHandle->Instance==TIM3)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a38      	ldr	r2, [pc, #224]	; (8001c18 <HAL_TIM_Base_MspInit+0x128>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12c      	bne.n	8001b94 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a34      	ldr	r2, [pc, #208]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b32      	ldr	r3, [pc, #200]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a2d      	ldr	r2, [pc, #180]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b72:	2310      	movs	r3, #16
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b82:	2302      	movs	r3, #2
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4823      	ldr	r0, [pc, #140]	; (8001c1c <HAL_TIM_Base_MspInit+0x12c>)
 8001b8e:	f002 f8d5 	bl	8003d3c <HAL_GPIO_Init>
}
 8001b92:	e039      	b.n	8001c08 <HAL_TIM_Base_MspInit+0x118>
  else if(tim_baseHandle->Instance==TIM8)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a21      	ldr	r2, [pc, #132]	; (8001c20 <HAL_TIM_Base_MspInit+0x130>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d134      	bne.n	8001c08 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_TIM_Base_MspInit+0x124>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001bd6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001be8:	2303      	movs	r3, #3
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480c      	ldr	r0, [pc, #48]	; (8001c24 <HAL_TIM_Base_MspInit+0x134>)
 8001bf4:	f002 f8a2 	bl	8003d3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	202e      	movs	r0, #46	; 0x2e
 8001bfe:	f001 fc46 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001c02:	202e      	movs	r0, #46	; 0x2e
 8001c04:	f001 fc5f 	bl	80034c6 <HAL_NVIC_EnableIRQ>
}
 8001c08:	bf00      	nop
 8001c0a:	3730      	adds	r7, #48	; 0x30
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40010000 	.word	0x40010000
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40010400 	.word	0x40010400
 8001c24:	40020800 	.word	0x40020800

08001c28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <HAL_TIM_MspPostInit+0x68>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d11e      	bne.n	8001c88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_TIM_MspPostInit+0x6c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <HAL_TIM_MspPostInit+0x6c>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_TIM_MspPostInit+0x6c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001c66:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4619      	mov	r1, r3
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <HAL_TIM_MspPostInit+0x70>)
 8001c84:	f002 f85a 	bl	8003d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c88:	bf00      	nop
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40010000 	.word	0x40010000
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020000 	.word	0x40020000

08001c9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <MX_USART1_UART_Init+0x50>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001ca8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	f004 fa7a 	bl	80061cc <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cde:	f7ff fc4b 	bl	8001578 <Error_Handler>
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200003fc 	.word	0x200003fc
 8001cec:	40011000 	.word	0x40011000

08001cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_UART_MspInit+0x94>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d133      	bne.n	8001d7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_UART_MspInit+0x98>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <HAL_UART_MspInit+0x98>)
 8001d1c:	f043 0310 	orr.w	r3, r3, #16
 8001d20:	6453      	str	r3, [r2, #68]	; 0x44
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_UART_MspInit+0x98>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_UART_MspInit+0x98>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <HAL_UART_MspInit+0x98>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_UART_MspInit+0x98>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d4a:	23c0      	movs	r3, #192	; 0xc0
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <HAL_UART_MspInit+0x9c>)
 8001d66:	f001 ffe9 	bl	8003d3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2025      	movs	r0, #37	; 0x25
 8001d70:	f001 fb8d 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d74:	2025      	movs	r0, #37	; 0x25
 8001d76:	f001 fba6 	bl	80034c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	; 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40011000 	.word	0x40011000
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020400 	.word	0x40020400

08001d90 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001d94:	4b15      	ldr	r3, [pc, #84]	; (8001dec <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001d96:	4a16      	ldr	r2, [pc, #88]	; (8001df0 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001d98:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001d9c:	2206      	movs	r2, #6
 8001d9e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001da2:	2202      	movs	r2, #2
 8001da4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001dae:	2202      	movs	r2, #2
 8001db0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001dd8:	f002 f97e 	bl	80040d8 <HAL_PCD_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001de2:	f7ff fbc9 	bl	8001578 <Error_Handler>
  }

}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000043c 	.word	0x2000043c
 8001df0:	40040000 	.word	0x40040000

08001df4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <HAL_PCD_MspInit+0x84>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d12c      	bne.n	8001e70 <HAL_PCD_MspInit+0x7c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_PCD_MspInit+0x88>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <HAL_PCD_MspInit+0x88>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_PCD_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001e44:	230c      	movs	r3, #12
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480c      	ldr	r0, [pc, #48]	; (8001e80 <HAL_PCD_MspInit+0x8c>)
 8001e50:	f001 ff74 	bl	8003d3c <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_PCD_MspInit+0x88>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_PCD_MspInit+0x88>)
 8001e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e62:	6313      	str	r3, [r2, #48]	; 0x30
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_PCD_MspInit+0x88>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001e70:	bf00      	nop
 8001e72:	3728      	adds	r7, #40	; 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40040000 	.word	0x40040000
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020400 	.word	0x40020400

08001e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ebc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e8a:	e003      	b.n	8001e94 <LoopCopyDataInit>

08001e8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e92:	3104      	adds	r1, #4

08001e94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e94:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e9c:	d3f6      	bcc.n	8001e8c <CopyDataInit>
  ldr  r2, =_sbss
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ea0:	e002      	b.n	8001ea8 <LoopFillZerobss>

08001ea2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ea2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ea4:	f842 3b04 	str.w	r3, [r2], #4

08001ea8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001eac:	d3f9      	bcc.n	8001ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eae:	f7ff fbef 	bl	8001690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb2:	f005 fa95 	bl	80073e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eb6:	f7ff facd 	bl	8001454 <main>
  bx  lr    
 8001eba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ebc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ec0:	08007480 	.word	0x08007480
  ldr  r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ec8:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8001ecc:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001ed0:	20000848 	.word	0x20000848

08001ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC_IRQHandler>
	...

08001ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <HAL_Init+0x40>)
 8001ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_Init+0x40>)
 8001eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_Init+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <HAL_Init+0x40>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f00:	2003      	movs	r0, #3
 8001f02:	f001 fab9 	bl	8003478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f000 f808 	bl	8001f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f0c:	f7ff fb38 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023c00 	.word	0x40023c00

08001f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_InitTick+0x54>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x58>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 fad1 	bl	80034e2 <HAL_SYSTICK_Config>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00e      	b.n	8001f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b0f      	cmp	r3, #15
 8001f4e:	d80a      	bhi.n	8001f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f50:	2200      	movs	r2, #0
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f001 fa99 	bl	800348e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f5c:	4a06      	ldr	r2, [pc, #24]	; (8001f78 <HAL_InitTick+0x5c>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	20000014 	.word	0x20000014
 8001f78:	20000010 	.word	0x20000010

08001f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_IncTick+0x20>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x24>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_IncTick+0x24>)
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000014 	.word	0x20000014
 8001fa0:	20000844 	.word	0x20000844

08001fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <HAL_GetTick+0x14>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000844 	.word	0x20000844

08001fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff ffee 	bl	8001fa4 <HAL_GetTick>
 8001fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d005      	beq.n	8001fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_Delay+0x40>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fe2:	bf00      	nop
 8001fe4:	f7ff ffde 	bl	8001fa4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d8f7      	bhi.n	8001fe4 <HAL_Delay+0x28>
  {
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000014 	.word	0x20000014

08002000 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e033      	b.n	800207e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe feb6 	bl	8000d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002046:	f023 0302 	bic.w	r3, r3, #2
 800204a:	f043 0202 	orr.w	r2, r3, #2
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa4a 	bl	80024ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f023 0303 	bic.w	r3, r3, #3
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
 800206e:	e001      	b.n	8002074 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_Start_DMA+0x1e>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e0cc      	b.n	8002240 <HAL_ADC_Start_DMA+0x1b8>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d018      	beq.n	80020ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020cc:	4b5e      	ldr	r3, [pc, #376]	; (8002248 <HAL_ADC_Start_DMA+0x1c0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a5e      	ldr	r2, [pc, #376]	; (800224c <HAL_ADC_Start_DMA+0x1c4>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	0c9a      	lsrs	r2, r3, #18
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020e0:	e002      	b.n	80020e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f9      	bne.n	80020e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	f040 80a0 	bne.w	800223e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211c:	2b00      	cmp	r3, #0
 800211e:	d007      	beq.n	8002130 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002128:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213c:	d106      	bne.n	800214c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f023 0206 	bic.w	r2, r3, #6
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	645a      	str	r2, [r3, #68]	; 0x44
 800214a:	e002      	b.n	8002152 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800215a:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <HAL_ADC_Start_DMA+0x1c8>)
 800215c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	4a3c      	ldr	r2, [pc, #240]	; (8002254 <HAL_ADC_Start_DMA+0x1cc>)
 8002164:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216a:	4a3b      	ldr	r2, [pc, #236]	; (8002258 <HAL_ADC_Start_DMA+0x1d0>)
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002172:	4a3a      	ldr	r2, [pc, #232]	; (800225c <HAL_ADC_Start_DMA+0x1d4>)
 8002174:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800217e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800218e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800219e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	334c      	adds	r3, #76	; 0x4c
 80021aa:	4619      	mov	r1, r3
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f001 fae2 	bl	8003778 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d12a      	bne.n	8002216 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a26      	ldr	r2, [pc, #152]	; (8002260 <HAL_ADC_Start_DMA+0x1d8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d015      	beq.n	80021f6 <HAL_ADC_Start_DMA+0x16e>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a25      	ldr	r2, [pc, #148]	; (8002264 <HAL_ADC_Start_DMA+0x1dc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d105      	bne.n	80021e0 <HAL_ADC_Start_DMA+0x158>
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_ADC_Start_DMA+0x1c8>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a20      	ldr	r2, [pc, #128]	; (8002268 <HAL_ADC_Start_DMA+0x1e0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d129      	bne.n	800223e <HAL_ADC_Start_DMA+0x1b6>
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_ADC_Start_DMA+0x1c8>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2b0f      	cmp	r3, #15
 80021f4:	d823      	bhi.n	800223e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d11c      	bne.n	800223e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	e013      	b.n	800223e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_ADC_Start_DMA+0x1d8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d10e      	bne.n	800223e <HAL_ADC_Start_DMA+0x1b6>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d107      	bne.n	800223e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800223c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	2000000c 	.word	0x2000000c
 800224c:	431bde83 	.word	0x431bde83
 8002250:	40012300 	.word	0x40012300
 8002254:	080026e5 	.word	0x080026e5
 8002258:	0800279f 	.word	0x0800279f
 800225c:	080027bb 	.word	0x080027bb
 8002260:	40012000 	.word	0x40012000
 8002264:	40012100 	.word	0x40012100
 8002268:	40012200 	.word	0x40012200

0800226c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1c>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e105      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x228>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b09      	cmp	r3, #9
 80022d2:	d925      	bls.n	8002320 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68d9      	ldr	r1, [r3, #12]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	3b1e      	subs	r3, #30
 80022ea:	2207      	movs	r2, #7
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43da      	mvns	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	400a      	ands	r2, r1
 80022f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68d9      	ldr	r1, [r3, #12]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	4618      	mov	r0, r3
 800230c:	4603      	mov	r3, r0
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4403      	add	r3, r0
 8002312:	3b1e      	subs	r3, #30
 8002314:	409a      	lsls	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	e022      	b.n	8002366 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6919      	ldr	r1, [r3, #16]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	2207      	movs	r2, #7
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	400a      	ands	r2, r1
 8002342:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6919      	ldr	r1, [r3, #16]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	4618      	mov	r0, r3
 8002356:	4603      	mov	r3, r0
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4403      	add	r3, r0
 800235c:	409a      	lsls	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b06      	cmp	r3, #6
 800236c:	d824      	bhi.n	80023b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	3b05      	subs	r3, #5
 8002380:	221f      	movs	r2, #31
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	400a      	ands	r2, r1
 800238e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	4618      	mov	r0, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	3b05      	subs	r3, #5
 80023aa:	fa00 f203 	lsl.w	r2, r0, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34
 80023b6:	e04c      	b.n	8002452 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d824      	bhi.n	800240a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	3b23      	subs	r3, #35	; 0x23
 80023d2:	221f      	movs	r2, #31
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43da      	mvns	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	400a      	ands	r2, r1
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	3b23      	subs	r3, #35	; 0x23
 80023fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
 8002408:	e023      	b.n	8002452 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	3b41      	subs	r3, #65	; 0x41
 800241c:	221f      	movs	r2, #31
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	400a      	ands	r2, r1
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	4618      	mov	r0, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	3b41      	subs	r3, #65	; 0x41
 8002446:	fa00 f203 	lsl.w	r2, r0, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002452:	4b22      	ldr	r3, [pc, #136]	; (80024dc <HAL_ADC_ConfigChannel+0x234>)
 8002454:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <HAL_ADC_ConfigChannel+0x238>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d109      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1cc>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b12      	cmp	r3, #18
 8002466:	d105      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <HAL_ADC_ConfigChannel+0x238>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d123      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x21e>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b10      	cmp	r3, #16
 8002484:	d003      	beq.n	800248e <HAL_ADC_ConfigChannel+0x1e6>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b11      	cmp	r3, #17
 800248c:	d11b      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b10      	cmp	r3, #16
 80024a0:	d111      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_ADC_ConfigChannel+0x23c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a10      	ldr	r2, [pc, #64]	; (80024e8 <HAL_ADC_ConfigChannel+0x240>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	0c9a      	lsrs	r2, r3, #18
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024b8:	e002      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	3b01      	subs	r3, #1
 80024be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f9      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40012300 	.word	0x40012300
 80024e0:	40012000 	.word	0x40012000
 80024e4:	2000000c 	.word	0x2000000c
 80024e8:	431bde83 	.word	0x431bde83

080024ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f4:	4b79      	ldr	r3, [pc, #484]	; (80026dc <ADC_Init+0x1f0>)
 80024f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	431a      	orrs	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	021a      	lsls	r2, r3, #8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6899      	ldr	r1, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <ADC_Init+0x1f4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d022      	beq.n	80025ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002592:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	e00f      	b.n	80025ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0202 	bic.w	r2, r2, #2
 80025f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6899      	ldr	r1, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7e1b      	ldrb	r3, [r3, #24]
 8002604:	005a      	lsls	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01b      	beq.n	8002650 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002626:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002636:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	3b01      	subs	r3, #1
 8002644:	035a      	lsls	r2, r3, #13
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	e007      	b.n	8002660 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	3b01      	subs	r3, #1
 800267c:	051a      	lsls	r2, r3, #20
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6899      	ldr	r1, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026a2:	025a      	lsls	r2, r3, #9
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6899      	ldr	r1, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	029a      	lsls	r2, r3, #10
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	40012300 	.word	0x40012300
 80026e0:	0f000001 	.word	0x0f000001

080026e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d13c      	bne.n	8002778 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d12b      	bne.n	8002770 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800271c:	2b00      	cmp	r3, #0
 800271e:	d127      	bne.n	8002770 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002738:	2b00      	cmp	r3, #0
 800273a:	d119      	bne.n	8002770 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0220 	bic.w	r2, r2, #32
 800274a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f043 0201 	orr.w	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff fd7b 	bl	800226c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002776:	e00e      	b.n	8002796 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff fd85 	bl	8002294 <HAL_ADC_ErrorCallback>
}
 800278a:	e004      	b.n	8002796 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
}
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff fd67 	bl	8002280 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2240      	movs	r2, #64	; 0x40
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f043 0204 	orr.w	r2, r3, #4
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f7ff fd5a 	bl	8002294 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e0ed      	b.n	80029d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fc3c 	bl	8001084 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0202 	bic.w	r2, r2, #2
 800281a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800281c:	f7ff fbc2 	bl	8001fa4 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002822:	e012      	b.n	800284a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002824:	f7ff fbbe 	bl	8001fa4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b0a      	cmp	r3, #10
 8002830:	d90b      	bls.n	800284a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2205      	movs	r2, #5
 8002842:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0c5      	b.n	80029d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e5      	bne.n	8002824 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002868:	f7ff fb9c 	bl	8001fa4 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800286e:	e012      	b.n	8002896 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002870:	f7ff fb98 	bl	8001fa4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b0a      	cmp	r3, #10
 800287c:	d90b      	bls.n	8002896 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2205      	movs	r2, #5
 800288e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e09f      	b.n	80029d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0e5      	beq.n	8002870 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	7e1b      	ldrb	r3, [r3, #24]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d108      	bne.n	80028be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e007      	b.n	80028ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7e5b      	ldrb	r3, [r3, #25]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d108      	bne.n	80028e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e007      	b.n	80028f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7e9b      	ldrb	r3, [r3, #26]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d108      	bne.n	8002912 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0220 	orr.w	r2, r2, #32
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e007      	b.n	8002922 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0220 	bic.w	r2, r2, #32
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7edb      	ldrb	r3, [r3, #27]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d108      	bne.n	800293c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0210 	bic.w	r2, r2, #16
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e007      	b.n	800294c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0210 	orr.w	r2, r2, #16
 800294a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7f1b      	ldrb	r3, [r3, #28]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d108      	bne.n	8002966 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0208 	orr.w	r2, r2, #8
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e007      	b.n	8002976 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0208 	bic.w	r2, r2, #8
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7f5b      	ldrb	r3, [r3, #29]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d108      	bne.n	8002990 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0204 	orr.w	r2, r2, #4
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e007      	b.n	80029a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0204 	bic.w	r2, r2, #4
 800299e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	ea42 0103 	orr.w	r1, r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	1e5a      	subs	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80029f8:	7cfb      	ldrb	r3, [r7, #19]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d003      	beq.n	8002a06 <HAL_CAN_ConfigFilter+0x26>
 80029fe:	7cfb      	ldrb	r3, [r7, #19]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	f040 80be 	bne.w	8002b82 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002a06:	4b65      	ldr	r3, [pc, #404]	; (8002b9c <HAL_CAN_ConfigFilter+0x1bc>)
 8002a08:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	431a      	orrs	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2201      	movs	r2, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	401a      	ands	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d123      	bne.n	8002ab0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a8a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3248      	adds	r2, #72	; 0x48
 8002a90:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002aa4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aa6:	6979      	ldr	r1, [r7, #20]
 8002aa8:	3348      	adds	r3, #72	; 0x48
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d122      	bne.n	8002afe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ad8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3248      	adds	r2, #72	; 0x48
 8002ade:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002af2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002af4:	6979      	ldr	r1, [r7, #20]
 8002af6:	3348      	adds	r3, #72	; 0x48
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	401a      	ands	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b18:	e007      	b.n	8002b2a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002b44:	e007      	b.n	8002b56 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d107      	bne.n	8002b6e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b74:	f023 0201 	bic.w	r2, r3, #1
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e006      	b.n	8002b90 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40006400 	.word	0x40006400

08002ba0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d12e      	bne.n	8002c12 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bcc:	f7ff f9ea 	bl	8001fa4 <HAL_GetTick>
 8002bd0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bd2:	e012      	b.n	8002bfa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bd4:	f7ff f9e6 	bl	8001fa4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b0a      	cmp	r3, #10
 8002be0:	d90b      	bls.n	8002bfa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e012      	b.n	8002c20 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e5      	bne.n	8002bd4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e006      	b.n	8002c20 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c3c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d003      	beq.n	8002c4c <HAL_CAN_GetRxMessage+0x24>
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	f040 80f3 	bne.w	8002e32 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10e      	bne.n	8002c70 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d116      	bne.n	8002c8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0e7      	b.n	8002e40 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0d8      	b.n	8002e40 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	331b      	adds	r3, #27
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	4413      	add	r3, r2
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0204 	and.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10c      	bne.n	8002cc6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	331b      	adds	r3, #27
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	4413      	add	r3, r2
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0d5b      	lsrs	r3, r3, #21
 8002cbc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e00b      	b.n	8002cde <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	331b      	adds	r3, #27
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	4413      	add	r3, r2
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	08db      	lsrs	r3, r3, #3
 8002cd6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	331b      	adds	r3, #27
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	4413      	add	r3, r2
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0202 	and.w	r2, r3, #2
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	331b      	adds	r3, #27
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	4413      	add	r3, r2
 8002d00:	3304      	adds	r3, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	331b      	adds	r3, #27
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	4413      	add	r3, r2
 8002d18:	3304      	adds	r3, #4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	331b      	adds	r3, #27
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	4413      	add	r3, r2
 8002d30:	3304      	adds	r3, #4
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	0a1a      	lsrs	r2, r3, #8
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0c1a      	lsrs	r2, r3, #16
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	3302      	adds	r3, #2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	0e1a      	lsrs	r2, r3, #24
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	3303      	adds	r3, #3
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	3304      	adds	r3, #4
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0a1a      	lsrs	r2, r3, #8
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	3305      	adds	r3, #5
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	0c1a      	lsrs	r2, r3, #16
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	3306      	adds	r3, #6
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0e1a      	lsrs	r2, r3, #24
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	3307      	adds	r3, #7
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d108      	bne.n	8002e1e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0220 	orr.w	r2, r2, #32
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	e007      	b.n	8002e2e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0220 	orr.w	r2, r2, #32
 8002e2c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e006      	b.n	8002e40 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
  }
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e5c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d002      	beq.n	8002e6a <HAL_CAN_ActivateNotification+0x1e>
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d109      	bne.n	8002e7e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6959      	ldr	r1, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e006      	b.n	8002e8c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
  }
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d07c      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d023      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2201      	movs	r2, #1
 8002eee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f97d 	bl	80031fa <HAL_CAN_TxMailbox0CompleteCallback>
 8002f00:	e016      	b.n	8002f30 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
 8002f14:	e00c      	b.n	8002f30 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
 8002f28:	e002      	b.n	8002f30 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f983 	bl	8003236 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d024      	beq.n	8002f84 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f95d 	bl	800320e <HAL_CAN_TxMailbox1CompleteCallback>
 8002f54:	e016      	b.n	8002f84 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
 8002f68:	e00c      	b.n	8002f84 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7c:	e002      	b.n	8002f84 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f963 	bl	800324a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d024      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f93d 	bl	8003222 <HAL_CAN_TxMailbox2CompleteCallback>
 8002fa8:	e016      	b.n	8002fd8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d004      	beq.n	8002fbe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	e00c      	b.n	8002fd8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd0:	e002      	b.n	8002fd8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f943 	bl	800325e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2208      	movs	r2, #8
 8003016:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f92a 	bl	8003272 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d009      	beq.n	800303c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd fae4 	bl	8000604 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00c      	beq.n	8003060 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003056:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2210      	movs	r2, #16
 800305e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d006      	beq.n	8003082 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2208      	movs	r2, #8
 800307a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f902 	bl	8003286 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	d009      	beq.n	80030a0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd facc 	bl	8000638 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d006      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2210      	movs	r2, #16
 80030ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f8ec 	bl	800329a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2208      	movs	r2, #8
 80030dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8e5 	bl	80032ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d075      	beq.n	80031da <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d06c      	beq.n	80031d2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	f043 0304 	orr.w	r3, r3, #4
 800314a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003152:	2b00      	cmp	r3, #0
 8003154:	d03d      	beq.n	80031d2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800315c:	2b00      	cmp	r3, #0
 800315e:	d038      	beq.n	80031d2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003166:	2b30      	cmp	r3, #48	; 0x30
 8003168:	d017      	beq.n	800319a <HAL_CAN_IRQHandler+0x302>
 800316a:	2b30      	cmp	r3, #48	; 0x30
 800316c:	d804      	bhi.n	8003178 <HAL_CAN_IRQHandler+0x2e0>
 800316e:	2b10      	cmp	r3, #16
 8003170:	d009      	beq.n	8003186 <HAL_CAN_IRQHandler+0x2ee>
 8003172:	2b20      	cmp	r3, #32
 8003174:	d00c      	beq.n	8003190 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003176:	e024      	b.n	80031c2 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003178:	2b50      	cmp	r3, #80	; 0x50
 800317a:	d018      	beq.n	80031ae <HAL_CAN_IRQHandler+0x316>
 800317c:	2b60      	cmp	r3, #96	; 0x60
 800317e:	d01b      	beq.n	80031b8 <HAL_CAN_IRQHandler+0x320>
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d00f      	beq.n	80031a4 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003184:	e01d      	b.n	80031c2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	f043 0308 	orr.w	r3, r3, #8
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800318e:	e018      	b.n	80031c2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f043 0310 	orr.w	r3, r3, #16
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003198:	e013      	b.n	80031c2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	f043 0320 	orr.w	r3, r3, #32
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031a2:	e00e      	b.n	80031c2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ac:	e009      	b.n	80031c2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031b6:	e004      	b.n	80031c2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2204      	movs	r2, #4
 80031d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f868 	bl	80032c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80031f2:	bf00      	nop
 80031f4:	3728      	adds	r7, #40	; 0x28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <__NVIC_SetPriorityGrouping>:
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <__NVIC_SetPriorityGrouping+0x44>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032f4:	4013      	ands	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800330a:	4a04      	ldr	r2, [pc, #16]	; (800331c <__NVIC_SetPriorityGrouping+0x44>)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	60d3      	str	r3, [r2, #12]
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <__NVIC_GetPriorityGrouping>:
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <__NVIC_GetPriorityGrouping+0x18>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f003 0307 	and.w	r3, r3, #7
}
 800332e:	4618      	mov	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <__NVIC_EnableIRQ>:
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	2b00      	cmp	r3, #0
 800334c:	db0b      	blt.n	8003366 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	f003 021f 	and.w	r2, r3, #31
 8003354:	4907      	ldr	r1, [pc, #28]	; (8003374 <__NVIC_EnableIRQ+0x38>)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2001      	movs	r0, #1
 800335e:	fa00 f202 	lsl.w	r2, r0, r2
 8003362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	e000e100 	.word	0xe000e100

08003378 <__NVIC_SetPriority>:
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003388:	2b00      	cmp	r3, #0
 800338a:	db0a      	blt.n	80033a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	490c      	ldr	r1, [pc, #48]	; (80033c4 <__NVIC_SetPriority+0x4c>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	440b      	add	r3, r1
 800339c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033a0:	e00a      	b.n	80033b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4908      	ldr	r1, [pc, #32]	; (80033c8 <__NVIC_SetPriority+0x50>)
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	3b04      	subs	r3, #4
 80033b0:	0112      	lsls	r2, r2, #4
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	440b      	add	r3, r1
 80033b6:	761a      	strb	r2, [r3, #24]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000e100 	.word	0xe000e100
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <NVIC_EncodePriority>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f1c3 0307 	rsb	r3, r3, #7
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	bf28      	it	cs
 80033ea:	2304      	movcs	r3, #4
 80033ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3304      	adds	r3, #4
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	d902      	bls.n	80033fc <NVIC_EncodePriority+0x30>
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3b03      	subs	r3, #3
 80033fa:	e000      	b.n	80033fe <NVIC_EncodePriority+0x32>
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	f04f 32ff 	mov.w	r2, #4294967295
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	401a      	ands	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003414:	f04f 31ff 	mov.w	r1, #4294967295
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	43d9      	mvns	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	4313      	orrs	r3, r2
}
 8003426:	4618      	mov	r0, r3
 8003428:	3724      	adds	r7, #36	; 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <SysTick_Config>:
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003444:	d301      	bcc.n	800344a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003446:	2301      	movs	r3, #1
 8003448:	e00f      	b.n	800346a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344a:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <SysTick_Config+0x40>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003452:	210f      	movs	r1, #15
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	f7ff ff8e 	bl	8003378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <SysTick_Config+0x40>)
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003462:	4b04      	ldr	r3, [pc, #16]	; (8003474 <SysTick_Config+0x40>)
 8003464:	2207      	movs	r2, #7
 8003466:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	e000e010 	.word	0xe000e010

08003478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff29 	bl	80032d8 <__NVIC_SetPriorityGrouping>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a0:	f7ff ff3e 	bl	8003320 <__NVIC_GetPriorityGrouping>
 80034a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	6978      	ldr	r0, [r7, #20]
 80034ac:	f7ff ff8e 	bl	80033cc <NVIC_EncodePriority>
 80034b0:	4602      	mov	r2, r0
 80034b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff5d 	bl	8003378 <__NVIC_SetPriority>
}
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff31 	bl	800333c <__NVIC_EnableIRQ>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ffa2 	bl	8003434 <SysTick_Config>
 80034f0:	4603      	mov	r3, r0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80034fe:	f7fd f9df 	bl	80008c0 <HAL_SYSTICK_Callback>
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e00e      	b.n	8003536 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	795b      	ldrb	r3, [r3, #5]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d105      	bne.n	800352e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd fe25 	bl	8001178 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e014      	b.n	800357a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	791b      	ldrb	r3, [r3, #4]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d105      	bne.n	8003566 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7fd fe55 	bl	8001210 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003582:	b480      	push	{r7}
 8003584:	b087      	sub	sp, #28
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	795b      	ldrb	r3, [r3, #5]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_DAC_ConfigChannel+0x20>
 800359e:	2302      	movs	r3, #2
 80035a0:	e036      	b.n	8003610 <HAL_DAC_ConfigChannel+0x8e>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2202      	movs	r2, #2
 80035ac:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80035b6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4013      	ands	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	22c0      	movs	r2, #192	; 0xc0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43da      	mvns	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	400a      	ands	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7fe fcbc 	bl	8001fa4 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e099      	b.n	800376c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003658:	e00f      	b.n	800367a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800365a:	f7fe fca3 	bl	8001fa4 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b05      	cmp	r3, #5
 8003666:	d908      	bls.n	800367a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2203      	movs	r2, #3
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e078      	b.n	800376c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e8      	bne.n	800365a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <HAL_DMA_Init+0x158>)
 8003694:	4013      	ands	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d107      	bne.n	80036e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	4313      	orrs	r3, r2
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0307 	bic.w	r3, r3, #7
 80036fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b04      	cmp	r3, #4
 800370c:	d117      	bne.n	800373e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00e      	beq.n	800373e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fa91 	bl	8003c48 <DMA_CheckFifoParam>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2240      	movs	r2, #64	; 0x40
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800373a:	2301      	movs	r3, #1
 800373c:	e016      	b.n	800376c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa48 	bl	8003bdc <DMA_CalcBaseAndBitshift>
 800374c:	4603      	mov	r3, r0
 800374e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	223f      	movs	r2, #63	; 0x3f
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	f010803f 	.word	0xf010803f

08003778 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_DMA_Start_IT+0x26>
 800379a:	2302      	movs	r3, #2
 800379c:	e040      	b.n	8003820 <HAL_DMA_Start_IT+0xa8>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d12f      	bne.n	8003812 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f9da 	bl	8003b80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	223f      	movs	r2, #63	; 0x3f
 80037d2:	409a      	lsls	r2, r3
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0216 	orr.w	r2, r2, #22
 80037e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0208 	orr.w	r2, r2, #8
 80037fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e005      	b.n	800381e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800381a:	2302      	movs	r3, #2
 800381c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800381e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d004      	beq.n	8003846 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e00c      	b.n	8003860 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2205      	movs	r2, #5
 800384a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003878:	4b92      	ldr	r3, [pc, #584]	; (8003ac4 <HAL_DMA_IRQHandler+0x258>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a92      	ldr	r2, [pc, #584]	; (8003ac8 <HAL_DMA_IRQHandler+0x25c>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0a9b      	lsrs	r3, r3, #10
 8003884:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	2208      	movs	r2, #8
 8003898:	409a      	lsls	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d01a      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0204 	bic.w	r2, r2, #4
 80038be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	2208      	movs	r2, #8
 80038c6:	409a      	lsls	r2, r3
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	f043 0201 	orr.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	2201      	movs	r2, #1
 80038de:	409a      	lsls	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	2201      	movs	r2, #1
 80038fc:	409a      	lsls	r2, r3
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f043 0202 	orr.w	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	2204      	movs	r2, #4
 8003914:	409a      	lsls	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d012      	beq.n	8003944 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00b      	beq.n	8003944 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	2204      	movs	r2, #4
 8003932:	409a      	lsls	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f043 0204 	orr.w	r2, r3, #4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	2210      	movs	r2, #16
 800394a:	409a      	lsls	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d043      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d03c      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	2210      	movs	r2, #16
 8003968:	409a      	lsls	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d018      	beq.n	80039ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d024      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
 800399a:	e01f      	b.n	80039dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01b      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
 80039ac:	e016      	b.n	80039dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0208 	bic.w	r2, r2, #8
 80039ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	2220      	movs	r2, #32
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 808e 	beq.w	8003b0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8086 	beq.w	8003b0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	2220      	movs	r2, #32
 8003a04:	409a      	lsls	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d136      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0216 	bic.w	r2, r2, #22
 8003a24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <HAL_DMA_IRQHandler+0x1da>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0208 	bic.w	r2, r2, #8
 8003a54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	223f      	movs	r2, #63	; 0x3f
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d07d      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
        }
        return;
 8003a82:	e078      	b.n	8003b76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01c      	beq.n	8003acc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d108      	bne.n	8003ab2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d030      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e02b      	b.n	8003b0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d027      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
 8003ac2:	e022      	b.n	8003b0a <HAL_DMA_IRQHandler+0x29e>
 8003ac4:	2000000c 	.word	0x2000000c
 8003ac8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10f      	bne.n	8003afa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0210 	bic.w	r2, r2, #16
 8003ae8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d032      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d022      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2205      	movs	r2, #5
 8003b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d307      	bcc.n	8003b52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f2      	bne.n	8003b36 <HAL_DMA_IRQHandler+0x2ca>
 8003b50:	e000      	b.n	8003b54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
 8003b74:	e000      	b.n	8003b78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003b76:	bf00      	nop
    }
  }
}
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop

08003b80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d108      	bne.n	8003bc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bbe:	e007      	b.n	8003bd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	60da      	str	r2, [r3, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	3b10      	subs	r3, #16
 8003bec:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <DMA_CalcBaseAndBitshift+0x64>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bf6:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <DMA_CalcBaseAndBitshift+0x68>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d909      	bls.n	8003c1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c12:	f023 0303 	bic.w	r3, r3, #3
 8003c16:	1d1a      	adds	r2, r3, #4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c1c:	e007      	b.n	8003c2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c26:	f023 0303 	bic.w	r3, r3, #3
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	aaaaaaab 	.word	0xaaaaaaab
 8003c44:	08007468 	.word	0x08007468

08003c48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d11f      	bne.n	8003ca2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d855      	bhi.n	8003d14 <DMA_CheckFifoParam+0xcc>
 8003c68:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <DMA_CheckFifoParam+0x28>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c93 	.word	0x08003c93
 8003c78:	08003c81 	.word	0x08003c81
 8003c7c:	08003d15 	.word	0x08003d15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d045      	beq.n	8003d18 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c90:	e042      	b.n	8003d18 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c9a:	d13f      	bne.n	8003d1c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca0:	e03c      	b.n	8003d1c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003caa:	d121      	bne.n	8003cf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d836      	bhi.n	8003d20 <DMA_CheckFifoParam+0xd8>
 8003cb2:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <DMA_CheckFifoParam+0x70>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003ccf 	.word	0x08003ccf
 8003cc0:	08003cc9 	.word	0x08003cc9
 8003cc4:	08003ce1 	.word	0x08003ce1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ccc:	e02f      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d024      	beq.n	8003d24 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cde:	e021      	b.n	8003d24 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ce8:	d11e      	bne.n	8003d28 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cee:	e01b      	b.n	8003d28 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d902      	bls.n	8003cfc <DMA_CheckFifoParam+0xb4>
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d003      	beq.n	8003d02 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cfa:	e018      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003d00:	e015      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00e      	beq.n	8003d2c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
      break;
 8003d12:	e00b      	b.n	8003d2c <DMA_CheckFifoParam+0xe4>
      break;
 8003d14:	bf00      	nop
 8003d16:	e00a      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;
 8003d18:	bf00      	nop
 8003d1a:	e008      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;
 8003d1c:	bf00      	nop
 8003d1e:	e006      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;
 8003d20:	bf00      	nop
 8003d22:	e004      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;
 8003d24:	bf00      	nop
 8003d26:	e002      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;   
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
      break;
 8003d2c:	bf00      	nop
    }
  } 
  
  return status; 
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	; 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e16b      	b.n	8004030 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d58:	2201      	movs	r2, #1
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	f040 815a 	bne.w	800402a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d00b      	beq.n	8003d96 <HAL_GPIO_Init+0x5a>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d007      	beq.n	8003d96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d8a:	2b11      	cmp	r3, #17
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b12      	cmp	r3, #18
 8003d94:	d130      	bne.n	8003df8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	2203      	movs	r2, #3
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dcc:	2201      	movs	r2, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 0201 	and.w	r2, r3, #1
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	2203      	movs	r2, #3
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0xfc>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b12      	cmp	r3, #18
 8003e36:	d123      	bne.n	8003e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	08da      	lsrs	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3208      	adds	r2, #8
 8003e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	220f      	movs	r2, #15
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	08da      	lsrs	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3208      	adds	r2, #8
 8003e7a:	69b9      	ldr	r1, [r7, #24]
 8003e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0203 	and.w	r2, r3, #3
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80b4 	beq.w	800402a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	4b5f      	ldr	r3, [pc, #380]	; (8004044 <HAL_GPIO_Init+0x308>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	4a5e      	ldr	r2, [pc, #376]	; (8004044 <HAL_GPIO_Init+0x308>)
 8003ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ed2:	4b5c      	ldr	r3, [pc, #368]	; (8004044 <HAL_GPIO_Init+0x308>)
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ede:	4a5a      	ldr	r2, [pc, #360]	; (8004048 <HAL_GPIO_Init+0x30c>)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	089b      	lsrs	r3, r3, #2
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a51      	ldr	r2, [pc, #324]	; (800404c <HAL_GPIO_Init+0x310>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d02b      	beq.n	8003f62 <HAL_GPIO_Init+0x226>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a50      	ldr	r2, [pc, #320]	; (8004050 <HAL_GPIO_Init+0x314>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d025      	beq.n	8003f5e <HAL_GPIO_Init+0x222>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a4f      	ldr	r2, [pc, #316]	; (8004054 <HAL_GPIO_Init+0x318>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01f      	beq.n	8003f5a <HAL_GPIO_Init+0x21e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a4e      	ldr	r2, [pc, #312]	; (8004058 <HAL_GPIO_Init+0x31c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d019      	beq.n	8003f56 <HAL_GPIO_Init+0x21a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a4d      	ldr	r2, [pc, #308]	; (800405c <HAL_GPIO_Init+0x320>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_GPIO_Init+0x216>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a4c      	ldr	r2, [pc, #304]	; (8004060 <HAL_GPIO_Init+0x324>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00d      	beq.n	8003f4e <HAL_GPIO_Init+0x212>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a4b      	ldr	r2, [pc, #300]	; (8004064 <HAL_GPIO_Init+0x328>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <HAL_GPIO_Init+0x20e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a4a      	ldr	r2, [pc, #296]	; (8004068 <HAL_GPIO_Init+0x32c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d101      	bne.n	8003f46 <HAL_GPIO_Init+0x20a>
 8003f42:	2307      	movs	r3, #7
 8003f44:	e00e      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f46:	2308      	movs	r3, #8
 8003f48:	e00c      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f4a:	2306      	movs	r3, #6
 8003f4c:	e00a      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f4e:	2305      	movs	r3, #5
 8003f50:	e008      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f52:	2304      	movs	r3, #4
 8003f54:	e006      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f56:	2303      	movs	r3, #3
 8003f58:	e004      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e002      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f62:	2300      	movs	r3, #0
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	f002 0203 	and.w	r2, r2, #3
 8003f6a:	0092      	lsls	r2, r2, #2
 8003f6c:	4093      	lsls	r3, r2
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f74:	4934      	ldr	r1, [pc, #208]	; (8004048 <HAL_GPIO_Init+0x30c>)
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f82:	4b3a      	ldr	r3, [pc, #232]	; (800406c <HAL_GPIO_Init+0x330>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fa6:	4a31      	ldr	r2, [pc, #196]	; (800406c <HAL_GPIO_Init+0x330>)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fac:	4b2f      	ldr	r3, [pc, #188]	; (800406c <HAL_GPIO_Init+0x330>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fd0:	4a26      	ldr	r2, [pc, #152]	; (800406c <HAL_GPIO_Init+0x330>)
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fd6:	4b25      	ldr	r3, [pc, #148]	; (800406c <HAL_GPIO_Init+0x330>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	; (800406c <HAL_GPIO_Init+0x330>)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <HAL_GPIO_Init+0x330>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004024:	4a11      	ldr	r2, [pc, #68]	; (800406c <HAL_GPIO_Init+0x330>)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	3301      	adds	r3, #1
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	2b0f      	cmp	r3, #15
 8004034:	f67f ae90 	bls.w	8003d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004038:	bf00      	nop
 800403a:	3724      	adds	r7, #36	; 0x24
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40023800 	.word	0x40023800
 8004048:	40013800 	.word	0x40013800
 800404c:	40020000 	.word	0x40020000
 8004050:	40020400 	.word	0x40020400
 8004054:	40020800 	.word	0x40020800
 8004058:	40020c00 	.word	0x40020c00
 800405c:	40021000 	.word	0x40021000
 8004060:	40021400 	.word	0x40021400
 8004064:	40021800 	.word	0x40021800
 8004068:	40021c00 	.word	0x40021c00
 800406c:	40013c00 	.word	0x40013c00

08004070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	807b      	strh	r3, [r7, #2]
 800407c:	4613      	mov	r3, r2
 800407e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004080:	787b      	ldrb	r3, [r7, #1]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004086:	887a      	ldrh	r2, [r7, #2]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800408c:	e003      	b.n	8004096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800408e:	887b      	ldrh	r3, [r7, #2]
 8004090:	041a      	lsls	r2, r3, #16
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	619a      	str	r2, [r3, #24]
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	460b      	mov	r3, r1
 80040ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	887b      	ldrh	r3, [r7, #2]
 80040b4:	401a      	ands	r2, r3
 80040b6:	887b      	ldrh	r3, [r7, #2]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d104      	bne.n	80040c6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040bc:	887b      	ldrh	r3, [r7, #2]
 80040be:	041a      	lsls	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80040c4:	e002      	b.n	80040cc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80040c6:	887a      	ldrh	r2, [r7, #2]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	619a      	str	r2, [r3, #24]
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040da:	b08f      	sub	sp, #60	; 0x3c
 80040dc:	af0a      	add	r7, sp, #40	; 0x28
 80040de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e10f      	b.n	800430a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7fd fe75 	bl	8001df4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2203      	movs	r2, #3
 800410e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f002 ff04 	bl	8006f36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	687e      	ldr	r6, [r7, #4]
 8004136:	466d      	mov	r5, sp
 8004138:	f106 0410 	add.w	r4, r6, #16
 800413c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800413e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004144:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004148:	e885 0003 	stmia.w	r5, {r0, r1}
 800414c:	1d33      	adds	r3, r6, #4
 800414e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004150:	6838      	ldr	r0, [r7, #0]
 8004152:	f002 fe8f 	bl	8006e74 <USB_CoreInit>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0d0      	b.n	800430a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f002 fef2 	bl	8006f58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004174:	2300      	movs	r3, #0
 8004176:	73fb      	strb	r3, [r7, #15]
 8004178:	e04a      	b.n	8004210 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800417a:	7bfa      	ldrb	r2, [r7, #15]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	333d      	adds	r3, #61	; 0x3d
 800418a:	2201      	movs	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800418e:	7bfa      	ldrb	r2, [r7, #15]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	333c      	adds	r3, #60	; 0x3c
 800419e:	7bfa      	ldrb	r2, [r7, #15]
 80041a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041a2:	7bfa      	ldrb	r2, [r7, #15]
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	b298      	uxth	r0, r3
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	3342      	adds	r3, #66	; 0x42
 80041b6:	4602      	mov	r2, r0
 80041b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	333f      	adds	r3, #63	; 0x3f
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041ce:	7bfa      	ldrb	r2, [r7, #15]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	3344      	adds	r3, #68	; 0x44
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041e2:	7bfa      	ldrb	r2, [r7, #15]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	3348      	adds	r3, #72	; 0x48
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	3350      	adds	r3, #80	; 0x50
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	3301      	adds	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	7bfa      	ldrb	r2, [r7, #15]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	429a      	cmp	r2, r3
 8004218:	d3af      	bcc.n	800417a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]
 800421e:	e044      	b.n	80042aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004220:	7bfa      	ldrb	r2, [r7, #15]
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004262:	7bfa      	ldrb	r2, [r7, #15]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800428e:	7bfa      	ldrb	r2, [r7, #15]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	3301      	adds	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d3b5      	bcc.n	8004220 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	687e      	ldr	r6, [r7, #4]
 80042bc:	466d      	mov	r5, sp
 80042be:	f106 0410 	add.w	r4, r6, #16
 80042c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80042d2:	1d33      	adds	r3, r6, #4
 80042d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042d6:	6838      	ldr	r0, [r7, #0]
 80042d8:	f002 fe68 	bl	8006fac <USB_DevInit>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e00d      	b.n	800430a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f003 f817 	bl	8007336 <USB_DevDisconnect>

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e25b      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d075      	beq.n	800441e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004332:	4ba3      	ldr	r3, [pc, #652]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b04      	cmp	r3, #4
 800433c:	d00c      	beq.n	8004358 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800433e:	4ba0      	ldr	r3, [pc, #640]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004346:	2b08      	cmp	r3, #8
 8004348:	d112      	bne.n	8004370 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434a:	4b9d      	ldr	r3, [pc, #628]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004356:	d10b      	bne.n	8004370 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	4b99      	ldr	r3, [pc, #612]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d05b      	beq.n	800441c <HAL_RCC_OscConfig+0x108>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d157      	bne.n	800441c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e236      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004378:	d106      	bne.n	8004388 <HAL_RCC_OscConfig+0x74>
 800437a:	4b91      	ldr	r3, [pc, #580]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a90      	ldr	r2, [pc, #576]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e01d      	b.n	80043c4 <HAL_RCC_OscConfig+0xb0>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0x98>
 8004392:	4b8b      	ldr	r3, [pc, #556]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a8a      	ldr	r2, [pc, #552]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b88      	ldr	r3, [pc, #544]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a87      	ldr	r2, [pc, #540]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0xb0>
 80043ac:	4b84      	ldr	r3, [pc, #528]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a83      	ldr	r2, [pc, #524]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b81      	ldr	r3, [pc, #516]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a80      	ldr	r2, [pc, #512]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fd fdea 	bl	8001fa4 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fd fde6 	bl	8001fa4 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	; 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e1fb      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b76      	ldr	r3, [pc, #472]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0xc0>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fd fdd6 	bl	8001fa4 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fd fdd2 	bl	8001fa4 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e1e7      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	4b6c      	ldr	r3, [pc, #432]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0xe8>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d063      	beq.n	80044f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800442a:	4b65      	ldr	r3, [pc, #404]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004436:	4b62      	ldr	r3, [pc, #392]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800443e:	2b08      	cmp	r3, #8
 8004440:	d11c      	bne.n	800447c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004442:	4b5f      	ldr	r3, [pc, #380]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d116      	bne.n	800447c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444e:	4b5c      	ldr	r3, [pc, #368]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_RCC_OscConfig+0x152>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e1bb      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004466:	4b56      	ldr	r3, [pc, #344]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4952      	ldr	r1, [pc, #328]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	e03a      	b.n	80044f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004484:	4b4f      	ldr	r3, [pc, #316]	; (80045c4 <HAL_RCC_OscConfig+0x2b0>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fd fd8b 	bl	8001fa4 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004492:	f7fd fd87 	bl	8001fa4 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e19c      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a4:	4b46      	ldr	r3, [pc, #280]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b0:	4b43      	ldr	r3, [pc, #268]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4940      	ldr	r1, [pc, #256]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]
 80044c4:	e015      	b.n	80044f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044c6:	4b3f      	ldr	r3, [pc, #252]	; (80045c4 <HAL_RCC_OscConfig+0x2b0>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd fd6a 	bl	8001fa4 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d4:	f7fd fd66 	bl	8001fa4 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e17b      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	4b36      	ldr	r3, [pc, #216]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d030      	beq.n	8004560 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d016      	beq.n	8004534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004506:	4b30      	ldr	r3, [pc, #192]	; (80045c8 <HAL_RCC_OscConfig+0x2b4>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fd fd4a 	bl	8001fa4 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004514:	f7fd fd46 	bl	8001fa4 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e15b      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004526:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x200>
 8004532:	e015      	b.n	8004560 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004534:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <HAL_RCC_OscConfig+0x2b4>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453a:	f7fd fd33 	bl	8001fa4 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004542:	f7fd fd2f 	bl	8001fa4 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e144      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004554:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f0      	bne.n	8004542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80a0 	beq.w	80046ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800456e:	2300      	movs	r3, #0
 8004570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004572:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10f      	bne.n	800459e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	4a0e      	ldr	r2, [pc, #56]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458c:	6413      	str	r3, [r2, #64]	; 0x40
 800458e:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <HAL_RCC_OscConfig+0x2ac>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_OscConfig+0x2b8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d121      	bne.n	80045ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <HAL_RCC_OscConfig+0x2b8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a07      	ldr	r2, [pc, #28]	; (80045cc <HAL_RCC_OscConfig+0x2b8>)
 80045b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b6:	f7fd fcf5 	bl	8001fa4 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045bc:	e011      	b.n	80045e2 <HAL_RCC_OscConfig+0x2ce>
 80045be:	bf00      	nop
 80045c0:	40023800 	.word	0x40023800
 80045c4:	42470000 	.word	0x42470000
 80045c8:	42470e80 	.word	0x42470e80
 80045cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d0:	f7fd fce8 	bl	8001fa4 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e0fd      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e2:	4b81      	ldr	r3, [pc, #516]	; (80047e8 <HAL_RCC_OscConfig+0x4d4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d106      	bne.n	8004604 <HAL_RCC_OscConfig+0x2f0>
 80045f6:	4b7d      	ldr	r3, [pc, #500]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a7c      	ldr	r2, [pc, #496]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	6713      	str	r3, [r2, #112]	; 0x70
 8004602:	e01c      	b.n	800463e <HAL_RCC_OscConfig+0x32a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b05      	cmp	r3, #5
 800460a:	d10c      	bne.n	8004626 <HAL_RCC_OscConfig+0x312>
 800460c:	4b77      	ldr	r3, [pc, #476]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4a76      	ldr	r2, [pc, #472]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	6713      	str	r3, [r2, #112]	; 0x70
 8004618:	4b74      	ldr	r3, [pc, #464]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	4a73      	ldr	r2, [pc, #460]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	6713      	str	r3, [r2, #112]	; 0x70
 8004624:	e00b      	b.n	800463e <HAL_RCC_OscConfig+0x32a>
 8004626:	4b71      	ldr	r3, [pc, #452]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a70      	ldr	r2, [pc, #448]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
 8004632:	4b6e      	ldr	r3, [pc, #440]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	4a6d      	ldr	r2, [pc, #436]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 8004638:	f023 0304 	bic.w	r3, r3, #4
 800463c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d015      	beq.n	8004672 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004646:	f7fd fcad 	bl	8001fa4 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464c:	e00a      	b.n	8004664 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fd fca9 	bl	8001fa4 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e0bc      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004664:	4b61      	ldr	r3, [pc, #388]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0ee      	beq.n	800464e <HAL_RCC_OscConfig+0x33a>
 8004670:	e014      	b.n	800469c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004672:	f7fd fc97 	bl	8001fa4 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004678:	e00a      	b.n	8004690 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800467a:	f7fd fc93 	bl	8001fa4 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	; 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0a6      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004690:	4b56      	ldr	r3, [pc, #344]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1ee      	bne.n	800467a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d105      	bne.n	80046ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a2:	4b52      	ldr	r3, [pc, #328]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	4a51      	ldr	r2, [pc, #324]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 80046a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 8092 	beq.w	80047dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046b8:	4b4c      	ldr	r3, [pc, #304]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 030c 	and.w	r3, r3, #12
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d05c      	beq.n	800477e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d141      	bne.n	8004750 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046cc:	4b48      	ldr	r3, [pc, #288]	; (80047f0 <HAL_RCC_OscConfig+0x4dc>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fd fc67 	bl	8001fa4 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046da:	f7fd fc63 	bl	8001fa4 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e078      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ec:	4b3f      	ldr	r3, [pc, #252]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f0      	bne.n	80046da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	019b      	lsls	r3, r3, #6
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	3b01      	subs	r3, #1
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	061b      	lsls	r3, r3, #24
 800471c:	4933      	ldr	r1, [pc, #204]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 800471e:	4313      	orrs	r3, r2
 8004720:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004722:	4b33      	ldr	r3, [pc, #204]	; (80047f0 <HAL_RCC_OscConfig+0x4dc>)
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fd fc3c 	bl	8001fa4 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004730:	f7fd fc38 	bl	8001fa4 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e04d      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004742:	4b2a      	ldr	r3, [pc, #168]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0x41c>
 800474e:	e045      	b.n	80047dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004750:	4b27      	ldr	r3, [pc, #156]	; (80047f0 <HAL_RCC_OscConfig+0x4dc>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004756:	f7fd fc25 	bl	8001fa4 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475e:	f7fd fc21 	bl	8001fa4 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e036      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004770:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f0      	bne.n	800475e <HAL_RCC_OscConfig+0x44a>
 800477c:	e02e      	b.n	80047dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e029      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <HAL_RCC_OscConfig+0x4d8>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	429a      	cmp	r2, r3
 800479c:	d11c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d115      	bne.n	80047d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047b2:	4013      	ands	r3, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d10d      	bne.n	80047d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d106      	bne.n	80047d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40007000 	.word	0x40007000
 80047ec:	40023800 	.word	0x40023800
 80047f0:	42470060 	.word	0x42470060

080047f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0cc      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004808:	4b68      	ldr	r3, [pc, #416]	; (80049ac <HAL_RCC_ClockConfig+0x1b8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d90c      	bls.n	8004830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004816:	4b65      	ldr	r3, [pc, #404]	; (80049ac <HAL_RCC_ClockConfig+0x1b8>)
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481e:	4b63      	ldr	r3, [pc, #396]	; (80049ac <HAL_RCC_ClockConfig+0x1b8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d001      	beq.n	8004830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0b8      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d020      	beq.n	800487e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004848:	4b59      	ldr	r3, [pc, #356]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4a58      	ldr	r2, [pc, #352]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004860:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a52      	ldr	r2, [pc, #328]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800486a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800486c:	4b50      	ldr	r3, [pc, #320]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	494d      	ldr	r1, [pc, #308]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d044      	beq.n	8004914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d107      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004892:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d119      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e07f      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d003      	beq.n	80048b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b2:	4b3f      	ldr	r3, [pc, #252]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e06f      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c2:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e067      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048d2:	4b37      	ldr	r3, [pc, #220]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f023 0203 	bic.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4934      	ldr	r1, [pc, #208]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e4:	f7fd fb5e 	bl	8001fa4 <HAL_GetTick>
 80048e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ec:	f7fd fb5a 	bl	8001fa4 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e04f      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 020c 	and.w	r2, r3, #12
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	429a      	cmp	r2, r3
 8004912:	d1eb      	bne.n	80048ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004914:	4b25      	ldr	r3, [pc, #148]	; (80049ac <HAL_RCC_ClockConfig+0x1b8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d20c      	bcs.n	800493c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b22      	ldr	r3, [pc, #136]	; (80049ac <HAL_RCC_ClockConfig+0x1b8>)
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e032      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004948:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4916      	ldr	r1, [pc, #88]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d009      	beq.n	800497a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004966:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	490e      	ldr	r1, [pc, #56]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	4313      	orrs	r3, r2
 8004978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800497a:	f000 f82d 	bl	80049d8 <HAL_RCC_GetSysClockFreq>
 800497e:	4601      	mov	r1, r0
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 800498c:	5cd3      	ldrb	r3, [r2, r3]
 800498e:	fa21 f303 	lsr.w	r3, r1, r3
 8004992:	4a09      	ldr	r2, [pc, #36]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004996:	4b09      	ldr	r3, [pc, #36]	; (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7fd fabe 	bl	8001f1c <HAL_InitTick>

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40023c00 	.word	0x40023c00
 80049b0:	40023800 	.word	0x40023800
 80049b4:	08007450 	.word	0x08007450
 80049b8:	2000000c 	.word	0x2000000c
 80049bc:	20000010 	.word	0x20000010

080049c0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <HAL_RCC_EnableCSS+0x14>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
}
 80049ca:	bf00      	nop
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	4247004c 	.word	0x4247004c

080049d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	2300      	movs	r3, #0
 80049e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ee:	4b63      	ldr	r3, [pc, #396]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d007      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0x32>
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d008      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x38>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f040 80b4 	bne.w	8004b6c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a04:	4b5e      	ldr	r3, [pc, #376]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a06:	60bb      	str	r3, [r7, #8]
       break;
 8004a08:	e0b3      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a0a:	4b5e      	ldr	r3, [pc, #376]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a0c:	60bb      	str	r3, [r7, #8]
      break;
 8004a0e:	e0b0      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a10:	4b5a      	ldr	r3, [pc, #360]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1a:	4b58      	ldr	r3, [pc, #352]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d04a      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a26:	4b55      	ldr	r3, [pc, #340]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	f04f 0400 	mov.w	r4, #0
 8004a30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	ea03 0501 	and.w	r5, r3, r1
 8004a3c:	ea04 0602 	and.w	r6, r4, r2
 8004a40:	4629      	mov	r1, r5
 8004a42:	4632      	mov	r2, r6
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	f04f 0400 	mov.w	r4, #0
 8004a4c:	0154      	lsls	r4, r2, #5
 8004a4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a52:	014b      	lsls	r3, r1, #5
 8004a54:	4619      	mov	r1, r3
 8004a56:	4622      	mov	r2, r4
 8004a58:	1b49      	subs	r1, r1, r5
 8004a5a:	eb62 0206 	sbc.w	r2, r2, r6
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	f04f 0400 	mov.w	r4, #0
 8004a66:	0194      	lsls	r4, r2, #6
 8004a68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a6c:	018b      	lsls	r3, r1, #6
 8004a6e:	1a5b      	subs	r3, r3, r1
 8004a70:	eb64 0402 	sbc.w	r4, r4, r2
 8004a74:	f04f 0100 	mov.w	r1, #0
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	00e2      	lsls	r2, r4, #3
 8004a7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a82:	00d9      	lsls	r1, r3, #3
 8004a84:	460b      	mov	r3, r1
 8004a86:	4614      	mov	r4, r2
 8004a88:	195b      	adds	r3, r3, r5
 8004a8a:	eb44 0406 	adc.w	r4, r4, r6
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	0262      	lsls	r2, r4, #9
 8004a98:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a9c:	0259      	lsls	r1, r3, #9
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4614      	mov	r4, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f04f 0400 	mov.w	r4, #0
 8004aac:	461a      	mov	r2, r3
 8004aae:	4623      	mov	r3, r4
 8004ab0:	f7fb fb8a 	bl	80001c8 <__aeabi_uldivmod>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e049      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004abc:	4b2f      	ldr	r3, [pc, #188]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	099b      	lsrs	r3, r3, #6
 8004ac2:	f04f 0400 	mov.w	r4, #0
 8004ac6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	ea03 0501 	and.w	r5, r3, r1
 8004ad2:	ea04 0602 	and.w	r6, r4, r2
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	4632      	mov	r2, r6
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	f04f 0400 	mov.w	r4, #0
 8004ae2:	0154      	lsls	r4, r2, #5
 8004ae4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ae8:	014b      	lsls	r3, r1, #5
 8004aea:	4619      	mov	r1, r3
 8004aec:	4622      	mov	r2, r4
 8004aee:	1b49      	subs	r1, r1, r5
 8004af0:	eb62 0206 	sbc.w	r2, r2, r6
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	f04f 0400 	mov.w	r4, #0
 8004afc:	0194      	lsls	r4, r2, #6
 8004afe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b02:	018b      	lsls	r3, r1, #6
 8004b04:	1a5b      	subs	r3, r3, r1
 8004b06:	eb64 0402 	sbc.w	r4, r4, r2
 8004b0a:	f04f 0100 	mov.w	r1, #0
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	00e2      	lsls	r2, r4, #3
 8004b14:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b18:	00d9      	lsls	r1, r3, #3
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4614      	mov	r4, r2
 8004b1e:	195b      	adds	r3, r3, r5
 8004b20:	eb44 0406 	adc.w	r4, r4, r6
 8004b24:	f04f 0100 	mov.w	r1, #0
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	02a2      	lsls	r2, r4, #10
 8004b2e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b32:	0299      	lsls	r1, r3, #10
 8004b34:	460b      	mov	r3, r1
 8004b36:	4614      	mov	r4, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f04f 0400 	mov.w	r4, #0
 8004b42:	461a      	mov	r2, r3
 8004b44:	4623      	mov	r3, r4
 8004b46:	f7fb fb3f 	bl	80001c8 <__aeabi_uldivmod>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	60bb      	str	r3, [r7, #8]
      break;
 8004b6a:	e002      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b6e:	60bb      	str	r3, [r7, #8]
      break;
 8004b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b72:	68bb      	ldr	r3, [r7, #8]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	007a1200 	.word	0x007a1200

08004b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	2000000c 	.word	0x2000000c

08004ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba4:	f7ff fff0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4601      	mov	r1, r0
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0a9b      	lsrs	r3, r3, #10
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4a03      	ldr	r2, [pc, #12]	; (8004bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb6:	5cd3      	ldrb	r3, [r2, r3]
 8004bb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	08007460 	.word	0x08007460

08004bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bcc:	f7ff ffdc 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004bd0:	4601      	mov	r1, r0
 8004bd2:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	0b5b      	lsrs	r3, r3, #13
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	4a03      	ldr	r2, [pc, #12]	; (8004bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bde:	5cd3      	ldrb	r3, [r2, r3]
 8004be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40023800 	.word	0x40023800
 8004bec:	08007460 	.word	0x08007460

08004bf0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfc:	2b80      	cmp	r3, #128	; 0x80
 8004bfe:	d104      	bne.n	8004c0a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004c00:	f000 f80a 	bl	8004c18 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004c04:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	701a      	strb	r2, [r3, #0]
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40023800 	.word	0x40023800
 8004c14:	4002380e 	.word	0x4002380e

08004c18 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e01d      	b.n	8004c74 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fc ff4f 	bl	8001af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f000 fd0f 	bl	8005688 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b06      	cmp	r3, #6
 8004ca4:	d007      	beq.n	8004cb6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e01d      	b.n	8004d12 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f815 	bl	8004d1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f000 fcc0 	bl	8005688 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	6839      	ldr	r1, [r7, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f001 f93a 	bl	8005fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <HAL_TIM_PWM_Start+0x74>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <HAL_TIM_PWM_Start+0x2c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <HAL_TIM_PWM_Start+0x78>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIM_PWM_Start+0x30>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_TIM_PWM_Start+0x32>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b06      	cmp	r3, #6
 8004d86:	d007      	beq.n	8004d98 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40010000 	.word	0x40010000
 8004da8:	40010400 	.word	0x40010400

08004dac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e01d      	b.n	8004dfa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f815 	bl	8004e02 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f000 fc4c 	bl	8005688 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b0c      	cmp	r3, #12
 8004e26:	d841      	bhi.n	8004eac <HAL_TIM_IC_Start_IT+0x94>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <HAL_TIM_IC_Start_IT+0x18>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e65 	.word	0x08004e65
 8004e34:	08004ead 	.word	0x08004ead
 8004e38:	08004ead 	.word	0x08004ead
 8004e3c:	08004ead 	.word	0x08004ead
 8004e40:	08004e77 	.word	0x08004e77
 8004e44:	08004ead 	.word	0x08004ead
 8004e48:	08004ead 	.word	0x08004ead
 8004e4c:	08004ead 	.word	0x08004ead
 8004e50:	08004e89 	.word	0x08004e89
 8004e54:	08004ead 	.word	0x08004ead
 8004e58:	08004ead 	.word	0x08004ead
 8004e5c:	08004ead 	.word	0x08004ead
 8004e60:	08004e9b 	.word	0x08004e9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0202 	orr.w	r2, r2, #2
 8004e72:	60da      	str	r2, [r3, #12]
      break;
 8004e74:	e01b      	b.n	8004eae <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0204 	orr.w	r2, r2, #4
 8004e84:	60da      	str	r2, [r3, #12]
      break;
 8004e86:	e012      	b.n	8004eae <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0208 	orr.w	r2, r2, #8
 8004e96:	60da      	str	r2, [r3, #12]
      break;
 8004e98:	e009      	b.n	8004eae <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0210 	orr.w	r2, r2, #16
 8004ea8:	60da      	str	r2, [r3, #12]
      break;
 8004eaa:	e000      	b.n	8004eae <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004eac:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	6839      	ldr	r1, [r7, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 f880 	bl	8005fbc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b06      	cmp	r3, #6
 8004ecc:	d007      	beq.n	8004ede <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d122      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d11b      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0202 	mvn.w	r2, #2
 8004f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fb fbc2 	bl	80006b4 <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fb8a 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fb91 	bl	8005660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d122      	bne.n	8004f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d11b      	bne.n	8004f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0204 	mvn.w	r2, #4
 8004f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fb fb98 	bl	80006b4 <HAL_TIM_IC_CaptureCallback>
 8004f84:	e005      	b.n	8004f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fb60 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fb67 	bl	8005660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d122      	bne.n	8004fec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d11b      	bne.n	8004fec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0208 	mvn.w	r2, #8
 8004fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2204      	movs	r2, #4
 8004fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fb fb6e 	bl	80006b4 <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fb36 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fb3d 	bl	8005660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d122      	bne.n	8005040 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b10      	cmp	r3, #16
 8005006:	d11b      	bne.n	8005040 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0210 	mvn.w	r2, #16
 8005010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2208      	movs	r2, #8
 8005016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fb fb44 	bl	80006b4 <HAL_TIM_IC_CaptureCallback>
 800502c:	e005      	b.n	800503a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fb0c 	bl	800564c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fb13 	bl	8005660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d10e      	bne.n	800506c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	d107      	bne.n	800506c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0201 	mvn.w	r2, #1
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fae6 	bl	8005638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005076:	2b80      	cmp	r3, #128	; 0x80
 8005078:	d10e      	bne.n	8005098 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005084:	2b80      	cmp	r3, #128	; 0x80
 8005086:	d107      	bne.n	8005098 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 f890 	bl	80061b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d10e      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d107      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fad8 	bl	8005674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	d10e      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d107      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0220 	mvn.w	r2, #32
 80050e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f001 f85a 	bl	80061a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_TIM_IC_ConfigChannel+0x1a>
 800510e:	2302      	movs	r3, #2
 8005110:	e08a      	b.n	8005228 <HAL_TIM_IC_ConfigChannel+0x130>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d11b      	bne.n	8005160 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f000 fd7c 	bl	8005c34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 020c 	bic.w	r2, r2, #12
 800514a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6999      	ldr	r1, [r3, #24]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	619a      	str	r2, [r3, #24]
 800515e:	e05a      	b.n	8005216 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b04      	cmp	r3, #4
 8005164:	d11c      	bne.n	80051a0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	6819      	ldr	r1, [r3, #0]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f000 fe00 	bl	8005d7a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699a      	ldr	r2, [r3, #24]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005188:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6999      	ldr	r1, [r3, #24]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	021a      	lsls	r2, r3, #8
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	619a      	str	r2, [r3, #24]
 800519e:	e03a      	b.n	8005216 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d11b      	bne.n	80051de <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f000 fe4d 	bl	8005e54 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 020c 	bic.w	r2, r2, #12
 80051c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69d9      	ldr	r1, [r3, #28]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	61da      	str	r2, [r3, #28]
 80051dc:	e01b      	b.n	8005216 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6819      	ldr	r1, [r3, #0]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f000 fe6d 	bl	8005ecc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69da      	ldr	r2, [r3, #28]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005200:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69d9      	ldr	r1, [r3, #28]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	021a      	lsls	r2, r3, #8
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005246:	2302      	movs	r3, #2
 8005248:	e0b4      	b.n	80053b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b0c      	cmp	r3, #12
 800525e:	f200 809f 	bhi.w	80053a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005262:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	0800529d 	.word	0x0800529d
 800526c:	080053a1 	.word	0x080053a1
 8005270:	080053a1 	.word	0x080053a1
 8005274:	080053a1 	.word	0x080053a1
 8005278:	080052dd 	.word	0x080052dd
 800527c:	080053a1 	.word	0x080053a1
 8005280:	080053a1 	.word	0x080053a1
 8005284:	080053a1 	.word	0x080053a1
 8005288:	0800531f 	.word	0x0800531f
 800528c:	080053a1 	.word	0x080053a1
 8005290:	080053a1 	.word	0x080053a1
 8005294:	080053a1 	.word	0x080053a1
 8005298:	0800535f 	.word	0x0800535f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fa90 	bl	80057c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0208 	orr.w	r2, r2, #8
 80052b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0204 	bic.w	r2, r2, #4
 80052c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6999      	ldr	r1, [r3, #24]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	619a      	str	r2, [r3, #24]
      break;
 80052da:	e062      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fae0 	bl	80058a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6999      	ldr	r1, [r3, #24]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	021a      	lsls	r2, r3, #8
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	619a      	str	r2, [r3, #24]
      break;
 800531c:	e041      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fb35 	bl	8005994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0208 	orr.w	r2, r2, #8
 8005338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0204 	bic.w	r2, r2, #4
 8005348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69d9      	ldr	r1, [r3, #28]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	61da      	str	r2, [r3, #28]
      break;
 800535c:	e021      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fb89 	bl	8005a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69da      	ldr	r2, [r3, #28]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69d9      	ldr	r1, [r3, #28]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	021a      	lsls	r2, r3, #8
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	61da      	str	r2, [r3, #28]
      break;
 800539e:	e000      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80053a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_TIM_ConfigClockSource+0x18>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e0a6      	b.n	8005522 <HAL_TIM_ConfigClockSource+0x166>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d067      	beq.n	80054dc <HAL_TIM_ConfigClockSource+0x120>
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	d80b      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x6c>
 8005410:	2b10      	cmp	r3, #16
 8005412:	d073      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0x140>
 8005414:	2b10      	cmp	r3, #16
 8005416:	d802      	bhi.n	800541e <HAL_TIM_ConfigClockSource+0x62>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d06f      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800541c:	e078      	b.n	8005510 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800541e:	2b20      	cmp	r3, #32
 8005420:	d06c      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0x140>
 8005422:	2b30      	cmp	r3, #48	; 0x30
 8005424:	d06a      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005426:	e073      	b.n	8005510 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005428:	2b70      	cmp	r3, #112	; 0x70
 800542a:	d00d      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0x8c>
 800542c:	2b70      	cmp	r3, #112	; 0x70
 800542e:	d804      	bhi.n	800543a <HAL_TIM_ConfigClockSource+0x7e>
 8005430:	2b50      	cmp	r3, #80	; 0x50
 8005432:	d033      	beq.n	800549c <HAL_TIM_ConfigClockSource+0xe0>
 8005434:	2b60      	cmp	r3, #96	; 0x60
 8005436:	d041      	beq.n	80054bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005438:	e06a      	b.n	8005510 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800543a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543e:	d066      	beq.n	800550e <HAL_TIM_ConfigClockSource+0x152>
 8005440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005444:	d017      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005446:	e063      	b.n	8005510 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	6899      	ldr	r1, [r3, #8]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f000 fd90 	bl	8005f7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800546a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	609a      	str	r2, [r3, #8]
      break;
 8005474:	e04c      	b.n	8005510 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6899      	ldr	r1, [r3, #8]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f000 fd79 	bl	8005f7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005498:	609a      	str	r2, [r3, #8]
      break;
 800549a:	e039      	b.n	8005510 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6859      	ldr	r1, [r3, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	461a      	mov	r2, r3
 80054aa:	f000 fc37 	bl	8005d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2150      	movs	r1, #80	; 0x50
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fd46 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 80054ba:	e029      	b.n	8005510 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	6859      	ldr	r1, [r3, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	461a      	mov	r2, r3
 80054ca:	f000 fc93 	bl	8005df4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2160      	movs	r1, #96	; 0x60
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fd36 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 80054da:	e019      	b.n	8005510 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6859      	ldr	r1, [r3, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	461a      	mov	r2, r3
 80054ea:	f000 fc17 	bl	8005d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2140      	movs	r1, #64	; 0x40
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fd26 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 80054fa:	e009      	b.n	8005510 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4619      	mov	r1, r3
 8005506:	4610      	mov	r0, r2
 8005508:	f000 fd1d 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 800550c:	e000      	b.n	8005510 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800550e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_TIM_SlaveConfigSynchro+0x18>
 800553e:	2302      	movs	r3, #2
 8005540:	e031      	b.n	80055a6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005552:	6839      	ldr	r1, [r7, #0]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fae7 	bl	8005b28 <TIM_SlaveTimer_SetConfig>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d009      	beq.n	8005574 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e018      	b.n	80055a6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005582:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005592:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b0c      	cmp	r3, #12
 80055c2:	d831      	bhi.n	8005628 <HAL_TIM_ReadCapturedValue+0x78>
 80055c4:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80055c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ca:	bf00      	nop
 80055cc:	08005601 	.word	0x08005601
 80055d0:	08005629 	.word	0x08005629
 80055d4:	08005629 	.word	0x08005629
 80055d8:	08005629 	.word	0x08005629
 80055dc:	0800560b 	.word	0x0800560b
 80055e0:	08005629 	.word	0x08005629
 80055e4:	08005629 	.word	0x08005629
 80055e8:	08005629 	.word	0x08005629
 80055ec:	08005615 	.word	0x08005615
 80055f0:	08005629 	.word	0x08005629
 80055f4:	08005629 	.word	0x08005629
 80055f8:	08005629 	.word	0x08005629
 80055fc:	0800561f 	.word	0x0800561f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	60fb      	str	r3, [r7, #12]

      break;
 8005608:	e00f      	b.n	800562a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	60fb      	str	r3, [r7, #12]

      break;
 8005612:	e00a      	b.n	800562a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	60fb      	str	r3, [r7, #12]

      break;
 800561c:	e005      	b.n	800562a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	60fb      	str	r3, [r7, #12]

      break;
 8005626:	e000      	b.n	800562a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005628:	bf00      	nop
  }

  return tmpreg;
 800562a:	68fb      	ldr	r3, [r7, #12]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a40      	ldr	r2, [pc, #256]	; (800579c <TIM_Base_SetConfig+0x114>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a6:	d00f      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a3d      	ldr	r2, [pc, #244]	; (80057a0 <TIM_Base_SetConfig+0x118>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00b      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3c      	ldr	r2, [pc, #240]	; (80057a4 <TIM_Base_SetConfig+0x11c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3b      	ldr	r2, [pc, #236]	; (80057a8 <TIM_Base_SetConfig+0x120>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3a      	ldr	r2, [pc, #232]	; (80057ac <TIM_Base_SetConfig+0x124>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d108      	bne.n	80056da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2f      	ldr	r2, [pc, #188]	; (800579c <TIM_Base_SetConfig+0x114>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d02b      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e8:	d027      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <TIM_Base_SetConfig+0x118>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d023      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2b      	ldr	r2, [pc, #172]	; (80057a4 <TIM_Base_SetConfig+0x11c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01f      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2a      	ldr	r2, [pc, #168]	; (80057a8 <TIM_Base_SetConfig+0x120>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01b      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a29      	ldr	r2, [pc, #164]	; (80057ac <TIM_Base_SetConfig+0x124>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d017      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a28      	ldr	r2, [pc, #160]	; (80057b0 <TIM_Base_SetConfig+0x128>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <TIM_Base_SetConfig+0x12c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00f      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a26      	ldr	r2, [pc, #152]	; (80057b8 <TIM_Base_SetConfig+0x130>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a25      	ldr	r2, [pc, #148]	; (80057bc <TIM_Base_SetConfig+0x134>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a24      	ldr	r2, [pc, #144]	; (80057c0 <TIM_Base_SetConfig+0x138>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a23      	ldr	r2, [pc, #140]	; (80057c4 <TIM_Base_SetConfig+0x13c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d108      	bne.n	800574c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a0a      	ldr	r2, [pc, #40]	; (800579c <TIM_Base_SetConfig+0x114>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_Base_SetConfig+0xf8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a0c      	ldr	r2, [pc, #48]	; (80057ac <TIM_Base_SetConfig+0x124>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d103      	bne.n	8005788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	615a      	str	r2, [r3, #20]
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40010000 	.word	0x40010000
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800
 80057a8:	40000c00 	.word	0x40000c00
 80057ac:	40010400 	.word	0x40010400
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40014800 	.word	0x40014800
 80057bc:	40001800 	.word	0x40001800
 80057c0:	40001c00 	.word	0x40001c00
 80057c4:	40002000 	.word	0x40002000

080057c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f023 0201 	bic.w	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0303 	bic.w	r3, r3, #3
 80057fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f023 0302 	bic.w	r3, r3, #2
 8005810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a20      	ldr	r2, [pc, #128]	; (80058a0 <TIM_OC1_SetConfig+0xd8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_OC1_SetConfig+0x64>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a1f      	ldr	r2, [pc, #124]	; (80058a4 <TIM_OC1_SetConfig+0xdc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d10c      	bne.n	8005846 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 0308 	bic.w	r3, r3, #8
 8005832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f023 0304 	bic.w	r3, r3, #4
 8005844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <TIM_OC1_SetConfig+0xd8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_OC1_SetConfig+0x8e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a14      	ldr	r2, [pc, #80]	; (80058a4 <TIM_OC1_SetConfig+0xdc>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d111      	bne.n	800587a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800585c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	621a      	str	r2, [r3, #32]
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40010400 	.word	0x40010400

080058a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f023 0210 	bic.w	r2, r3, #16
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f023 0320 	bic.w	r3, r3, #32
 80058f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a22      	ldr	r2, [pc, #136]	; (800598c <TIM_OC2_SetConfig+0xe4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_OC2_SetConfig+0x68>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a21      	ldr	r2, [pc, #132]	; (8005990 <TIM_OC2_SetConfig+0xe8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10d      	bne.n	800592c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a17      	ldr	r2, [pc, #92]	; (800598c <TIM_OC2_SetConfig+0xe4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_OC2_SetConfig+0x94>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a16      	ldr	r2, [pc, #88]	; (8005990 <TIM_OC2_SetConfig+0xe8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d113      	bne.n	8005964 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005942:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800594a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40010000 	.word	0x40010000
 8005990:	40010400 	.word	0x40010400

08005994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a21      	ldr	r2, [pc, #132]	; (8005a74 <TIM_OC3_SetConfig+0xe0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d003      	beq.n	80059fa <TIM_OC3_SetConfig+0x66>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a20      	ldr	r2, [pc, #128]	; (8005a78 <TIM_OC3_SetConfig+0xe4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d10d      	bne.n	8005a16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <TIM_OC3_SetConfig+0xe0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d003      	beq.n	8005a26 <TIM_OC3_SetConfig+0x92>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <TIM_OC3_SetConfig+0xe4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d113      	bne.n	8005a4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	621a      	str	r2, [r3, #32]
}
 8005a68:	bf00      	nop
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40010400 	.word	0x40010400

08005a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	031b      	lsls	r3, r3, #12
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a12      	ldr	r2, [pc, #72]	; (8005b20 <TIM_OC4_SetConfig+0xa4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_OC4_SetConfig+0x68>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a11      	ldr	r2, [pc, #68]	; (8005b24 <TIM_OC4_SetConfig+0xa8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d109      	bne.n	8005af8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	019b      	lsls	r3, r3, #6
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010400 	.word	0x40010400

08005b28 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b40:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f023 0307 	bic.w	r3, r3, #7
 8005b52:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b30      	cmp	r3, #48	; 0x30
 8005b6c:	d05c      	beq.n	8005c28 <TIM_SlaveTimer_SetConfig+0x100>
 8005b6e:	2b30      	cmp	r3, #48	; 0x30
 8005b70:	d806      	bhi.n	8005b80 <TIM_SlaveTimer_SetConfig+0x58>
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d058      	beq.n	8005c28 <TIM_SlaveTimer_SetConfig+0x100>
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	d056      	beq.n	8005c28 <TIM_SlaveTimer_SetConfig+0x100>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d054      	beq.n	8005c28 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8005b7e:	e054      	b.n	8005c2a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005b80:	2b50      	cmp	r3, #80	; 0x50
 8005b82:	d03d      	beq.n	8005c00 <TIM_SlaveTimer_SetConfig+0xd8>
 8005b84:	2b50      	cmp	r3, #80	; 0x50
 8005b86:	d802      	bhi.n	8005b8e <TIM_SlaveTimer_SetConfig+0x66>
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d010      	beq.n	8005bae <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8005b8c:	e04d      	b.n	8005c2a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005b8e:	2b60      	cmp	r3, #96	; 0x60
 8005b90:	d040      	beq.n	8005c14 <TIM_SlaveTimer_SetConfig+0xec>
 8005b92:	2b70      	cmp	r3, #112	; 0x70
 8005b94:	d000      	beq.n	8005b98 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8005b96:	e048      	b.n	8005c2a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68d9      	ldr	r1, [r3, #12]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f000 f9e8 	bl	8005f7c <TIM_ETR_SetConfig>
      break;
 8005bac:	e03d      	b.n	8005c2a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b05      	cmp	r3, #5
 8005bb4:	d101      	bne.n	8005bba <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e038      	b.n	8005c2c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6a1a      	ldr	r2, [r3, #32]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0201 	bic.w	r2, r2, #1
 8005bd0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	621a      	str	r2, [r3, #32]
      break;
 8005bfe:	e014      	b.n	8005c2a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	6899      	ldr	r1, [r3, #8]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f000 f885 	bl	8005d1c <TIM_TI1_ConfigInputStage>
      break;
 8005c12:	e00a      	b.n	8005c2a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	6899      	ldr	r1, [r3, #8]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	461a      	mov	r2, r3
 8005c22:	f000 f8e7 	bl	8005df4 <TIM_TI2_ConfigInputStage>
      break;
 8005c26:	e000      	b.n	8005c2a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8005c28:	bf00      	nop
  }
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f023 0201 	bic.w	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4a28      	ldr	r2, [pc, #160]	; (8005d00 <TIM_TI1_SetConfig+0xcc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01b      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c68:	d017      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <TIM_TI1_SetConfig+0xd0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a24      	ldr	r2, [pc, #144]	; (8005d08 <TIM_TI1_SetConfig+0xd4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00f      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a23      	ldr	r2, [pc, #140]	; (8005d0c <TIM_TI1_SetConfig+0xd8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00b      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a22      	ldr	r2, [pc, #136]	; (8005d10 <TIM_TI1_SetConfig+0xdc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d007      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4a21      	ldr	r2, [pc, #132]	; (8005d14 <TIM_TI1_SetConfig+0xe0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4a20      	ldr	r2, [pc, #128]	; (8005d18 <TIM_TI1_SetConfig+0xe4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d101      	bne.n	8005c9e <TIM_TI1_SetConfig+0x6a>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <TIM_TI1_SetConfig+0x6c>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	e003      	b.n	8005cbe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f023 030a 	bic.w	r3, r3, #10
 8005cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f003 030a 	and.w	r3, r3, #10
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40010400 	.word	0x40010400
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40001800 	.word	0x40001800

08005d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	f023 0201 	bic.w	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f023 030a 	bic.w	r3, r3, #10
 8005d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b087      	sub	sp, #28
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
 8005d86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f023 0210 	bic.w	r2, r3, #16
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	031b      	lsls	r3, r3, #12
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dcc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	621a      	str	r2, [r3, #32]
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f023 0210 	bic.w	r2, r3, #16
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	031b      	lsls	r3, r3, #12
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	621a      	str	r2, [r3, #32]
}
 8005e48:	bf00      	nop
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f023 0303 	bic.w	r3, r3, #3
 8005e80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	621a      	str	r2, [r3, #32]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	031b      	lsls	r3, r3, #12
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	031b      	lsls	r3, r3, #12
 8005f24:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f043 0307 	orr.w	r3, r3, #7
 8005f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	609a      	str	r2, [r3, #8]
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	2201      	movs	r2, #1
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a1a      	ldr	r2, [r3, #32]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	401a      	ands	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a1a      	ldr	r2, [r3, #32]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 031f 	and.w	r3, r3, #31
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800601c:	2302      	movs	r3, #2
 800601e:	e05a      	b.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a21      	ldr	r2, [pc, #132]	; (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d022      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606c:	d01d      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1d      	ldr	r2, [pc, #116]	; (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d018      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1b      	ldr	r2, [pc, #108]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1a      	ldr	r2, [pc, #104]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00e      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a17      	ldr	r2, [pc, #92]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a15      	ldr	r2, [pc, #84]	; (80060fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d10c      	bne.n	80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40010400 	.word	0x40010400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40001800 	.word	0x40001800

08006100 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006118:	2302      	movs	r3, #2
 800611a:	e03d      	b.n	8006198 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4313      	orrs	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e03f      	b.n	800625e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fb fd7c 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2224      	movs	r2, #36	; 0x24
 80061fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800620e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fab3 	bl	800677c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695a      	ldr	r2, [r3, #20]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	4613      	mov	r3, r2
 8006272:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b20      	cmp	r3, #32
 800627e:	d140      	bne.n	8006302 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_UART_Receive_IT+0x26>
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e039      	b.n	8006304 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_UART_Receive_IT+0x38>
 800629a:	2302      	movs	r3, #2
 800629c:	e032      	b.n	8006304 <HAL_UART_Receive_IT+0x9e>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	88fa      	ldrh	r2, [r7, #6]
 80062b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	88fa      	ldrh	r2, [r7, #6]
 80062b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2222      	movs	r2, #34	; 0x22
 80062c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062dc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695a      	ldr	r2, [r3, #20]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f042 0201 	orr.w	r2, r2, #1
 80062ec:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0220 	orr.w	r2, r2, #32
 80062fc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	e000      	b.n	8006304 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006302:	2302      	movs	r3, #2
  }
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006330:	2300      	movs	r3, #0
 8006332:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10d      	bne.n	8006362 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_UART_IRQHandler+0x52>
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f98c 	bl	8006678 <UART_Receive_IT>
      return;
 8006360:	e0d1      	b.n	8006506 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 80b0 	beq.w	80064ca <HAL_UART_IRQHandler+0x1ba>
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <HAL_UART_IRQHandler+0x70>
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 80a5 	beq.w	80064ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <HAL_UART_IRQHandler+0x90>
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006398:	f043 0201 	orr.w	r2, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_UART_IRQHandler+0xb0>
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b8:	f043 0202 	orr.w	r2, r3, #2
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <HAL_UART_IRQHandler+0xd0>
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d8:	f043 0204 	orr.w	r2, r3, #4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00f      	beq.n	800640a <HAL_UART_IRQHandler+0xfa>
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <HAL_UART_IRQHandler+0xee>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006402:	f043 0208 	orr.w	r2, r3, #8
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d078      	beq.n	8006504 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <HAL_UART_IRQHandler+0x11c>
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f926 	bl	8006678 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	bf0c      	ite	eq
 800643a:	2301      	moveq	r3, #1
 800643c:	2300      	movne	r3, #0
 800643e:	b2db      	uxtb	r3, r3
 8006440:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <HAL_UART_IRQHandler+0x144>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d031      	beq.n	80064b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f86f 	bl	8006538 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b40      	cmp	r3, #64	; 0x40
 8006466:	d123      	bne.n	80064b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695a      	ldr	r2, [r3, #20]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006476:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647c:	2b00      	cmp	r3, #0
 800647e:	d013      	beq.n	80064a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006484:	4a21      	ldr	r2, [pc, #132]	; (800650c <HAL_UART_IRQHandler+0x1fc>)
 8006486:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648c:	4618      	mov	r0, r3
 800648e:	f7fd f9cb 	bl	8003828 <HAL_DMA_Abort_IT>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d016      	beq.n	80064c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064a2:	4610      	mov	r0, r2
 80064a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a6:	e00e      	b.n	80064c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f83b 	bl	8006524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ae:	e00a      	b.n	80064c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f837 	bl	8006524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b6:	e006      	b.n	80064c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f833 	bl	8006524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80064c4:	e01e      	b.n	8006504 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c6:	bf00      	nop
    return;
 80064c8:	e01c      	b.n	8006504 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_UART_IRQHandler+0x1d6>
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f85c 	bl	800659c <UART_Transmit_IT>
    return;
 80064e4:	e00f      	b.n	8006506 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <HAL_UART_IRQHandler+0x1f6>
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8a4 	bl	8006648 <UART_EndTransmit_IT>
    return;
 8006500:	bf00      	nop
 8006502:	e000      	b.n	8006506 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006504:	bf00      	nop
  }
}
 8006506:	3720      	adds	r7, #32
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	08006575 	.word	0x08006575

08006510 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800654e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695a      	ldr	r2, [r3, #20]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff ffc8 	bl	8006524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006594:	bf00      	nop
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b21      	cmp	r3, #33	; 0x21
 80065ae:	d144      	bne.n	800663a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b8:	d11a      	bne.n	80065f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d105      	bne.n	80065e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	1c9a      	adds	r2, r3, #2
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	621a      	str	r2, [r3, #32]
 80065e2:	e00e      	b.n	8006602 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	621a      	str	r2, [r3, #32]
 80065ee:	e008      	b.n	8006602 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	1c59      	adds	r1, r3, #1
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6211      	str	r1, [r2, #32]
 80065fa:	781a      	ldrb	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29b      	uxth	r3, r3
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4619      	mov	r1, r3
 8006610:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10f      	bne.n	8006636 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006624:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006634:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	e000      	b.n	800663c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800663a:	2302      	movs	r3, #2
  }
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800665e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff ff51 	bl	8006510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b22      	cmp	r3, #34	; 0x22
 800668a:	d171      	bne.n	8006770 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006694:	d123      	bne.n	80066de <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10e      	bne.n	80066c2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	1c9a      	adds	r2, r3, #2
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	629a      	str	r2, [r3, #40]	; 0x28
 80066c0:	e029      	b.n	8006716 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	629a      	str	r2, [r3, #40]	; 0x28
 80066dc:	e01b      	b.n	8006716 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6858      	ldr	r0, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	1c59      	adds	r1, r3, #1
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6291      	str	r1, [r2, #40]	; 0x28
 80066f6:	b2c2      	uxtb	r2, r0
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	e00c      	b.n	8006716 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006708:	1c58      	adds	r0, r3, #1
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	6288      	str	r0, [r1, #40]	; 0x28
 800670e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29b      	uxth	r3, r3
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	4619      	mov	r1, r3
 8006724:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006726:	2b00      	cmp	r3, #0
 8006728:	d120      	bne.n	800676c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0220 	bic.w	r2, r2, #32
 8006738:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006748:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695a      	ldr	r2, [r3, #20]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0201 	bic.w	r2, r2, #1
 8006758:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fa f920 	bl	80009a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	e002      	b.n	8006772 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	e000      	b.n	8006772 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006770:	2302      	movs	r3, #2
  }
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	b085      	sub	sp, #20
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80067be:	f023 030c 	bic.w	r3, r3, #12
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6812      	ldr	r2, [r2, #0]
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	430b      	orrs	r3, r1
 80067ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ea:	f040 818b 	bne.w	8006b04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4ac1      	ldr	r2, [pc, #772]	; (8006af8 <UART_SetConfig+0x37c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d005      	beq.n	8006804 <UART_SetConfig+0x88>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4abf      	ldr	r2, [pc, #764]	; (8006afc <UART_SetConfig+0x380>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	f040 80bd 	bne.w	800697e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006804:	f7fe f9e0 	bl	8004bc8 <HAL_RCC_GetPCLK2Freq>
 8006808:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	461d      	mov	r5, r3
 800680e:	f04f 0600 	mov.w	r6, #0
 8006812:	46a8      	mov	r8, r5
 8006814:	46b1      	mov	r9, r6
 8006816:	eb18 0308 	adds.w	r3, r8, r8
 800681a:	eb49 0409 	adc.w	r4, r9, r9
 800681e:	4698      	mov	r8, r3
 8006820:	46a1      	mov	r9, r4
 8006822:	eb18 0805 	adds.w	r8, r8, r5
 8006826:	eb49 0906 	adc.w	r9, r9, r6
 800682a:	f04f 0100 	mov.w	r1, #0
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006836:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800683a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800683e:	4688      	mov	r8, r1
 8006840:	4691      	mov	r9, r2
 8006842:	eb18 0005 	adds.w	r0, r8, r5
 8006846:	eb49 0106 	adc.w	r1, r9, r6
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	461d      	mov	r5, r3
 8006850:	f04f 0600 	mov.w	r6, #0
 8006854:	196b      	adds	r3, r5, r5
 8006856:	eb46 0406 	adc.w	r4, r6, r6
 800685a:	461a      	mov	r2, r3
 800685c:	4623      	mov	r3, r4
 800685e:	f7f9 fcb3 	bl	80001c8 <__aeabi_uldivmod>
 8006862:	4603      	mov	r3, r0
 8006864:	460c      	mov	r4, r1
 8006866:	461a      	mov	r2, r3
 8006868:	4ba5      	ldr	r3, [pc, #660]	; (8006b00 <UART_SetConfig+0x384>)
 800686a:	fba3 2302 	umull	r2, r3, r3, r2
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	461d      	mov	r5, r3
 8006878:	f04f 0600 	mov.w	r6, #0
 800687c:	46a9      	mov	r9, r5
 800687e:	46b2      	mov	sl, r6
 8006880:	eb19 0309 	adds.w	r3, r9, r9
 8006884:	eb4a 040a 	adc.w	r4, sl, sl
 8006888:	4699      	mov	r9, r3
 800688a:	46a2      	mov	sl, r4
 800688c:	eb19 0905 	adds.w	r9, r9, r5
 8006890:	eb4a 0a06 	adc.w	sl, sl, r6
 8006894:	f04f 0100 	mov.w	r1, #0
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068a8:	4689      	mov	r9, r1
 80068aa:	4692      	mov	sl, r2
 80068ac:	eb19 0005 	adds.w	r0, r9, r5
 80068b0:	eb4a 0106 	adc.w	r1, sl, r6
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	461d      	mov	r5, r3
 80068ba:	f04f 0600 	mov.w	r6, #0
 80068be:	196b      	adds	r3, r5, r5
 80068c0:	eb46 0406 	adc.w	r4, r6, r6
 80068c4:	461a      	mov	r2, r3
 80068c6:	4623      	mov	r3, r4
 80068c8:	f7f9 fc7e 	bl	80001c8 <__aeabi_uldivmod>
 80068cc:	4603      	mov	r3, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	461a      	mov	r2, r3
 80068d2:	4b8b      	ldr	r3, [pc, #556]	; (8006b00 <UART_SetConfig+0x384>)
 80068d4:	fba3 1302 	umull	r1, r3, r3, r2
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	2164      	movs	r1, #100	; 0x64
 80068dc:	fb01 f303 	mul.w	r3, r1, r3
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	3332      	adds	r3, #50	; 0x32
 80068e6:	4a86      	ldr	r2, [pc, #536]	; (8006b00 <UART_SetConfig+0x384>)
 80068e8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ec:	095b      	lsrs	r3, r3, #5
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068f4:	4498      	add	r8, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	461d      	mov	r5, r3
 80068fa:	f04f 0600 	mov.w	r6, #0
 80068fe:	46a9      	mov	r9, r5
 8006900:	46b2      	mov	sl, r6
 8006902:	eb19 0309 	adds.w	r3, r9, r9
 8006906:	eb4a 040a 	adc.w	r4, sl, sl
 800690a:	4699      	mov	r9, r3
 800690c:	46a2      	mov	sl, r4
 800690e:	eb19 0905 	adds.w	r9, r9, r5
 8006912:	eb4a 0a06 	adc.w	sl, sl, r6
 8006916:	f04f 0100 	mov.w	r1, #0
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006922:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006926:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800692a:	4689      	mov	r9, r1
 800692c:	4692      	mov	sl, r2
 800692e:	eb19 0005 	adds.w	r0, r9, r5
 8006932:	eb4a 0106 	adc.w	r1, sl, r6
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	461d      	mov	r5, r3
 800693c:	f04f 0600 	mov.w	r6, #0
 8006940:	196b      	adds	r3, r5, r5
 8006942:	eb46 0406 	adc.w	r4, r6, r6
 8006946:	461a      	mov	r2, r3
 8006948:	4623      	mov	r3, r4
 800694a:	f7f9 fc3d 	bl	80001c8 <__aeabi_uldivmod>
 800694e:	4603      	mov	r3, r0
 8006950:	460c      	mov	r4, r1
 8006952:	461a      	mov	r2, r3
 8006954:	4b6a      	ldr	r3, [pc, #424]	; (8006b00 <UART_SetConfig+0x384>)
 8006956:	fba3 1302 	umull	r1, r3, r3, r2
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	2164      	movs	r1, #100	; 0x64
 800695e:	fb01 f303 	mul.w	r3, r1, r3
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	3332      	adds	r3, #50	; 0x32
 8006968:	4a65      	ldr	r2, [pc, #404]	; (8006b00 <UART_SetConfig+0x384>)
 800696a:	fba2 2303 	umull	r2, r3, r2, r3
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	f003 0207 	and.w	r2, r3, #7
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4442      	add	r2, r8
 800697a:	609a      	str	r2, [r3, #8]
 800697c:	e26f      	b.n	8006e5e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800697e:	f7fe f90f 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8006982:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	461d      	mov	r5, r3
 8006988:	f04f 0600 	mov.w	r6, #0
 800698c:	46a8      	mov	r8, r5
 800698e:	46b1      	mov	r9, r6
 8006990:	eb18 0308 	adds.w	r3, r8, r8
 8006994:	eb49 0409 	adc.w	r4, r9, r9
 8006998:	4698      	mov	r8, r3
 800699a:	46a1      	mov	r9, r4
 800699c:	eb18 0805 	adds.w	r8, r8, r5
 80069a0:	eb49 0906 	adc.w	r9, r9, r6
 80069a4:	f04f 0100 	mov.w	r1, #0
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069b8:	4688      	mov	r8, r1
 80069ba:	4691      	mov	r9, r2
 80069bc:	eb18 0005 	adds.w	r0, r8, r5
 80069c0:	eb49 0106 	adc.w	r1, r9, r6
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	461d      	mov	r5, r3
 80069ca:	f04f 0600 	mov.w	r6, #0
 80069ce:	196b      	adds	r3, r5, r5
 80069d0:	eb46 0406 	adc.w	r4, r6, r6
 80069d4:	461a      	mov	r2, r3
 80069d6:	4623      	mov	r3, r4
 80069d8:	f7f9 fbf6 	bl	80001c8 <__aeabi_uldivmod>
 80069dc:	4603      	mov	r3, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	461a      	mov	r2, r3
 80069e2:	4b47      	ldr	r3, [pc, #284]	; (8006b00 <UART_SetConfig+0x384>)
 80069e4:	fba3 2302 	umull	r2, r3, r3, r2
 80069e8:	095b      	lsrs	r3, r3, #5
 80069ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	461d      	mov	r5, r3
 80069f2:	f04f 0600 	mov.w	r6, #0
 80069f6:	46a9      	mov	r9, r5
 80069f8:	46b2      	mov	sl, r6
 80069fa:	eb19 0309 	adds.w	r3, r9, r9
 80069fe:	eb4a 040a 	adc.w	r4, sl, sl
 8006a02:	4699      	mov	r9, r3
 8006a04:	46a2      	mov	sl, r4
 8006a06:	eb19 0905 	adds.w	r9, r9, r5
 8006a0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a0e:	f04f 0100 	mov.w	r1, #0
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a22:	4689      	mov	r9, r1
 8006a24:	4692      	mov	sl, r2
 8006a26:	eb19 0005 	adds.w	r0, r9, r5
 8006a2a:	eb4a 0106 	adc.w	r1, sl, r6
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	461d      	mov	r5, r3
 8006a34:	f04f 0600 	mov.w	r6, #0
 8006a38:	196b      	adds	r3, r5, r5
 8006a3a:	eb46 0406 	adc.w	r4, r6, r6
 8006a3e:	461a      	mov	r2, r3
 8006a40:	4623      	mov	r3, r4
 8006a42:	f7f9 fbc1 	bl	80001c8 <__aeabi_uldivmod>
 8006a46:	4603      	mov	r3, r0
 8006a48:	460c      	mov	r4, r1
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4b2c      	ldr	r3, [pc, #176]	; (8006b00 <UART_SetConfig+0x384>)
 8006a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	2164      	movs	r1, #100	; 0x64
 8006a56:	fb01 f303 	mul.w	r3, r1, r3
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	3332      	adds	r3, #50	; 0x32
 8006a60:	4a27      	ldr	r2, [pc, #156]	; (8006b00 <UART_SetConfig+0x384>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a6e:	4498      	add	r8, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	461d      	mov	r5, r3
 8006a74:	f04f 0600 	mov.w	r6, #0
 8006a78:	46a9      	mov	r9, r5
 8006a7a:	46b2      	mov	sl, r6
 8006a7c:	eb19 0309 	adds.w	r3, r9, r9
 8006a80:	eb4a 040a 	adc.w	r4, sl, sl
 8006a84:	4699      	mov	r9, r3
 8006a86:	46a2      	mov	sl, r4
 8006a88:	eb19 0905 	adds.w	r9, r9, r5
 8006a8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a90:	f04f 0100 	mov.w	r1, #0
 8006a94:	f04f 0200 	mov.w	r2, #0
 8006a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006aa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006aa4:	4689      	mov	r9, r1
 8006aa6:	4692      	mov	sl, r2
 8006aa8:	eb19 0005 	adds.w	r0, r9, r5
 8006aac:	eb4a 0106 	adc.w	r1, sl, r6
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	461d      	mov	r5, r3
 8006ab6:	f04f 0600 	mov.w	r6, #0
 8006aba:	196b      	adds	r3, r5, r5
 8006abc:	eb46 0406 	adc.w	r4, r6, r6
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4623      	mov	r3, r4
 8006ac4:	f7f9 fb80 	bl	80001c8 <__aeabi_uldivmod>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	461a      	mov	r2, r3
 8006ace:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <UART_SetConfig+0x384>)
 8006ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	2164      	movs	r1, #100	; 0x64
 8006ad8:	fb01 f303 	mul.w	r3, r1, r3
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	3332      	adds	r3, #50	; 0x32
 8006ae2:	4a07      	ldr	r2, [pc, #28]	; (8006b00 <UART_SetConfig+0x384>)
 8006ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae8:	095b      	lsrs	r3, r3, #5
 8006aea:	f003 0207 	and.w	r2, r3, #7
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4442      	add	r2, r8
 8006af4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006af6:	e1b2      	b.n	8006e5e <UART_SetConfig+0x6e2>
 8006af8:	40011000 	.word	0x40011000
 8006afc:	40011400 	.word	0x40011400
 8006b00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4ad7      	ldr	r2, [pc, #860]	; (8006e68 <UART_SetConfig+0x6ec>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d005      	beq.n	8006b1a <UART_SetConfig+0x39e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4ad6      	ldr	r2, [pc, #856]	; (8006e6c <UART_SetConfig+0x6f0>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	f040 80d1 	bne.w	8006cbc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b1a:	f7fe f855 	bl	8004bc8 <HAL_RCC_GetPCLK2Freq>
 8006b1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	469a      	mov	sl, r3
 8006b24:	f04f 0b00 	mov.w	fp, #0
 8006b28:	46d0      	mov	r8, sl
 8006b2a:	46d9      	mov	r9, fp
 8006b2c:	eb18 0308 	adds.w	r3, r8, r8
 8006b30:	eb49 0409 	adc.w	r4, r9, r9
 8006b34:	4698      	mov	r8, r3
 8006b36:	46a1      	mov	r9, r4
 8006b38:	eb18 080a 	adds.w	r8, r8, sl
 8006b3c:	eb49 090b 	adc.w	r9, r9, fp
 8006b40:	f04f 0100 	mov.w	r1, #0
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b54:	4688      	mov	r8, r1
 8006b56:	4691      	mov	r9, r2
 8006b58:	eb1a 0508 	adds.w	r5, sl, r8
 8006b5c:	eb4b 0609 	adc.w	r6, fp, r9
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	4619      	mov	r1, r3
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	f04f 0300 	mov.w	r3, #0
 8006b6e:	f04f 0400 	mov.w	r4, #0
 8006b72:	0094      	lsls	r4, r2, #2
 8006b74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b78:	008b      	lsls	r3, r1, #2
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4623      	mov	r3, r4
 8006b7e:	4628      	mov	r0, r5
 8006b80:	4631      	mov	r1, r6
 8006b82:	f7f9 fb21 	bl	80001c8 <__aeabi_uldivmod>
 8006b86:	4603      	mov	r3, r0
 8006b88:	460c      	mov	r4, r1
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	4bb8      	ldr	r3, [pc, #736]	; (8006e70 <UART_SetConfig+0x6f4>)
 8006b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	469b      	mov	fp, r3
 8006b9c:	f04f 0c00 	mov.w	ip, #0
 8006ba0:	46d9      	mov	r9, fp
 8006ba2:	46e2      	mov	sl, ip
 8006ba4:	eb19 0309 	adds.w	r3, r9, r9
 8006ba8:	eb4a 040a 	adc.w	r4, sl, sl
 8006bac:	4699      	mov	r9, r3
 8006bae:	46a2      	mov	sl, r4
 8006bb0:	eb19 090b 	adds.w	r9, r9, fp
 8006bb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bb8:	f04f 0100 	mov.w	r1, #0
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bcc:	4689      	mov	r9, r1
 8006bce:	4692      	mov	sl, r2
 8006bd0:	eb1b 0509 	adds.w	r5, fp, r9
 8006bd4:	eb4c 060a 	adc.w	r6, ip, sl
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	f04f 0300 	mov.w	r3, #0
 8006be6:	f04f 0400 	mov.w	r4, #0
 8006bea:	0094      	lsls	r4, r2, #2
 8006bec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bf0:	008b      	lsls	r3, r1, #2
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	4623      	mov	r3, r4
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	4631      	mov	r1, r6
 8006bfa:	f7f9 fae5 	bl	80001c8 <__aeabi_uldivmod>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	460c      	mov	r4, r1
 8006c02:	461a      	mov	r2, r3
 8006c04:	4b9a      	ldr	r3, [pc, #616]	; (8006e70 <UART_SetConfig+0x6f4>)
 8006c06:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	2164      	movs	r1, #100	; 0x64
 8006c0e:	fb01 f303 	mul.w	r3, r1, r3
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	3332      	adds	r3, #50	; 0x32
 8006c18:	4a95      	ldr	r2, [pc, #596]	; (8006e70 <UART_SetConfig+0x6f4>)
 8006c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1e:	095b      	lsrs	r3, r3, #5
 8006c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c24:	4498      	add	r8, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	469b      	mov	fp, r3
 8006c2a:	f04f 0c00 	mov.w	ip, #0
 8006c2e:	46d9      	mov	r9, fp
 8006c30:	46e2      	mov	sl, ip
 8006c32:	eb19 0309 	adds.w	r3, r9, r9
 8006c36:	eb4a 040a 	adc.w	r4, sl, sl
 8006c3a:	4699      	mov	r9, r3
 8006c3c:	46a2      	mov	sl, r4
 8006c3e:	eb19 090b 	adds.w	r9, r9, fp
 8006c42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c46:	f04f 0100 	mov.w	r1, #0
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c5a:	4689      	mov	r9, r1
 8006c5c:	4692      	mov	sl, r2
 8006c5e:	eb1b 0509 	adds.w	r5, fp, r9
 8006c62:	eb4c 060a 	adc.w	r6, ip, sl
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	f04f 0400 	mov.w	r4, #0
 8006c78:	0094      	lsls	r4, r2, #2
 8006c7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c7e:	008b      	lsls	r3, r1, #2
 8006c80:	461a      	mov	r2, r3
 8006c82:	4623      	mov	r3, r4
 8006c84:	4628      	mov	r0, r5
 8006c86:	4631      	mov	r1, r6
 8006c88:	f7f9 fa9e 	bl	80001c8 <__aeabi_uldivmod>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	461a      	mov	r2, r3
 8006c92:	4b77      	ldr	r3, [pc, #476]	; (8006e70 <UART_SetConfig+0x6f4>)
 8006c94:	fba3 1302 	umull	r1, r3, r3, r2
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	2164      	movs	r1, #100	; 0x64
 8006c9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	011b      	lsls	r3, r3, #4
 8006ca4:	3332      	adds	r3, #50	; 0x32
 8006ca6:	4a72      	ldr	r2, [pc, #456]	; (8006e70 <UART_SetConfig+0x6f4>)
 8006ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	f003 020f 	and.w	r2, r3, #15
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4442      	add	r2, r8
 8006cb8:	609a      	str	r2, [r3, #8]
 8006cba:	e0d0      	b.n	8006e5e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cbc:	f7fd ff70 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8006cc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	469a      	mov	sl, r3
 8006cc6:	f04f 0b00 	mov.w	fp, #0
 8006cca:	46d0      	mov	r8, sl
 8006ccc:	46d9      	mov	r9, fp
 8006cce:	eb18 0308 	adds.w	r3, r8, r8
 8006cd2:	eb49 0409 	adc.w	r4, r9, r9
 8006cd6:	4698      	mov	r8, r3
 8006cd8:	46a1      	mov	r9, r4
 8006cda:	eb18 080a 	adds.w	r8, r8, sl
 8006cde:	eb49 090b 	adc.w	r9, r9, fp
 8006ce2:	f04f 0100 	mov.w	r1, #0
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cf2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006cf6:	4688      	mov	r8, r1
 8006cf8:	4691      	mov	r9, r2
 8006cfa:	eb1a 0508 	adds.w	r5, sl, r8
 8006cfe:	eb4b 0609 	adc.w	r6, fp, r9
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	4619      	mov	r1, r3
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	f04f 0400 	mov.w	r4, #0
 8006d14:	0094      	lsls	r4, r2, #2
 8006d16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d1a:	008b      	lsls	r3, r1, #2
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	4623      	mov	r3, r4
 8006d20:	4628      	mov	r0, r5
 8006d22:	4631      	mov	r1, r6
 8006d24:	f7f9 fa50 	bl	80001c8 <__aeabi_uldivmod>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	4b50      	ldr	r3, [pc, #320]	; (8006e70 <UART_SetConfig+0x6f4>)
 8006d30:	fba3 2302 	umull	r2, r3, r3, r2
 8006d34:	095b      	lsrs	r3, r3, #5
 8006d36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	469b      	mov	fp, r3
 8006d3e:	f04f 0c00 	mov.w	ip, #0
 8006d42:	46d9      	mov	r9, fp
 8006d44:	46e2      	mov	sl, ip
 8006d46:	eb19 0309 	adds.w	r3, r9, r9
 8006d4a:	eb4a 040a 	adc.w	r4, sl, sl
 8006d4e:	4699      	mov	r9, r3
 8006d50:	46a2      	mov	sl, r4
 8006d52:	eb19 090b 	adds.w	r9, r9, fp
 8006d56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d5a:	f04f 0100 	mov.w	r1, #0
 8006d5e:	f04f 0200 	mov.w	r2, #0
 8006d62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d6e:	4689      	mov	r9, r1
 8006d70:	4692      	mov	sl, r2
 8006d72:	eb1b 0509 	adds.w	r5, fp, r9
 8006d76:	eb4c 060a 	adc.w	r6, ip, sl
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	f04f 0400 	mov.w	r4, #0
 8006d8c:	0094      	lsls	r4, r2, #2
 8006d8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d92:	008b      	lsls	r3, r1, #2
 8006d94:	461a      	mov	r2, r3
 8006d96:	4623      	mov	r3, r4
 8006d98:	4628      	mov	r0, r5
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	f7f9 fa14 	bl	80001c8 <__aeabi_uldivmod>
 8006da0:	4603      	mov	r3, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	461a      	mov	r2, r3
 8006da6:	4b32      	ldr	r3, [pc, #200]	; (8006e70 <UART_SetConfig+0x6f4>)
 8006da8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	2164      	movs	r1, #100	; 0x64
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	3332      	adds	r3, #50	; 0x32
 8006dba:	4a2d      	ldr	r2, [pc, #180]	; (8006e70 <UART_SetConfig+0x6f4>)
 8006dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dc6:	4498      	add	r8, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	469b      	mov	fp, r3
 8006dcc:	f04f 0c00 	mov.w	ip, #0
 8006dd0:	46d9      	mov	r9, fp
 8006dd2:	46e2      	mov	sl, ip
 8006dd4:	eb19 0309 	adds.w	r3, r9, r9
 8006dd8:	eb4a 040a 	adc.w	r4, sl, sl
 8006ddc:	4699      	mov	r9, r3
 8006dde:	46a2      	mov	sl, r4
 8006de0:	eb19 090b 	adds.w	r9, r9, fp
 8006de4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006de8:	f04f 0100 	mov.w	r1, #0
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006df4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006df8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dfc:	4689      	mov	r9, r1
 8006dfe:	4692      	mov	sl, r2
 8006e00:	eb1b 0509 	adds.w	r5, fp, r9
 8006e04:	eb4c 060a 	adc.w	r6, ip, sl
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	f04f 0200 	mov.w	r2, #0
 8006e12:	f04f 0300 	mov.w	r3, #0
 8006e16:	f04f 0400 	mov.w	r4, #0
 8006e1a:	0094      	lsls	r4, r2, #2
 8006e1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e20:	008b      	lsls	r3, r1, #2
 8006e22:	461a      	mov	r2, r3
 8006e24:	4623      	mov	r3, r4
 8006e26:	4628      	mov	r0, r5
 8006e28:	4631      	mov	r1, r6
 8006e2a:	f7f9 f9cd 	bl	80001c8 <__aeabi_uldivmod>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	460c      	mov	r4, r1
 8006e32:	461a      	mov	r2, r3
 8006e34:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <UART_SetConfig+0x6f4>)
 8006e36:	fba3 1302 	umull	r1, r3, r3, r2
 8006e3a:	095b      	lsrs	r3, r3, #5
 8006e3c:	2164      	movs	r1, #100	; 0x64
 8006e3e:	fb01 f303 	mul.w	r3, r1, r3
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	011b      	lsls	r3, r3, #4
 8006e46:	3332      	adds	r3, #50	; 0x32
 8006e48:	4a09      	ldr	r2, [pc, #36]	; (8006e70 <UART_SetConfig+0x6f4>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	f003 020f 	and.w	r2, r3, #15
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4442      	add	r2, r8
 8006e5a:	609a      	str	r2, [r3, #8]
}
 8006e5c:	e7ff      	b.n	8006e5e <UART_SetConfig+0x6e2>
 8006e5e:	bf00      	nop
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e68:	40011000 	.word	0x40011000
 8006e6c:	40011400 	.word	0x40011400
 8006e70:	51eb851f 	.word	0x51eb851f

08006e74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e74:	b084      	sub	sp, #16
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	f107 001c 	add.w	r0, r7, #28
 8006e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d122      	bne.n	8006ed2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d105      	bne.n	8006ec6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa56 	bl	8007378 <USB_CoreReset>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	73fb      	strb	r3, [r7, #15]
 8006ed0:	e01a      	b.n	8006f08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fa4a 	bl	8007378 <USB_CoreReset>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	639a      	str	r2, [r3, #56]	; 0x38
 8006efa:	e005      	b.n	8006f08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d10b      	bne.n	8006f26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f043 0206 	orr.w	r2, r3, #6
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f043 0220 	orr.w	r2, r3, #32
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f32:	b004      	add	sp, #16
 8006f34:	4770      	bx	lr

08006f36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f023 0201 	bic.w	r2, r3, #1
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d106      	bne.n	8006f84 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	60da      	str	r2, [r3, #12]
 8006f82:	e00b      	b.n	8006f9c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d106      	bne.n	8006f98 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60da      	str	r2, [r3, #12]
 8006f96:	e001      	b.n	8006f9c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e003      	b.n	8006fa4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006f9c:	2032      	movs	r0, #50	; 0x32
 8006f9e:	f7fb f80d 	bl	8001fbc <HAL_Delay>

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fac:	b084      	sub	sp, #16
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	613b      	str	r3, [r7, #16]
 8006fca:	e009      	b.n	8006fe0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	3340      	adds	r3, #64	; 0x40
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2b0e      	cmp	r3, #14
 8006fe4:	d9f2      	bls.n	8006fcc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d11c      	bne.n	8007026 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ffa:	f043 0302 	orr.w	r3, r3, #2
 8006ffe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
 8007024:	e00b      	b.n	800703e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007044:	461a      	mov	r2, r3
 8007046:	2300      	movs	r3, #0
 8007048:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007050:	4619      	mov	r1, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007058:	461a      	mov	r2, r3
 800705a:	680b      	ldr	r3, [r1, #0]
 800705c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007060:	2b01      	cmp	r3, #1
 8007062:	d10c      	bne.n	800707e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800706a:	2100      	movs	r1, #0
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f949 	bl	8007304 <USB_SetDevSpeed>
 8007072:	e008      	b.n	8007086 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007074:	2101      	movs	r1, #1
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f944 	bl	8007304 <USB_SetDevSpeed>
 800707c:	e003      	b.n	8007086 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800707e:	2103      	movs	r1, #3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f93f 	bl	8007304 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007086:	2110      	movs	r1, #16
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f8f3 	bl	8007274 <USB_FlushTxFifo>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f911 	bl	80072c0 <USB_FlushRxFifo>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	461a      	mov	r2, r3
 80070b0:	2300      	movs	r3, #0
 80070b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ba:	461a      	mov	r2, r3
 80070bc:	2300      	movs	r3, #0
 80070be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c6:	461a      	mov	r2, r3
 80070c8:	2300      	movs	r3, #0
 80070ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070cc:	2300      	movs	r3, #0
 80070ce:	613b      	str	r3, [r7, #16]
 80070d0:	e043      	b.n	800715a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070e8:	d118      	bne.n	800711c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fc:	461a      	mov	r2, r3
 80070fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	e013      	b.n	800712e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007112:	461a      	mov	r2, r3
 8007114:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	e008      	b.n	800712e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007128:	461a      	mov	r2, r3
 800712a:	2300      	movs	r3, #0
 800712c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800713a:	461a      	mov	r2, r3
 800713c:	2300      	movs	r3, #0
 800713e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714c:	461a      	mov	r2, r3
 800714e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007152:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	3301      	adds	r3, #1
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	d3b7      	bcc.n	80070d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007162:	2300      	movs	r3, #0
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	e043      	b.n	80071f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800717a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800717e:	d118      	bne.n	80071b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10a      	bne.n	800719c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007192:	461a      	mov	r2, r3
 8007194:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	e013      	b.n	80071c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a8:	461a      	mov	r2, r3
 80071aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	e008      	b.n	80071c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071be:	461a      	mov	r2, r3
 80071c0:	2300      	movs	r3, #0
 80071c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	461a      	mov	r2, r3
 80071d2:	2300      	movs	r3, #0
 80071d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e2:	461a      	mov	r2, r3
 80071e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	3301      	adds	r3, #1
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d3b7      	bcc.n	8007168 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800720a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007218:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	f043 0210 	orr.w	r2, r3, #16
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699a      	ldr	r2, [r3, #24]
 8007230:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <USB_DevInit+0x2c4>)
 8007232:	4313      	orrs	r3, r2
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d005      	beq.n	800724a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	f043 0208 	orr.w	r2, r3, #8
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800724a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724c:	2b01      	cmp	r3, #1
 800724e:	d107      	bne.n	8007260 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007258:	f043 0304 	orr.w	r3, r3, #4
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800726c:	b004      	add	sp, #16
 800726e:	4770      	bx	lr
 8007270:	803c3800 	.word	0x803c3800

08007274 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	019b      	lsls	r3, r3, #6
 8007286:	f043 0220 	orr.w	r2, r3, #32
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3301      	adds	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a09      	ldr	r2, [pc, #36]	; (80072bc <USB_FlushTxFifo+0x48>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d901      	bls.n	80072a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e006      	b.n	80072ae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b20      	cmp	r3, #32
 80072aa:	d0f0      	beq.n	800728e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	00030d40 	.word	0x00030d40

080072c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2210      	movs	r2, #16
 80072d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3301      	adds	r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4a09      	ldr	r2, [pc, #36]	; (8007300 <USB_FlushRxFifo+0x40>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d901      	bls.n	80072e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e006      	b.n	80072f2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b10      	cmp	r3, #16
 80072ee:	d0f0      	beq.n	80072d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	00030d40 	.word	0x00030d40

08007304 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	68f9      	ldr	r1, [r7, #12]
 8007320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007324:	4313      	orrs	r3, r2
 8007326:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007350:	f023 0303 	bic.w	r3, r3, #3
 8007354:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007364:	f043 0302 	orr.w	r3, r3, #2
 8007368:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3301      	adds	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4a13      	ldr	r2, [pc, #76]	; (80073dc <USB_CoreReset+0x64>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d901      	bls.n	8007396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e01b      	b.n	80073ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	daf2      	bge.n	8007384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f043 0201 	orr.w	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3301      	adds	r3, #1
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4a09      	ldr	r2, [pc, #36]	; (80073dc <USB_CoreReset+0x64>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d901      	bls.n	80073c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e006      	b.n	80073ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d0f0      	beq.n	80073ae <USB_CoreReset+0x36>

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	00030d40 	.word	0x00030d40

080073e0 <__libc_init_array>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	4e0d      	ldr	r6, [pc, #52]	; (8007418 <__libc_init_array+0x38>)
 80073e4:	4c0d      	ldr	r4, [pc, #52]	; (800741c <__libc_init_array+0x3c>)
 80073e6:	1ba4      	subs	r4, r4, r6
 80073e8:	10a4      	asrs	r4, r4, #2
 80073ea:	2500      	movs	r5, #0
 80073ec:	42a5      	cmp	r5, r4
 80073ee:	d109      	bne.n	8007404 <__libc_init_array+0x24>
 80073f0:	4e0b      	ldr	r6, [pc, #44]	; (8007420 <__libc_init_array+0x40>)
 80073f2:	4c0c      	ldr	r4, [pc, #48]	; (8007424 <__libc_init_array+0x44>)
 80073f4:	f000 f820 	bl	8007438 <_init>
 80073f8:	1ba4      	subs	r4, r4, r6
 80073fa:	10a4      	asrs	r4, r4, #2
 80073fc:	2500      	movs	r5, #0
 80073fe:	42a5      	cmp	r5, r4
 8007400:	d105      	bne.n	800740e <__libc_init_array+0x2e>
 8007402:	bd70      	pop	{r4, r5, r6, pc}
 8007404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007408:	4798      	blx	r3
 800740a:	3501      	adds	r5, #1
 800740c:	e7ee      	b.n	80073ec <__libc_init_array+0xc>
 800740e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007412:	4798      	blx	r3
 8007414:	3501      	adds	r5, #1
 8007416:	e7f2      	b.n	80073fe <__libc_init_array+0x1e>
 8007418:	08007478 	.word	0x08007478
 800741c:	08007478 	.word	0x08007478
 8007420:	08007478 	.word	0x08007478
 8007424:	0800747c 	.word	0x0800747c

08007428 <memset>:
 8007428:	4402      	add	r2, r0
 800742a:	4603      	mov	r3, r0
 800742c:	4293      	cmp	r3, r2
 800742e:	d100      	bne.n	8007432 <memset+0xa>
 8007430:	4770      	bx	lr
 8007432:	f803 1b01 	strb.w	r1, [r3], #1
 8007436:	e7f9      	b.n	800742c <memset+0x4>

08007438 <_init>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr

08007444 <_fini>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	bf00      	nop
 8007448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744a:	bc08      	pop	{r3}
 800744c:	469e      	mov	lr, r3
 800744e:	4770      	bx	lr
