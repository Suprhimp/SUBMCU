
SUBMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008464  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080085f0  080085f0  000185f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008828  08008828  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008828  08008828  00018828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008830  08008830  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008834  08008834  00018834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  2000007c  080088b4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  080088b4  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016694  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003673  00000000  00000000  00036740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00039db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  0003ad08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002259b  00000000  00000000  0003bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a4e  00000000  00000000  0005e04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c687e  00000000  00000000  00071a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138317  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004298  00000000  00000000  0013836c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080085d4 	.word	0x080085d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080085d4 	.word	0x080085d4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <GAS_Can_txSetting>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan);
//void GAS_Can_recieveMessage(CAN_HandleTypeDef *hcan);

void GAS_Can_txSetting(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	/*
	 * CAN tx set function
	 * set ID, IDE, DLC
	 */
	canTxHeader.ExtId = STM32_ID;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <GAS_Can_txSetting+0x28>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <GAS_Can_txSetting+0x2c>)
 8000e92:	6053      	str	r3, [r2, #4]
	canTxHeader.IDE	= CAN_ID_EXT;
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <GAS_Can_txSetting+0x2c>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	609a      	str	r2, [r3, #8]
	canTxHeader.RTR	= CAN_RTR_DATA;
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <GAS_Can_txSetting+0x2c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
	canTxHeader.DLC	=	8;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <GAS_Can_txSetting+0x2c>)
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	611a      	str	r2, [r3, #16]


}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	200000c4 	.word	0x200000c4

08000eb8 <GAS_Can_rxSetting>:

void GAS_Can_rxSetting(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	 * CAN rx set function
	 * IdHigh, IdLow for each 16bit in 29bit ID
	 * Set different FIFO and FilterBank
	 *
	 */
	sFilterConfig.FilterIdHigh = (STM32_ID2<<3)>>16;				/*first 2byte in 29bit (shift need to IED,RTR,0)*/
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <GAS_Can_rxSetting+0xbc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	0c1b      	lsrs	r3, r3, #16
 8000ec4:	4a2c      	ldr	r2, [pc, #176]	; (8000f78 <GAS_Can_rxSetting+0xc0>)
 8000ec6:	6013      	str	r3, [r2, #0]
	sFilterConfig.FilterIdLow = (0xffff & (STM32_ID2 << 3)) | (1<<2);	/*second 2byte in 29bit + IDE (shift need to IED,RTR,0/)*/
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <GAS_Can_rxSetting+0xbc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	4a28      	ldr	r2, [pc, #160]	; (8000f78 <GAS_Can_rxSetting+0xc0>)
 8000ed6:	6053      	str	r3, [r2, #4]
	sFilterConfig.FilterMaskIdHigh = (0x0fffffff<<3)>>16;
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <GAS_Can_rxSetting+0xc0>)
 8000eda:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000ede:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow =(0xffff & (0x0FFFFFFF << 3)) | (1<<2);
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <GAS_Can_rxSetting+0xc0>)
 8000ee2:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8000ee6:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <GAS_Can_rxSetting+0xc0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank = 14;
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <GAS_Can_rxSetting+0xc0>)
 8000ef0:	220e      	movs	r2, #14
 8000ef2:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ef4:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <GAS_Can_rxSetting+0xc0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <GAS_Can_rxSetting+0xc0>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <GAS_Can_rxSetting+0xc0>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <GAS_Can_rxSetting+0xc0>)
 8000f08:	220e      	movs	r2, #14
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24

	 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000f0c:	491a      	ldr	r1, [pc, #104]	; (8000f78 <GAS_Can_rxSetting+0xc0>)
 8000f0e:	481b      	ldr	r0, [pc, #108]	; (8000f7c <GAS_Can_rxSetting+0xc4>)
 8000f10:	f002 fba2 	bl	8003658 <HAL_CAN_ConfigFilter>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <GAS_Can_rxSetting+0x66>
	  {
	    /* Filter configuration Error */
	    Error_Handler();
 8000f1a:	f001 faff 	bl	800251c <Error_Handler>
	  }

	 sFilterConfig2.FilterIdHigh = 0x0000;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <GAS_Can_rxSetting+0xc8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
	 sFilterConfig2.FilterIdLow = (0xffff & (0x0237 << 3)) | (1<<2);
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <GAS_Can_rxSetting+0xc8>)
 8000f26:	f241 12bc 	movw	r2, #4540	; 0x11bc
 8000f2a:	605a      	str	r2, [r3, #4]
	 sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <GAS_Can_rxSetting+0xc8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
 	 sFilterConfig2.FilterMaskIdLow = (0xffff & (0x0237 << 3)) | (1<<2);
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <GAS_Can_rxSetting+0xc8>)
 8000f34:	f241 12bc 	movw	r2, #4540	; 0x11bc
 8000f38:	60da      	str	r2, [r3, #12]
	 sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <GAS_Can_rxSetting+0xc8>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	611a      	str	r2, [r3, #16]
	 sFilterConfig2.FilterBank = 15;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <GAS_Can_rxSetting+0xc8>)
 8000f42:	220f      	movs	r2, #15
 8000f44:	615a      	str	r2, [r3, #20]
	 sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <GAS_Can_rxSetting+0xc8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
	 sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <GAS_Can_rxSetting+0xc8>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	61da      	str	r2, [r3, #28]
	 sFilterConfig2.FilterActivation = ENABLE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <GAS_Can_rxSetting+0xc8>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	621a      	str	r2, [r3, #32]
	 sFilterConfig2.SlaveStartFilterBank = 15;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <GAS_Can_rxSetting+0xc8>)
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24

	 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <GAS_Can_rxSetting+0xc8>)
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <GAS_Can_rxSetting+0xc4>)
 8000f62:	f002 fb79 	bl	8003658 <HAL_CAN_ConfigFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <GAS_Can_rxSetting+0xb8>
	 {
	     /* Filter configuration Error */
	     Error_Handler();
 8000f6c:	f001 fad6 	bl	800251c <Error_Handler>
	 }
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000004 	.word	0x20000004
 8000f78:	2000009c 	.word	0x2000009c
 8000f7c:	200002f4 	.word	0x200002f4
 8000f80:	2000011c 	.word	0x2000011c

08000f84 <GAS_Can_init>:

void GAS_Can_init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	/*
	 * GAS_CAN_init
	 * ActiveNotification for Rx message pending
	 */
	GAS_Can_txSetting();
 8000f88:	f7ff ff7e 	bl	8000e88 <GAS_Can_txSetting>
	GAS_Can_rxSetting();
 8000f8c:	f7ff ff94 	bl	8000eb8 <GAS_Can_rxSetting>
	HAL_CAN_Start(&hcan2);
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <GAS_Can_init+0x3c>)
 8000f92:	f002 fc41 	bl	8003818 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000f96:	2102      	movs	r1, #2
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <GAS_Can_init+0x3c>)
 8000f9a:	f002 fea3 	bl	8003ce4 <HAL_CAN_ActivateNotification>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <GAS_Can_init+0x24>
	{
	  Error_Handler();
 8000fa4:	f001 faba 	bl	800251c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000fa8:	2110      	movs	r1, #16
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <GAS_Can_init+0x3c>)
 8000fac:	f002 fe9a 	bl	8003ce4 <HAL_CAN_ActivateNotification>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <GAS_Can_init+0x36>
	{
	  Error_Handler();
 8000fb6:	f001 fab1 	bl	800251c <Error_Handler>
	}


}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002f4 	.word	0x200002f4

08000fc4 <HAL_CAN_RxFifo0MsgPendingCallback>:
//}



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	/*
	 * CAN recieve data interrupt function
	 * Check Instance then recieve data in stm32_2.RxData
	 */
	if(hcan->Instance == CAN2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d105      	bne.n	8000fe2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, stm32_2.RxData);
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f002 fd6f 	bl	8003ac0 <HAL_CAN_GetRxMessage>

	}
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40006800 	.word	0x40006800
 8000ff0:	20000114 	.word	0x20000114
 8000ff4:	200000f8 	.word	0x200000f8

08000ff8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	/*
	* CAN recieve data interrupt function
	* Check Instance then recieve data in stm32_2.RxData
	*/
	if(hcan->Instance == CAN2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d105      	bne.n	8001016 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &canRxHeader, TC237.RxData);
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800100e:	2101      	movs	r1, #1
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f002 fd55 	bl	8003ac0 <HAL_CAN_GetRxMessage>

	}
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40006800 	.word	0x40006800
 8001024:	200000e4 	.word	0x200000e4
 8001028:	200000f8 	.word	0x200000f8

0800102c <GAS_PWM_inputInit>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);
void GAS_PWM_changeOutput_ch1(uint16_t input);
void GAS_PWM_Check(TIM_HandleTypeDef *htim, pwmIn_t *pwmIn);

void GAS_PWM_inputInit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 8001030:	2100      	movs	r1, #0
 8001032:	4808      	ldr	r0, [pc, #32]	; (8001054 <GAS_PWM_inputInit+0x28>)
 8001034:	f004 fbc8 	bl	80057c8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8001038:	2104      	movs	r1, #4
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <GAS_PWM_inputInit+0x28>)
 800103c:	f004 fbc4 	bl	80057c8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001040:	2100      	movs	r1, #0
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <GAS_PWM_inputInit+0x2c>)
 8001044:	f004 fbc0 	bl	80057c8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001048:	2104      	movs	r1, #4
 800104a:	4803      	ldr	r0, [pc, #12]	; (8001058 <GAS_PWM_inputInit+0x2c>)
 800104c:	f004 fbbc 	bl	80057c8 <HAL_TIM_IC_Start_IT>
//	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
//	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000338 	.word	0x20000338
 8001058:	200003f8 	.word	0x200003f8

0800105c <HAL_TIM_IC_CaptureCallback>:
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);

}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	/*
	 * For PWM input function
	 * One PWM input per one htim channel(because of TIM counter)
	 * Period, width, duty cycle, frequency can be calculated.
	 */
	if(htim ->Instance == TIM8)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0x44>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d107      	bne.n	800107e <HAL_TIM_IC_CaptureCallback+0x22>
	{
		GAS_PWM_Check2(htim, &pwmIn1);
 800106e:	490d      	ldr	r1, [pc, #52]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f867 	bl	8001144 <GAS_PWM_Check2>
		pwmChangeFlag = 1;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
	}
//	if(htim ->Instance == TIM4){
//		GAS_PWM_Check2(htim, &pwmIn3);
//		pwmChangeFlag = 1;
//	}
}
 800107c:	e00b      	b.n	8001096 <HAL_TIM_IC_CaptureCallback+0x3a>
	else if(htim ->Instance == TIM1){
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_TIM_IC_CaptureCallback+0x50>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d106      	bne.n	8001096 <HAL_TIM_IC_CaptureCallback+0x3a>
		GAS_PWM_Check(htim, &pwmIn2);
 8001088:	4909      	ldr	r1, [pc, #36]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0x54>)
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f812 	bl	80010b4 <GAS_PWM_Check>
		pwmChangeFlag = 1;
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40010400 	.word	0x40010400
 80010a4:	20000144 	.word	0x20000144
 80010a8:	20000098 	.word	0x20000098
 80010ac:	40010000 	.word	0x40010000
 80010b0:	2000017c 	.word	0x2000017c

080010b4 <GAS_PWM_Check>:
	 * Change duty cycle by changing register CCR directly
	 */
	TIM1->CCR1=input/10;
}

void GAS_PWM_Check(TIM_HandleTypeDef *htim, pwmIn_t *pwmIn){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]

			if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7f1b      	ldrb	r3, [r3, #28]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d10f      	bne.n	80010e6 <GAS_PWM_Check+0x32>
			{
				pwmIn->RisingEdgeValue = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 80010c6:	2100      	movs	r1, #0
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f004 fe8f 	bl	8005dec <HAL_TIM_ReadCapturedValue>
 80010ce:	4602      	mov	r2, r0
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	601a      	str	r2, [r3, #0]
//				TIM1->CNT = 0;
				htim->Instance->CNT = 0;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
				pwmIn->Period=pwmIn->RisingEdgeValue;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	609a      	str	r2, [r3, #8]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime)/(SeraMaxWidth-SeraRisingTime));
				if(pwmIn->angle>=3600)pwmIn->angle=0;

			}

}
 80010e4:	e027      	b.n	8001136 <GAS_PWM_Check+0x82>
			else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7f1b      	ldrb	r3, [r3, #28]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d123      	bne.n	8001136 <GAS_PWM_Check+0x82>
				pwmIn->FallingEdgeValue=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80010ee:	2104      	movs	r1, #4
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f004 fe7b 	bl	8005dec <HAL_TIM_ReadCapturedValue>
 80010f6:	4602      	mov	r2, r0
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	605a      	str	r2, [r3, #4]
				pwmIn->Width=pwmIn->FallingEdgeValue;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	60da      	str	r2, [r3, #12]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime)/(SeraMaxWidth-SeraRisingTime));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800110c:	fb02 f303 	mul.w	r3, r2, r3
 8001110:	f5a3 236a 	sub.w	r3, r3, #958464	; 0xea000
 8001114:	f5a3 632b 	sub.w	r3, r3, #2736	; 0xab0
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <GAS_PWM_Check+0x8c>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	0a1a      	lsrs	r2, r3, #8
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	619a      	str	r2, [r3, #24]
				if(pwmIn->angle>=3600)pwmIn->angle=0;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800112e:	d302      	bcc.n	8001136 <GAS_PWM_Check+0x82>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	207de7e3 	.word	0x207de7e3

08001144 <GAS_PWM_Check2>:

void GAS_PWM_Check2(TIM_HandleTypeDef *htim, pwmIn_t *pwmIn){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]

			if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7f1b      	ldrb	r3, [r3, #28]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d10f      	bne.n	8001176 <GAS_PWM_Check2+0x32>
			{
				pwmIn->RisingEdgeValue = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8001156:	2100      	movs	r1, #0
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f004 fe47 	bl	8005dec <HAL_TIM_ReadCapturedValue>
 800115e:	4602      	mov	r2, r0
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	601a      	str	r2, [r3, #0]
				htim->Instance->CNT = 0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2200      	movs	r2, #0
 800116a:	625a      	str	r2, [r3, #36]	; 0x24
				pwmIn->Period=pwmIn->RisingEdgeValue;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	609a      	str	r2, [r3, #8]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime2)/(SeraMaxWidth2-SeraRisingTime2));
				if(pwmIn->angle>=3600)pwmIn->angle=0;

			}

}
 8001174:	e029      	b.n	80011ca <GAS_PWM_Check2+0x86>
			else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7f1b      	ldrb	r3, [r3, #28]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d125      	bne.n	80011ca <GAS_PWM_Check2+0x86>
				pwmIn->FallingEdgeValue=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800117e:	2104      	movs	r1, #4
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f004 fe33 	bl	8005dec <HAL_TIM_ReadCapturedValue>
 8001186:	4602      	mov	r2, r0
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	605a      	str	r2, [r3, #4]
				pwmIn->Width=pwmIn->FallingEdgeValue;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	60da      	str	r2, [r3, #12]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime2)/(SeraMaxWidth2-SeraRisingTime2));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	f5a3 236c 	sub.w	r3, r3, #966656	; 0xec000
 80011a4:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <GAS_PWM_Check2+0x90>)
 80011aa:	fba2 1203 	umull	r1, r2, r2, r3
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	085b      	lsrs	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	0b1a      	lsrs	r2, r3, #12
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	619a      	str	r2, [r3, #24]
				if(pwmIn->angle>=3600)pwmIn->angle=0;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80011c2:	d302      	bcc.n	80011ca <GAS_PWM_Check2+0x86>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	023cf745 	.word	0x023cf745

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ffc2 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <GAS_Scheduler_init>:
void GAS_Scheduler_taskCounter_1000ms(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void GAS_Schduler(void);

void GAS_Scheduler_init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001274:	480f      	ldr	r0, [pc, #60]	; (80012b4 <GAS_Scheduler_init+0x44>)
 8001276:	f004 fa4d 	bl	8005714 <HAL_TIM_Base_Start_IT>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <GAS_Scheduler_init+0x14>
	  {
		  Error_Handler();
 8001280:	f001 f94c 	bl	800251c <Error_Handler>
	  }
	SysTick_Config(SystemCoreClock/1000);
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <GAS_Scheduler_init+0x48>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <GAS_Scheduler_init+0x4c>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	099b      	lsrs	r3, r3, #6
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ffcb 	bl	800122c <SysTick_Config>

//********CAN initialization********
	GAS_Can_init();
 8001296:	f7ff fe75 	bl	8000f84 <GAS_Can_init>

//********PWM initialization********
	GAS_PWM_inputInit();
 800129a:	f7ff fec7 	bl	800102c <GAS_PWM_inputInit>
//	GAS_PWM_outputInit();

//********Shock initialization*******
	GAS_Shock_init(pwmIn1.angle,pwmIn2.angle);
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <GAS_Scheduler_init+0x50>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <GAS_Scheduler_init+0x54>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4610      	mov	r0, r2
 80012ac:	f000 f8aa 	bl	8001404 <GAS_Shock_init>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200003b8 	.word	0x200003b8
 80012b8:	20000008 	.word	0x20000008
 80012bc:	10624dd3 	.word	0x10624dd3
 80012c0:	20000144 	.word	0x20000144
 80012c4:	2000017c 	.word	0x2000017c

080012c8 <GAS_Scheduler_taskCounter_1ms>:



void GAS_Scheduler_taskCounter_1ms(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
//	GAS_Vadc_dmaIn();
//	GAS_Vadc_getValue();
//	if (pwmChangeFlag){
	GAS_Shock_Run(pwmIn1.angle, pwmIn2.angle ,pwmChangeFlag);
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <GAS_Scheduler_taskCounter_1ms+0x1c>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <GAS_Scheduler_taskCounter_1ms+0x20>)
 80012d2:	6991      	ldr	r1, [r2, #24]
 80012d4:	4a05      	ldr	r2, [pc, #20]	; (80012ec <GAS_Scheduler_taskCounter_1ms+0x24>)
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fbd8 	bl	8001a90 <GAS_Shock_Run>
//		pwmChangeFlag = False;
//	}
//	GAS_PWM_changeOutput_ch1(ValueOfADC[0]);
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000144 	.word	0x20000144
 80012e8:	2000017c 	.word	0x2000017c
 80012ec:	20000098 	.word	0x20000098

080012f0 <GAS_Scheduler_taskCounter_10ms>:

void GAS_Scheduler_taskCounter_10ms(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
//	GAS_Can_sendMessage();

}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <GAS_Scheduler_taskCounter_100ms>:

void GAS_Scheduler_taskCounter_100ms(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <GAS_Scheduler_taskCounter_1000ms>:
void GAS_Scheduler_taskCounter_1000ms(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	gTimerCnt++;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_SYSTICK_Callback+0x7c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_SYSTICK_Callback+0x7c>)
 8001328:	6013      	str	r3, [r2, #0]
			gTask.flag_1ms=True;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <HAL_SYSTICK_Callback+0x80>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
			if(gTimerCnt % 10 == 0)
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_SYSTICK_Callback+0x7c>)
 8001332:	6819      	ldr	r1, [r3, #0]
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_SYSTICK_Callback+0x84>)
 8001336:	fb83 2301 	smull	r2, r3, r3, r1
 800133a:	109a      	asrs	r2, r3, #2
 800133c:	17cb      	asrs	r3, r1, #31
 800133e:	1ad2      	subs	r2, r2, r3
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	1aca      	subs	r2, r1, r3
 800134a:	2a00      	cmp	r2, #0
 800134c:	d102      	bne.n	8001354 <HAL_SYSTICK_Callback+0x38>
			{
				gTask.flag_10ms=True;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_SYSTICK_Callback+0x80>)
 8001350:	2201      	movs	r2, #1
 8001352:	705a      	strb	r2, [r3, #1]
			}
			if(gTimerCnt % 100 == 0)
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_SYSTICK_Callback+0x7c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_SYSTICK_Callback+0x88>)
 800135a:	fb83 1302 	smull	r1, r3, r3, r2
 800135e:	1159      	asrs	r1, r3, #5
 8001360:	17d3      	asrs	r3, r2, #31
 8001362:	1acb      	subs	r3, r1, r3
 8001364:	2164      	movs	r1, #100	; 0x64
 8001366:	fb01 f303 	mul.w	r3, r1, r3
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <HAL_SYSTICK_Callback+0x5a>
			{
				gTask.flag_100ms=True;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_SYSTICK_Callback+0x80>)
 8001372:	2201      	movs	r2, #1
 8001374:	709a      	strb	r2, [r3, #2]
			}

			if(gTimerCnt == 1000)
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_SYSTICK_Callback+0x7c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800137e:	d105      	bne.n	800138c <HAL_SYSTICK_Callback+0x70>
			{
				gTask.flag_1000ms=True;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_SYSTICK_Callback+0x80>)
 8001382:	2201      	movs	r2, #1
 8001384:	70da      	strb	r2, [r3, #3]
				gTimerCnt = 0;
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <HAL_SYSTICK_Callback+0x7c>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
			}
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	200001a0 	.word	0x200001a0
 800139c:	20000198 	.word	0x20000198
 80013a0:	66666667 	.word	0x66666667
 80013a4:	51eb851f 	.word	0x51eb851f

080013a8 <GAS_Scheduler>:
//		gTimerCnt = 0;
//	}
//}

void GAS_Scheduler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0


	if(gTask.flag_1ms == True)
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <GAS_Scheduler+0x58>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d104      	bne.n	80013c0 <GAS_Scheduler+0x18>
	{
		gTask.flag_1ms = False;
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <GAS_Scheduler+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
		GAS_Scheduler_taskCounter_1ms();
 80013bc:	f7ff ff84 	bl	80012c8 <GAS_Scheduler_taskCounter_1ms>
	}

	if(gTask.flag_10ms == True)
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <GAS_Scheduler+0x58>)
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d104      	bne.n	80013d4 <GAS_Scheduler+0x2c>
	{
		gTask.flag_10ms = False;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <GAS_Scheduler+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	705a      	strb	r2, [r3, #1]
		GAS_Scheduler_taskCounter_10ms();
 80013d0:	f7ff ff8e 	bl	80012f0 <GAS_Scheduler_taskCounter_10ms>
	}

	if(gTask.flag_100ms == True)
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <GAS_Scheduler+0x58>)
 80013d6:	789b      	ldrb	r3, [r3, #2]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d104      	bne.n	80013e8 <GAS_Scheduler+0x40>
	{
		gTask.flag_100ms = False;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <GAS_Scheduler+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	709a      	strb	r2, [r3, #2]
		GAS_Scheduler_taskCounter_100ms();
 80013e4:	f7ff ff8b 	bl	80012fe <GAS_Scheduler_taskCounter_100ms>
	}

	if(gTask.flag_1000ms == True)
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <GAS_Scheduler+0x58>)
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d104      	bne.n	80013fc <GAS_Scheduler+0x54>
	{
		gTask.flag_1000ms = False;
 80013f2:	4b03      	ldr	r3, [pc, #12]	; (8001400 <GAS_Scheduler+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	70da      	strb	r2, [r3, #3]
		GAS_Scheduler_taskCounter_1000ms();
 80013f8:	f7ff ff88 	bl	800130c <GAS_Scheduler_taskCounter_1000ms>
	}

//	GAS_Can_recieveMessage(&hcan);
//	HAL_CAN_IRQHandler(&hcan);
//	  pin_state=HAL_GPIO_ReadPin(GPIO_PIN_8);
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000198 	.word	0x20000198

08001404 <GAS_Shock_init>:
float GAS_Shock_calculateRoll(float Rd, float Ld, int Location);
static float heaveCalc(int RW, int d);
void GAS_Shock_parse(ShockAngle *angle);
void GAS_Shock_Run(unsigned int Angle1, unsigned int Angle2 ,int isUpdated);

void GAS_Shock_init(int angleR, int angleL){
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	angle.initAngleR = angleR;
 800140e:	4a06      	ldr	r2, [pc, #24]	; (8001428 <GAS_Shock_init+0x24>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6013      	str	r3, [r2, #0]
	angle.initAngleL = angleL;
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <GAS_Shock_init+0x24>)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	6053      	str	r3, [r2, #4]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200001a4 	.word	0x200001a4
 800142c:	00000000 	.word	0x00000000

08001430 <Front_Encoder>:


void Front_Encoder(){
 8001430:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001434:	b08e      	sub	sp, #56	; 0x38
 8001436:	af00      	add	r7, sp, #0


    float defAngLeft = (float)angle.initAngleL*PI/1800;
 8001438:	4be7      	ldr	r3, [pc, #924]	; (80017d8 <Front_Encoder+0x3a8>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001444:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 80017dc <Front_Encoder+0x3ac>
 8001448:	ee27 7a87 	vmul.f32	s14, s15, s14
 800144c:	eddf 6ae4 	vldr	s13, [pc, #912]	; 80017e0 <Front_Encoder+0x3b0>
 8001450:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001454:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float defAngRight = (float)angle.initAngleR*PI/1800;
 8001458:	4bdf      	ldr	r3, [pc, #892]	; (80017d8 <Front_Encoder+0x3a8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001464:	ed9f 7add 	vldr	s14, [pc, #884]	; 80017dc <Front_Encoder+0x3ac>
 8001468:	ee27 7a87 	vmul.f32	s14, s15, s14
 800146c:	eddf 6adc 	vldr	s13, [pc, #880]	; 80017e0 <Front_Encoder+0x3b0>
 8001470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001474:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float heaveRight;//우측에 의한 히브쇽 압축량
    float totalHeave;

    // 롤 변화량 계산
    //좌측 엔코더 각도 변화량(라디안)
    changeAngLeft = fabs((float)angle.AngleL)*PI/1800 - fabs(defAngLeft);
 8001478:	4bd7      	ldr	r3, [pc, #860]	; (80017d8 <Front_Encoder+0x3a8>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	ee17 0a90 	vmov	r0, s15
 8001488:	f7ff f802 	bl	8000490 <__aeabi_f2d>
 800148c:	4604      	mov	r4, r0
 800148e:	460d      	mov	r5, r1
 8001490:	4bd4      	ldr	r3, [pc, #848]	; (80017e4 <Front_Encoder+0x3b4>)
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe fffc 	bl	8000490 <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4620      	mov	r0, r4
 800149e:	4629      	mov	r1, r5
 80014a0:	f7ff f84e 	bl	8000540 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	4bcd      	ldr	r3, [pc, #820]	; (80017e8 <Front_Encoder+0x3b8>)
 80014b2:	f7ff f96f 	bl	8000794 <__aeabi_ddiv>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4614      	mov	r4, r2
 80014bc:	461d      	mov	r5, r3
 80014be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014c2:	eef0 7ae7 	vabs.f32	s15, s15
 80014c6:	ee17 0a90 	vmov	r0, s15
 80014ca:	f7fe ffe1 	bl	8000490 <__aeabi_f2d>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4620      	mov	r0, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	f7fe fe7b 	bl	80001d0 <__aeabi_dsub>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fb05 	bl	8000af0 <__aeabi_d2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    //우측 엔코더 각도변화량(라디안)
    changeAngRigt = fabs((float)angle.AngleR)*PI/1800 - fabs(defAngRight);
 80014ea:	4bbb      	ldr	r3, [pc, #748]	; (80017d8 <Front_Encoder+0x3a8>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f6:	ee17 0a90 	vmov	r0, s15
 80014fa:	f7fe ffc9 	bl	8000490 <__aeabi_f2d>
 80014fe:	4604      	mov	r4, r0
 8001500:	460d      	mov	r5, r1
 8001502:	4bb8      	ldr	r3, [pc, #736]	; (80017e4 <Front_Encoder+0x3b4>)
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe ffc3 	bl	8000490 <__aeabi_f2d>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f7ff f815 	bl	8000540 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	4bb1      	ldr	r3, [pc, #708]	; (80017e8 <Front_Encoder+0x3b8>)
 8001524:	f7ff f936 	bl	8000794 <__aeabi_ddiv>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4614      	mov	r4, r2
 800152e:	461d      	mov	r5, r3
 8001530:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001534:	eef0 7ae7 	vabs.f32	s15, s15
 8001538:	ee17 0a90 	vmov	r0, s15
 800153c:	f7fe ffa8 	bl	8000490 <__aeabi_f2d>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4620      	mov	r0, r4
 8001546:	4629      	mov	r1, r5
 8001548:	f7fe fe42 	bl	80001d0 <__aeabi_dsub>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff facc 	bl	8000af0 <__aeabi_d2f>
 8001558:	4603      	mov	r3, r0
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28

    float midRes_a = pow(145*145-(52*sin(defAngLeft))*(52*sin(defAngLeft)) , 0.5);
 800155c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800155e:	f7fe ff97 	bl	8000490 <__aeabi_f2d>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	ec43 2b10 	vmov	d0, r2, r3
 800156a:	f005 f8d5 	bl	8006718 <sin>
 800156e:	ec51 0b10 	vmov	r0, r1, d0
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	4b9d      	ldr	r3, [pc, #628]	; (80017ec <Front_Encoder+0x3bc>)
 8001578:	f7fe ffe2 	bl	8000540 <__aeabi_dmul>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4614      	mov	r4, r2
 8001582:	461d      	mov	r5, r3
 8001584:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001586:	f7fe ff83 	bl	8000490 <__aeabi_f2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	ec43 2b10 	vmov	d0, r2, r3
 8001592:	f005 f8c1 	bl	8006718 <sin>
 8001596:	ec51 0b10 	vmov	r0, r1, d0
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4b93      	ldr	r3, [pc, #588]	; (80017ec <Front_Encoder+0x3bc>)
 80015a0:	f7fe ffce 	bl	8000540 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4620      	mov	r0, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	f7fe ffc8 	bl	8000540 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	a184      	add	r1, pc, #528	; (adr r1, 80017c8 <Front_Encoder+0x398>)
 80015b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015ba:	f7fe fe09 	bl	80001d0 <__aeabi_dsub>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	ec43 2b17 	vmov	d7, r2, r3
 80015c6:	ed9f 1b82 	vldr	d1, [pc, #520]	; 80017d0 <Front_Encoder+0x3a0>
 80015ca:	eeb0 0a47 	vmov.f32	s0, s14
 80015ce:	eef0 0a67 	vmov.f32	s1, s15
 80015d2:	f005 f8f5 	bl	80067c0 <pow>
 80015d6:	ec53 2b10 	vmov	r2, r3, d0
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fa87 	bl	8000af0 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    float midRes_b = pow(145*145-(52*sin(defAngLeft+changeAngLeft))*(52*sin(defAngLeft+changeAngLeft)) , 0.5);
 80015e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80015ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f2:	ee17 0a90 	vmov	r0, s15
 80015f6:	f7fe ff4b 	bl	8000490 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	ec43 2b10 	vmov	d0, r2, r3
 8001602:	f005 f889 	bl	8006718 <sin>
 8001606:	ec51 0b10 	vmov	r0, r1, d0
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4b77      	ldr	r3, [pc, #476]	; (80017ec <Front_Encoder+0x3bc>)
 8001610:	f7fe ff96 	bl	8000540 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4614      	mov	r4, r2
 800161a:	461d      	mov	r5, r3
 800161c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001620:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	ee17 0a90 	vmov	r0, s15
 800162c:	f7fe ff30 	bl	8000490 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	ec43 2b10 	vmov	d0, r2, r3
 8001638:	f005 f86e 	bl	8006718 <sin>
 800163c:	ec51 0b10 	vmov	r0, r1, d0
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	4b69      	ldr	r3, [pc, #420]	; (80017ec <Front_Encoder+0x3bc>)
 8001646:	f7fe ff7b 	bl	8000540 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f7fe ff75 	bl	8000540 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	a15b      	add	r1, pc, #364	; (adr r1, 80017c8 <Front_Encoder+0x398>)
 800165c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001660:	f7fe fdb6 	bl	80001d0 <__aeabi_dsub>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	ec43 2b17 	vmov	d7, r2, r3
 800166c:	ed9f 1b58 	vldr	d1, [pc, #352]	; 80017d0 <Front_Encoder+0x3a0>
 8001670:	eeb0 0a47 	vmov.f32	s0, s14
 8001674:	eef0 0a67 	vmov.f32	s1, s15
 8001678:	f005 f8a2 	bl	80067c0 <pow>
 800167c:	ec53 2b10 	vmov	r2, r3, d0
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fa34 	bl	8000af0 <__aeabi_d2f>
 8001688:	4603      	mov	r3, r0
 800168a:	623b      	str	r3, [r7, #32]
    float midRes_c = pow(145*145-(52*sin(defAngRight+changeAngRigt))*(52*sin(defAngRight+changeAngRigt)) , 0.5);
 800168c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001690:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001698:	ee17 0a90 	vmov	r0, s15
 800169c:	f7fe fef8 	bl	8000490 <__aeabi_f2d>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	ec43 2b10 	vmov	d0, r2, r3
 80016a8:	f005 f836 	bl	8006718 <sin>
 80016ac:	ec51 0b10 	vmov	r0, r1, d0
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <Front_Encoder+0x3bc>)
 80016b6:	f7fe ff43 	bl	8000540 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80016c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ce:	ee17 0a90 	vmov	r0, s15
 80016d2:	f7fe fedd 	bl	8000490 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	ec43 2b10 	vmov	d0, r2, r3
 80016de:	f005 f81b 	bl	8006718 <sin>
 80016e2:	ec51 0b10 	vmov	r0, r1, d0
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b40      	ldr	r3, [pc, #256]	; (80017ec <Front_Encoder+0x3bc>)
 80016ec:	f7fe ff28 	bl	8000540 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4620      	mov	r0, r4
 80016f6:	4629      	mov	r1, r5
 80016f8:	f7fe ff22 	bl	8000540 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	a131      	add	r1, pc, #196	; (adr r1, 80017c8 <Front_Encoder+0x398>)
 8001702:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001706:	f7fe fd63 	bl	80001d0 <__aeabi_dsub>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	ec43 2b17 	vmov	d7, r2, r3
 8001712:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 80017d0 <Front_Encoder+0x3a0>
 8001716:	eeb0 0a47 	vmov.f32	s0, s14
 800171a:	eef0 0a67 	vmov.f32	s1, s15
 800171e:	f005 f84f 	bl	80067c0 <pow>
 8001722:	ec53 2b10 	vmov	r2, r3, d0
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff f9e1 	bl	8000af0 <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	61fb      	str	r3, [r7, #28]
    float midRes_d = pow(145*145-(52*sin(defAngRight))*(52*sin(defAngRight)) , 0.5);
 8001732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001734:	f7fe feac 	bl	8000490 <__aeabi_f2d>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	ec43 2b10 	vmov	d0, r2, r3
 8001740:	f004 ffea 	bl	8006718 <sin>
 8001744:	ec51 0b10 	vmov	r0, r1, d0
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <Front_Encoder+0x3bc>)
 800174e:	f7fe fef7 	bl	8000540 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4614      	mov	r4, r2
 8001758:	461d      	mov	r5, r3
 800175a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800175c:	f7fe fe98 	bl	8000490 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	ec43 2b10 	vmov	d0, r2, r3
 8001768:	f004 ffd6 	bl	8006718 <sin>
 800176c:	ec51 0b10 	vmov	r0, r1, d0
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <Front_Encoder+0x3bc>)
 8001776:	f7fe fee3 	bl	8000540 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4620      	mov	r0, r4
 8001780:	4629      	mov	r1, r5
 8001782:	f7fe fedd 	bl	8000540 <__aeabi_dmul>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	a10f      	add	r1, pc, #60	; (adr r1, 80017c8 <Front_Encoder+0x398>)
 800178c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001790:	f7fe fd1e 	bl	80001d0 <__aeabi_dsub>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	ec43 2b17 	vmov	d7, r2, r3
 800179c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 80017d0 <Front_Encoder+0x3a0>
 80017a0:	eeb0 0a47 	vmov.f32	s0, s14
 80017a4:	eef0 0a67 	vmov.f32	s1, s15
 80017a8:	f005 f80a 	bl	80067c0 <pow>
 80017ac:	ec53 2b10 	vmov	r2, r3, d0
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff f99c 	bl	8000af0 <__aeabi_d2f>
 80017b8:	4603      	mov	r3, r0
 80017ba:	61bb      	str	r3, [r7, #24]

    strokeChangeLeft = (52*cos(defAngLeft) + fabs(midRes_a) )-(52*cos(defAngLeft+changeAngLeft) + fabs(midRes_b) );
 80017bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017be:	f7fe fe67 	bl	8000490 <__aeabi_f2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	e013      	b.n	80017f0 <Front_Encoder+0x3c0>
 80017c8:	00000000 	.word	0x00000000
 80017cc:	40d48840 	.word	0x40d48840
 80017d0:	00000000 	.word	0x00000000
 80017d4:	3fe00000 	.word	0x3fe00000
 80017d8:	200001a4 	.word	0x200001a4
 80017dc:	40490fda 	.word	0x40490fda
 80017e0:	44e10000 	.word	0x44e10000
 80017e4:	40490fda 	.word	0x40490fda
 80017e8:	409c2000 	.word	0x409c2000
 80017ec:	404a0000 	.word	0x404a0000
 80017f0:	ec43 2b10 	vmov	d0, r2, r3
 80017f4:	f004 ff40 	bl	8006678 <cos>
 80017f8:	ec51 0b10 	vmov	r0, r1, d0
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4ba0      	ldr	r3, [pc, #640]	; (8001a84 <Front_Encoder+0x654>)
 8001802:	f7fe fe9d 	bl	8000540 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4614      	mov	r4, r2
 800180c:	461d      	mov	r5, r3
 800180e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001812:	eef0 7ae7 	vabs.f32	s15, s15
 8001816:	ee17 0a90 	vmov	r0, s15
 800181a:	f7fe fe39 	bl	8000490 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4620      	mov	r0, r4
 8001824:	4629      	mov	r1, r5
 8001826:	f7fe fcd5 	bl	80001d4 <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4614      	mov	r4, r2
 8001830:	461d      	mov	r5, r3
 8001832:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001836:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800183a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183e:	ee17 0a90 	vmov	r0, s15
 8001842:	f7fe fe25 	bl	8000490 <__aeabi_f2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	ec43 2b10 	vmov	d0, r2, r3
 800184e:	f004 ff13 	bl	8006678 <cos>
 8001852:	ec51 0b10 	vmov	r0, r1, d0
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b8a      	ldr	r3, [pc, #552]	; (8001a84 <Front_Encoder+0x654>)
 800185c:	f7fe fe70 	bl	8000540 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4690      	mov	r8, r2
 8001866:	4699      	mov	r9, r3
 8001868:	edd7 7a08 	vldr	s15, [r7, #32]
 800186c:	eef0 7ae7 	vabs.f32	s15, s15
 8001870:	ee17 0a90 	vmov	r0, s15
 8001874:	f7fe fe0c 	bl	8000490 <__aeabi_f2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4640      	mov	r0, r8
 800187e:	4649      	mov	r1, r9
 8001880:	f7fe fca8 	bl	80001d4 <__adddf3>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4620      	mov	r0, r4
 800188a:	4629      	mov	r1, r5
 800188c:	f7fe fca0 	bl	80001d0 <__aeabi_dsub>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff f92a 	bl	8000af0 <__aeabi_d2f>
 800189c:	4603      	mov	r3, r0
 800189e:	617b      	str	r3, [r7, #20]

    strokeChangeRight = (52*cos(defAngRight)+ fabs(midRes_a) )-(52*cos(defAngRight+changeAngRigt) + fabs(midRes_c) );
 80018a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018a2:	f7fe fdf5 	bl	8000490 <__aeabi_f2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	ec43 2b10 	vmov	d0, r2, r3
 80018ae:	f004 fee3 	bl	8006678 <cos>
 80018b2:	ec51 0b10 	vmov	r0, r1, d0
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b72      	ldr	r3, [pc, #456]	; (8001a84 <Front_Encoder+0x654>)
 80018bc:	f7fe fe40 	bl	8000540 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4614      	mov	r4, r2
 80018c6:	461d      	mov	r5, r3
 80018c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018cc:	eef0 7ae7 	vabs.f32	s15, s15
 80018d0:	ee17 0a90 	vmov	r0, s15
 80018d4:	f7fe fddc 	bl	8000490 <__aeabi_f2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fc78 	bl	80001d4 <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80018f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f8:	ee17 0a90 	vmov	r0, s15
 80018fc:	f7fe fdc8 	bl	8000490 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	ec43 2b10 	vmov	d0, r2, r3
 8001908:	f004 feb6 	bl	8006678 <cos>
 800190c:	ec51 0b10 	vmov	r0, r1, d0
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	4b5b      	ldr	r3, [pc, #364]	; (8001a84 <Front_Encoder+0x654>)
 8001916:	f7fe fe13 	bl	8000540 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4690      	mov	r8, r2
 8001920:	4699      	mov	r9, r3
 8001922:	edd7 7a07 	vldr	s15, [r7, #28]
 8001926:	eef0 7ae7 	vabs.f32	s15, s15
 800192a:	ee17 0a90 	vmov	r0, s15
 800192e:	f7fe fdaf 	bl	8000490 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4640      	mov	r0, r8
 8001938:	4649      	mov	r1, r9
 800193a:	f7fe fc4b 	bl	80001d4 <__adddf3>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7fe fc43 	bl	80001d0 <__aeabi_dsub>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f8cd 	bl	8000af0 <__aeabi_d2f>
 8001956:	4603      	mov	r3, r0
 8001958:	613b      	str	r3, [r7, #16]

    totalRoll = strokeChangeRight + strokeChangeLeft;
 800195a:	ed97 7a04 	vldr	s14, [r7, #16]
 800195e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001966:	edc7 7a03 	vstr	s15, [r7, #12]

    //히브쇽 변화량 계산
    heaveLeft = -52*cos(defAngLeft)+52*cos(defAngLeft-changeAngLeft);
 800196a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800196c:	f7fe fd90 	bl	8000490 <__aeabi_f2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	ec43 2b10 	vmov	d0, r2, r3
 8001978:	f004 fe7e 	bl	8006678 <cos>
 800197c:	ec51 0b10 	vmov	r0, r1, d0
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <Front_Encoder+0x658>)
 8001986:	f7fe fddb 	bl	8000540 <__aeabi_dmul>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4614      	mov	r4, r2
 8001990:	461d      	mov	r5, r3
 8001992:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001996:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800199a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199e:	ee17 0a90 	vmov	r0, s15
 80019a2:	f7fe fd75 	bl	8000490 <__aeabi_f2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	ec43 2b10 	vmov	d0, r2, r3
 80019ae:	f004 fe63 	bl	8006678 <cos>
 80019b2:	ec51 0b10 	vmov	r0, r1, d0
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <Front_Encoder+0x654>)
 80019bc:	f7fe fdc0 	bl	8000540 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4620      	mov	r0, r4
 80019c6:	4629      	mov	r1, r5
 80019c8:	f7fe fc04 	bl	80001d4 <__adddf3>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f88c 	bl	8000af0 <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	60bb      	str	r3, [r7, #8]

    heaveRight = -52*cos(defAngRight)+52*cos(defAngRight+changeAngRigt);
 80019dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019de:	f7fe fd57 	bl	8000490 <__aeabi_f2d>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	ec43 2b10 	vmov	d0, r2, r3
 80019ea:	f004 fe45 	bl	8006678 <cos>
 80019ee:	ec51 0b10 	vmov	r0, r1, d0
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <Front_Encoder+0x658>)
 80019f8:	f7fe fda2 	bl	8000540 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4614      	mov	r4, r2
 8001a02:	461d      	mov	r5, r3
 8001a04:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001a08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a10:	ee17 0a90 	vmov	r0, s15
 8001a14:	f7fe fd3c 	bl	8000490 <__aeabi_f2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	ec43 2b10 	vmov	d0, r2, r3
 8001a20:	f004 fe2a 	bl	8006678 <cos>
 8001a24:	ec51 0b10 	vmov	r0, r1, d0
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <Front_Encoder+0x654>)
 8001a2e:	f7fe fd87 	bl	8000540 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fbcb 	bl	80001d4 <__adddf3>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f853 	bl	8000af0 <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	607b      	str	r3, [r7, #4]

    totalHeave = heaveLeft + heaveRight ;
 8001a4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5a:	edc7 7a00 	vstr	s15, [r7]
    //printf("%f, %f",strokeChangeLeft, strokeChangeRight);
    angle.Roll = fabs(totalRoll);
 8001a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a62:	eef0 7ae7 	vabs.f32	s15, s15
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <Front_Encoder+0x65c>)
 8001a68:	edc3 7a04 	vstr	s15, [r3, #16]
    angle.Heave = fabs(totalHeave);
 8001a6c:	edd7 7a00 	vldr	s15, [r7]
 8001a70:	eef0 7ae7 	vabs.f32	s15, s15
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <Front_Encoder+0x65c>)
 8001a76:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001a7a:	bf00      	nop
 8001a7c:	3738      	adds	r7, #56	; 0x38
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a84:	404a0000 	.word	0x404a0000
 8001a88:	c04a0000 	.word	0xc04a0000
 8001a8c:	200001a4 	.word	0x200001a4

08001a90 <GAS_Shock_Run>:
    angle.Heave = fabs(totalHeave);
}



void GAS_Shock_Run(uint Angle1, uint Angle2 ,int isUpdated){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]

	uint32_t TxMailBox;

	angle.AngleR = Angle1;
 8001a9c:	4a1f      	ldr	r2, [pc, #124]	; (8001b1c <GAS_Shock_Run+0x8c>)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6093      	str	r3, [r2, #8]
	if(angle.AngleR>=3600)angle.AngleR=0;
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <GAS_Shock_Run+0x8c>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001aaa:	d302      	bcc.n	8001ab2 <GAS_Shock_Run+0x22>
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <GAS_Shock_Run+0x8c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]

	angle.AngleL = Angle2;
 8001ab2:	4a1a      	ldr	r2, [pc, #104]	; (8001b1c <GAS_Shock_Run+0x8c>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
	if(angle.AngleL>=3600)angle.AngleL=0;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <GAS_Shock_Run+0x8c>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001ac0:	d302      	bcc.n	8001ac8 <GAS_Shock_Run+0x38>
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <GAS_Shock_Run+0x8c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	60da      	str	r2, [r3, #12]

	if (LOCATION == Shock_Front){
		Front_Encoder();
 8001ac8:	f7ff fcb2 	bl	8001430 <Front_Encoder>
	}else{

	}

	stm32_1.B.AngleR = angle.AngleR;
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <GAS_Shock_Run+0x8c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <GAS_Shock_Run+0x90>)
 8001ad4:	801a      	strh	r2, [r3, #0]
	stm32_1.B.AngleL = angle.AngleL;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <GAS_Shock_Run+0x8c>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <GAS_Shock_Run+0x90>)
 8001ade:	805a      	strh	r2, [r3, #2]
	stm32_1.B.Roll = (unsigned int)(angle.Roll*10);
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <GAS_Shock_Run+0x8c>)
 8001ae2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ae6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af2:	ee17 3a90 	vmov	r3, s15
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <GAS_Shock_Run+0x90>)
 8001afa:	809a      	strh	r2, [r3, #4]
//	stm32_1.B.Heave = (unsigned int)(angle.Heave*10);
	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 8001afc:	4809      	ldr	r0, [pc, #36]	; (8001b24 <GAS_Shock_Run+0x94>)
 8001afe:	f001 ffaa 	bl	8003a56 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	617b      	str	r3, [r7, #20]
	HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, &stm32_1.TxData[0], &TxMailBox);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <GAS_Shock_Run+0x90>)
 8001b0c:	4906      	ldr	r1, [pc, #24]	; (8001b28 <GAS_Shock_Run+0x98>)
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <GAS_Shock_Run+0x94>)
 8001b10:	f001 fec6 	bl	80038a0 <HAL_CAN_AddTxMessage>

}
 8001b14:	bf00      	nop
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200001a4 	.word	0x200001a4
 8001b20:	200000dc 	.word	0x200000dc
 8001b24:	200002f4 	.word	0x200002f4
 8001b28:	200000c4 	.word	0x200000c4

08001b2c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b32:	463b      	mov	r3, r7
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b40:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <MX_ADC1_Init+0x9c>)
 8001b42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <MX_ADC1_Init+0xa0>)
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b8c:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b8e:	f001 fa05 	bl	8002f9c <HAL_ADC_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b98:	f000 fcc0 	bl	800251c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba8:	463b      	mov	r3, r7
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001bae:	f001 fa39 	bl	8003024 <HAL_ADC_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001bb8:	f000 fcb0 	bl	800251c <Error_Handler>
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000204 	.word	0x20000204
 8001bc8:	40012000 	.word	0x40012000
 8001bcc:	0f000001 	.word	0x0f000001

08001bd0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001be2:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001be4:	4a21      	ldr	r2, [pc, #132]	; (8001c6c <MX_ADC2_Init+0x9c>)
 8001be6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001be8:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001bea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001c12:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <MX_ADC2_Init+0xa0>)
 8001c14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001c32:	f001 f9b3 	bl	8002f9c <HAL_ADC_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001c3c:	f000 fc6e 	bl	800251c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c40:	2305      	movs	r3, #5
 8001c42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_ADC2_Init+0x98>)
 8001c52:	f001 f9e7 	bl	8003024 <HAL_ADC_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001c5c:	f000 fc5e 	bl	800251c <Error_Handler>
  }

}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200001bc 	.word	0x200001bc
 8001c6c:	40012100 	.word	0x40012100
 8001c70:	0f000001 	.word	0x0f000001

08001c74 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001c88:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <MX_ADC3_Init+0x9c>)
 8001c8a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001c8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c92:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c94:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001cb6:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <MX_ADC3_Init+0xa0>)
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001cd4:	480d      	ldr	r0, [pc, #52]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001cd6:	f001 f961 	bl	8002f9c <HAL_ADC_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001ce0:	f000 fc1c 	bl	800251c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_ADC3_Init+0x98>)
 8001cf6:	f001 f995 	bl	8003024 <HAL_ADC_ConfigChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001d00:	f000 fc0c 	bl	800251c <Error_Handler>
  }

}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	2000024c 	.word	0x2000024c
 8001d10:	40012200 	.word	0x40012200
 8001d14:	0f000001 	.word	0x0f000001

08001d18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b092      	sub	sp, #72	; 0x48
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a91      	ldr	r2, [pc, #580]	; (8001f7c <HAL_ADC_MspInit+0x264>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	f040 808d 	bne.w	8001e56 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d40:	4b8f      	ldr	r3, [pc, #572]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	4a8e      	ldr	r2, [pc, #568]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4c:	4b8c      	ldr	r3, [pc, #560]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30
 8001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d5c:	4b88      	ldr	r3, [pc, #544]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	4a87      	ldr	r2, [pc, #540]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6313      	str	r3, [r2, #48]	; 0x30
 8001d68:	4b85      	ldr	r3, [pc, #532]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d78:	4b81      	ldr	r3, [pc, #516]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	4a80      	ldr	r2, [pc, #512]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6313      	str	r3, [r2, #48]	; 0x30
 8001d84:	4b7e      	ldr	r3, [pc, #504]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	4b7a      	ldr	r3, [pc, #488]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4a79      	ldr	r2, [pc, #484]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001d9a:	f043 0302 	orr.w	r3, r3, #2
 8001d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001da0:	4b77      	ldr	r3, [pc, #476]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001dac:	233f      	movs	r3, #63	; 0x3f
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db0:	2303      	movs	r3, #3
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4871      	ldr	r0, [pc, #452]	; (8001f84 <HAL_ADC_MspInit+0x26c>)
 8001dc0:	f002 fe68 	bl	8004a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001dc4:	23fe      	movs	r3, #254	; 0xfe
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	486c      	ldr	r0, [pc, #432]	; (8001f88 <HAL_ADC_MspInit+0x270>)
 8001dd8:	f002 fe5c 	bl	8004a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de0:	2303      	movs	r3, #3
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dec:	4619      	mov	r1, r3
 8001dee:	4867      	ldr	r0, [pc, #412]	; (8001f8c <HAL_ADC_MspInit+0x274>)
 8001df0:	f002 fe50 	bl	8004a94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001df4:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001df6:	4a67      	ldr	r2, [pc, #412]	; (8001f94 <HAL_ADC_MspInit+0x27c>)
 8001df8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001dfa:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e00:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e06:	4b62      	ldr	r3, [pc, #392]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e0c:	4b60      	ldr	r3, [pc, #384]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e14:	4b5e      	ldr	r3, [pc, #376]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001e16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e1c:	4b5c      	ldr	r3, [pc, #368]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001e1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e24:	4b5a      	ldr	r3, [pc, #360]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e2a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e2c:	4b58      	ldr	r3, [pc, #352]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e32:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e38:	4855      	ldr	r0, [pc, #340]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001e3a:	f002 fb41 	bl	80044c0 <HAL_DMA_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001e44:	f000 fb6a 	bl	800251c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a51      	ldr	r2, [pc, #324]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e4e:	4a50      	ldr	r2, [pc, #320]	; (8001f90 <HAL_ADC_MspInit+0x278>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001e54:	e08e      	b.n	8001f74 <HAL_ADC_MspInit+0x25c>
  else if(adcHandle->Instance==ADC2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a4f      	ldr	r2, [pc, #316]	; (8001f98 <HAL_ADC_MspInit+0x280>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d142      	bne.n	8001ee6 <HAL_ADC_MspInit+0x1ce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
 8001e64:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	4a45      	ldr	r2, [pc, #276]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e70:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e78:	623b      	str	r3, [r7, #32]
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	4a3e      	ldr	r2, [pc, #248]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8c:	4b3c      	ldr	r3, [pc, #240]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	4a37      	ldr	r2, [pc, #220]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea8:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	482f      	ldr	r0, [pc, #188]	; (8001f84 <HAL_ADC_MspInit+0x26c>)
 8001ec8:	f002 fde4 	bl	8004a94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001ecc:	233e      	movs	r3, #62	; 0x3e
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001edc:	4619      	mov	r1, r3
 8001ede:	482a      	ldr	r0, [pc, #168]	; (8001f88 <HAL_ADC_MspInit+0x270>)
 8001ee0:	f002 fdd8 	bl	8004a94 <HAL_GPIO_Init>
}
 8001ee4:	e046      	b.n	8001f74 <HAL_ADC_MspInit+0x25c>
  else if(adcHandle->Instance==ADC3)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2c      	ldr	r2, [pc, #176]	; (8001f9c <HAL_ADC_MspInit+0x284>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d141      	bne.n	8001f74 <HAL_ADC_MspInit+0x25c>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001efe:	6453      	str	r3, [r2, #68]	; 0x44
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	4a1a      	ldr	r2, [pc, #104]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6313      	str	r3, [r2, #48]	; 0x30
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_ADC_MspInit+0x268>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f44:	230f      	movs	r3, #15
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f54:	4619      	mov	r1, r3
 8001f56:	480b      	ldr	r0, [pc, #44]	; (8001f84 <HAL_ADC_MspInit+0x26c>)
 8001f58:	f002 fd9c 	bl	8004a94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f5c:	230e      	movs	r3, #14
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f60:	2303      	movs	r3, #3
 8001f62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4806      	ldr	r0, [pc, #24]	; (8001f88 <HAL_ADC_MspInit+0x270>)
 8001f70:	f002 fd90 	bl	8004a94 <HAL_GPIO_Init>
}
 8001f74:	bf00      	nop
 8001f76:	3748      	adds	r7, #72	; 0x48
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40012000 	.word	0x40012000
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	20000294 	.word	0x20000294
 8001f94:	40026410 	.word	0x40026410
 8001f98:	40012100 	.word	0x40012100
 8001f9c:	40012200 	.word	0x40012200

08001fa0 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <MX_CAN2_Init+0x64>)
 8001fa6:	4a18      	ldr	r2, [pc, #96]	; (8002008 <MX_CAN2_Init+0x68>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <MX_CAN2_Init+0x64>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <MX_CAN2_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <MX_CAN2_Init+0x64>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_CAN2_Init+0x64>)
 8001fbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fc2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <MX_CAN2_Init+0x64>)
 8001fc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fca:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <MX_CAN2_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_CAN2_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <MX_CAN2_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_CAN2_Init+0x64>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <MX_CAN2_Init+0x64>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_CAN2_Init+0x64>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <MX_CAN2_Init+0x64>)
 8001ff2:	f001 fa35 	bl	8003460 <HAL_CAN_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001ffc:	f000 fa8e 	bl	800251c <Error_Handler>
  }

}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200002f4 	.word	0x200002f4
 8002008:	40006800 	.word	0x40006800

0800200c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a28      	ldr	r2, [pc, #160]	; (80020cc <HAL_CAN_MspInit+0xc0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d14a      	bne.n	80020c4 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_CAN_MspInit+0xc4>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <HAL_CAN_MspInit+0xc4>)
 8002038:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_CAN_MspInit+0xc4>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_CAN_MspInit+0xc4>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <HAL_CAN_MspInit+0xc4>)
 8002054:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_CAN_MspInit+0xc4>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_CAN_MspInit+0xc4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <HAL_CAN_MspInit+0xc4>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_CAN_MspInit+0xc4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002082:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002094:	2309      	movs	r3, #9
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	480d      	ldr	r0, [pc, #52]	; (80020d4 <HAL_CAN_MspInit+0xc8>)
 80020a0:	f002 fcf8 	bl	8004a94 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2100      	movs	r1, #0
 80020a8:	2040      	movs	r0, #64	; 0x40
 80020aa:	f002 f942 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80020ae:	2040      	movs	r0, #64	; 0x40
 80020b0:	f002 f95b 	bl	800436a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	2041      	movs	r0, #65	; 0x41
 80020ba:	f002 f93a 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80020be:	2041      	movs	r0, #65	; 0x41
 80020c0:	f002 f953 	bl	800436a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	; 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40006800 	.word	0x40006800
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020400 	.word	0x40020400

080020d8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_CRC_Init+0x20>)
 80020de:	4a07      	ldr	r2, [pc, #28]	; (80020fc <MX_CRC_Init+0x24>)
 80020e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_CRC_Init+0x20>)
 80020e4:	f002 f961 	bl	80043aa <HAL_CRC_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80020ee:	f000 fa15 	bl	800251c <Error_Handler>
  }

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000031c 	.word	0x2000031c
 80020fc:	40023000 	.word	0x40023000

08002100 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0b      	ldr	r2, [pc, #44]	; (800213c <HAL_CRC_MspInit+0x3c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d10d      	bne.n	800212e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_CRC_MspInit+0x40>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <HAL_CRC_MspInit+0x40>)
 800211c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_CRC_MspInit+0x40>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40023000 	.word	0x40023000
 8002140:	40023800 	.word	0x40023800

08002144 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800214a:	463b      	mov	r3, r7
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <MX_DAC_Init+0x4c>)
 8002154:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <MX_DAC_Init+0x50>)
 8002156:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002158:	480d      	ldr	r0, [pc, #52]	; (8002190 <MX_DAC_Init+0x4c>)
 800215a:	f002 f942 	bl	80043e2 <HAL_DAC_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002164:	f000 f9da 	bl	800251c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002168:	2300      	movs	r3, #0
 800216a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002170:	463b      	mov	r3, r7
 8002172:	2200      	movs	r2, #0
 8002174:	4619      	mov	r1, r3
 8002176:	4806      	ldr	r0, [pc, #24]	; (8002190 <MX_DAC_Init+0x4c>)
 8002178:	f002 f955 	bl	8004426 <HAL_DAC_ConfigChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002182:	f000 f9cb 	bl	800251c <Error_Handler>
  }

}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000324 	.word	0x20000324
 8002194:	40007400 	.word	0x40007400

08002198 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a17      	ldr	r2, [pc, #92]	; (8002214 <HAL_DAC_MspInit+0x7c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d127      	bne.n	800220a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_DAC_MspInit+0x80>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a15      	ldr	r2, [pc, #84]	; (8002218 <HAL_DAC_MspInit+0x80>)
 80021c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <HAL_DAC_MspInit+0x80>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <HAL_DAC_MspInit+0x80>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <HAL_DAC_MspInit+0x80>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_DAC_MspInit+0x80>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021f2:	2310      	movs	r3, #16
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f6:	2303      	movs	r3, #3
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	4805      	ldr	r0, [pc, #20]	; (800221c <HAL_DAC_MspInit+0x84>)
 8002206:	f002 fc45 	bl	8004a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	; 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40007400 	.word	0x40007400
 8002218:	40023800 	.word	0x40023800
 800221c:	40020000 	.word	0x40020000

08002220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <MX_DMA_Init+0x3c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <MX_DMA_Init+0x3c>)
 8002230:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_DMA_Init+0x3c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	2038      	movs	r0, #56	; 0x38
 8002248:	f002 f873 	bl	8004332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800224c:	2038      	movs	r0, #56	; 0x38
 800224e:	f002 f88c 	bl	800436a <HAL_NVIC_EnableIRQ>

}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800

08002260 <MX_GPIO_Init>:
     PC12   ------> SPI3_MOSI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
 8002274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	4b5a      	ldr	r3, [pc, #360]	; (80023e4 <MX_GPIO_Init+0x184>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a59      	ldr	r2, [pc, #356]	; (80023e4 <MX_GPIO_Init+0x184>)
 8002280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b57      	ldr	r3, [pc, #348]	; (80023e4 <MX_GPIO_Init+0x184>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <MX_GPIO_Init+0x184>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a52      	ldr	r2, [pc, #328]	; (80023e4 <MX_GPIO_Init+0x184>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <MX_GPIO_Init+0x184>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <MX_GPIO_Init+0x184>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a4b      	ldr	r2, [pc, #300]	; (80023e4 <MX_GPIO_Init+0x184>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <MX_GPIO_Init+0x184>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <MX_GPIO_Init+0x184>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a44      	ldr	r2, [pc, #272]	; (80023e4 <MX_GPIO_Init+0x184>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b42      	ldr	r3, [pc, #264]	; (80023e4 <MX_GPIO_Init+0x184>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	607b      	str	r3, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	4b3e      	ldr	r3, [pc, #248]	; (80023e4 <MX_GPIO_Init+0x184>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a3d      	ldr	r2, [pc, #244]	; (80023e4 <MX_GPIO_Init+0x184>)
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <MX_GPIO_Init+0x184>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002308:	4837      	ldr	r0, [pc, #220]	; (80023e8 <MX_GPIO_Init+0x188>)
 800230a:	f002 fd5f 	bl	8004dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	2104      	movs	r1, #4
 8002312:	4836      	ldr	r0, [pc, #216]	; (80023ec <MX_GPIO_Init+0x18c>)
 8002314:	f002 fd5a 	bl	8004dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800231c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	4619      	mov	r1, r3
 8002330:	482d      	ldr	r0, [pc, #180]	; (80023e8 <MX_GPIO_Init+0x188>)
 8002332:	f002 fbaf 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800233a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002348:	2301      	movs	r3, #1
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	4619      	mov	r1, r3
 8002352:	4825      	ldr	r0, [pc, #148]	; (80023e8 <MX_GPIO_Init+0x188>)
 8002354:	f002 fb9e 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800235c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800236a:	2306      	movs	r3, #6
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	481e      	ldr	r0, [pc, #120]	; (80023f0 <MX_GPIO_Init+0x190>)
 8002376:	f002 fb8d 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800237a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800237e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800238c:	2306      	movs	r3, #6
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	4817      	ldr	r0, [pc, #92]	; (80023f4 <MX_GPIO_Init+0x194>)
 8002398:	f002 fb7c 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800239c:	2304      	movs	r3, #4
 800239e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a0:	2301      	movs	r3, #1
 80023a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4619      	mov	r1, r3
 80023b2:	480e      	ldr	r0, [pc, #56]	; (80023ec <MX_GPIO_Init+0x18c>)
 80023b4:	f002 fb6e 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023be:	2312      	movs	r3, #18
 80023c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c2:	2301      	movs	r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023ca:	2304      	movs	r3, #4
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	4804      	ldr	r0, [pc, #16]	; (80023e8 <MX_GPIO_Init+0x188>)
 80023d6:	f002 fb5d 	bl	8004a94 <HAL_GPIO_Init>

}
 80023da:	bf00      	nop
 80023dc:	3728      	adds	r7, #40	; 0x28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020400 	.word	0x40020400
 80023ec:	40020c00 	.word	0x40020c00
 80023f0:	40020000 	.word	0x40020000
 80023f4:	40020800 	.word	0x40020800

080023f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023fc:	f000 fd5c 	bl	8002eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002400:	f000 f820 	bl	8002444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002404:	f7ff ff2c 	bl	8002260 <MX_GPIO_Init>
  MX_DMA_Init();
 8002408:	f7ff ff0a 	bl	8002220 <MX_DMA_Init>
  MX_ADC1_Init();
 800240c:	f7ff fb8e 	bl	8001b2c <MX_ADC1_Init>
  MX_ADC2_Init();
 8002410:	f7ff fbde 	bl	8001bd0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002414:	f7ff fc2e 	bl	8001c74 <MX_ADC3_Init>
  MX_CAN2_Init();
 8002418:	f7ff fdc2 	bl	8001fa0 <MX_CAN2_Init>
  MX_DAC_Init();
 800241c:	f7ff fe92 	bl	8002144 <MX_DAC_Init>
  MX_CRC_Init();
 8002420:	f7ff fe5a 	bl	80020d8 <MX_CRC_Init>
  MX_TIM1_Init();
 8002424:	f000 f928 	bl	8002678 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002428:	f000 f9b0 	bl	800278c <MX_TIM3_Init>
  MX_TIM8_Init();
 800242c:	f000 fad4 	bl	80029d8 <MX_TIM8_Init>
  MX_TIM4_Init();
 8002430:	f000 fa36 	bl	80028a0 <MX_TIM4_Init>
  MX_TIM12_Init();
 8002434:	f000 fb58 	bl	8002ae8 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  GAS_Scheduler_init();
 8002438:	f7fe ff1a 	bl	8001270 <GAS_Scheduler_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 GAS_Scheduler();
 800243c:	f7fe ffb4 	bl	80013a8 <GAS_Scheduler>
  {
 8002440:	e7fc      	b.n	800243c <main+0x44>
	...

08002444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b094      	sub	sp, #80	; 0x50
 8002448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800244a:	f107 0320 	add.w	r3, r7, #32
 800244e:	2230      	movs	r2, #48	; 0x30
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f004 f908 	bl	8006668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	4b29      	ldr	r3, [pc, #164]	; (8002514 <SystemClock_Config+0xd0>)
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	4a28      	ldr	r2, [pc, #160]	; (8002514 <SystemClock_Config+0xd0>)
 8002472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002476:	6413      	str	r3, [r2, #64]	; 0x40
 8002478:	4b26      	ldr	r3, [pc, #152]	; (8002514 <SystemClock_Config+0xd0>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002484:	2300      	movs	r3, #0
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	4b23      	ldr	r3, [pc, #140]	; (8002518 <SystemClock_Config+0xd4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a22      	ldr	r2, [pc, #136]	; (8002518 <SystemClock_Config+0xd4>)
 800248e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b20      	ldr	r3, [pc, #128]	; (8002518 <SystemClock_Config+0xd4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024a0:	2301      	movs	r3, #1
 80024a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024aa:	2302      	movs	r3, #2
 80024ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024b4:	2304      	movs	r3, #4
 80024b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80024b8:	23a8      	movs	r3, #168	; 0xa8
 80024ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024bc:	2302      	movs	r3, #2
 80024be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024c0:	2307      	movs	r3, #7
 80024c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c4:	f107 0320 	add.w	r3, r7, #32
 80024c8:	4618      	mov	r0, r3
 80024ca:	f002 fc99 	bl	8004e00 <HAL_RCC_OscConfig>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024d4:	f000 f822 	bl	800251c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d8:	230f      	movs	r3, #15
 80024da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024dc:	2302      	movs	r3, #2
 80024de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	2105      	movs	r1, #5
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 fef2 	bl	80052e0 <HAL_RCC_ClockConfig>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002502:	f000 f80b 	bl	800251c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002506:	f002 ffd1 	bl	80054ac <HAL_RCC_EnableCSS>
}
 800250a:	bf00      	nop
 800250c:	3750      	adds	r7, #80	; 0x50
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40007000 	.word	0x40007000

0800251c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002520:	b672      	cpsid	i
}
 8002522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002524:	e7fe      	b.n	8002524 <Error_Handler+0x8>
	...

08002528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_MspInit+0x4c>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <HAL_MspInit+0x4c>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800253c:	6453      	str	r3, [r2, #68]	; 0x44
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_MspInit+0x4c>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_MspInit+0x4c>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <HAL_MspInit+0x4c>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_MspInit+0x4c>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800

08002578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800257c:	f003 f884 	bl	8005688 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <NMI_Handler+0x8>

08002582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002586:	e7fe      	b.n	8002586 <HardFault_Handler+0x4>

08002588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800258c:	e7fe      	b.n	800258c <MemManage_Handler+0x4>

0800258e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002592:	e7fe      	b.n	8002592 <BusFault_Handler+0x4>

08002594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <UsageFault_Handler+0x4>

0800259a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c8:	f000 fcc8 	bl	8002f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80025cc:	f001 fee7 	bl	800439e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <TIM1_CC_IRQHandler+0x10>)
 80025da:	f003 f95d 	bl	8005898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200003f8 	.word	0x200003f8

080025e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <TIM4_IRQHandler+0x10>)
 80025ee:	f003 f953 	bl	8005898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000378 	.word	0x20000378

080025fc <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002600:	4802      	ldr	r0, [pc, #8]	; (800260c <TIM8_CC_IRQHandler+0x10>)
 8002602:	f003 f949 	bl	8005898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000338 	.word	0x20000338

08002610 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <DMA2_Stream0_IRQHandler+0x10>)
 8002616:	f002 f801 	bl	800461c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000294 	.word	0x20000294

08002624 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <CAN2_RX0_IRQHandler+0x10>)
 800262a:	f001 fb81 	bl	8003d30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200002f4 	.word	0x200002f4

08002638 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <CAN2_RX1_IRQHandler+0x10>)
 800263e:	f001 fb77 	bl	8003d30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	200002f4 	.word	0x200002f4

0800264c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <SystemInit+0x28>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	4a07      	ldr	r2, [pc, #28]	; (8002674 <SystemInit+0x28>)
 8002658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800265c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <SystemInit+0x28>)
 8002662:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002666:	609a      	str	r2, [r3, #8]
#endif
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	; 0x30
 800267c:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800267e:	f107 031c 	add.w	r3, r7, #28
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 80026a4:	4b37      	ldr	r3, [pc, #220]	; (8002784 <MX_TIM1_Init+0x10c>)
 80026a6:	4a38      	ldr	r2, [pc, #224]	; (8002788 <MX_TIM1_Init+0x110>)
 80026a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <MX_TIM1_Init+0x10c>)
 80026ac:	22a7      	movs	r2, #167	; 0xa7
 80026ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b0:	4b34      	ldr	r3, [pc, #208]	; (8002784 <MX_TIM1_Init+0x10c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026b6:	4b33      	ldr	r3, [pc, #204]	; (8002784 <MX_TIM1_Init+0x10c>)
 80026b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026be:	4b31      	ldr	r3, [pc, #196]	; (8002784 <MX_TIM1_Init+0x10c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026c4:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <MX_TIM1_Init+0x10c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026ca:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <MX_TIM1_Init+0x10c>)
 80026cc:	2280      	movs	r2, #128	; 0x80
 80026ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026d0:	482c      	ldr	r0, [pc, #176]	; (8002784 <MX_TIM1_Init+0x10c>)
 80026d2:	f002 fff4 	bl	80056be <HAL_TIM_Base_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80026dc:	f7ff ff1e 	bl	800251c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80026e0:	4828      	ldr	r0, [pc, #160]	; (8002784 <MX_TIM1_Init+0x10c>)
 80026e2:	f003 f83b 	bl	800575c <HAL_TIM_IC_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80026ec:	f7ff ff16 	bl	800251c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80026f0:	2304      	movs	r3, #4
 80026f2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80026f4:	2350      	movs	r3, #80	; 0x50
 80026f6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80026f8:	2300      	movs	r3, #0
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002700:	f107 031c 	add.w	r3, r7, #28
 8002704:	4619      	mov	r1, r3
 8002706:	481f      	ldr	r0, [pc, #124]	; (8002784 <MX_TIM1_Init+0x10c>)
 8002708:	f003 fb2e 	bl	8005d68 <HAL_TIM_SlaveConfigSynchro>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002712:	f7ff ff03 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	4619      	mov	r1, r3
 8002724:	4817      	ldr	r0, [pc, #92]	; (8002784 <MX_TIM1_Init+0x10c>)
 8002726:	f003 fee5 	bl	80064f4 <HAL_TIMEx_MasterConfigSynchronization>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002730:	f7ff fef4 	bl	800251c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002734:	2300      	movs	r3, #0
 8002736:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002738:	2301      	movs	r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8002740:	230f      	movs	r3, #15
 8002742:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	2200      	movs	r2, #0
 8002748:	4619      	mov	r1, r3
 800274a:	480e      	ldr	r0, [pc, #56]	; (8002784 <MX_TIM1_Init+0x10c>)
 800274c:	f003 f9ac 	bl	8005aa8 <HAL_TIM_IC_ConfigChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8002756:	f7ff fee1 	bl	800251c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800275a:	2302      	movs	r3, #2
 800275c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800275e:	2302      	movs	r3, #2
 8002760:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	2204      	movs	r2, #4
 800276a:	4619      	mov	r1, r3
 800276c:	4805      	ldr	r0, [pc, #20]	; (8002784 <MX_TIM1_Init+0x10c>)
 800276e:	f003 f99b 	bl	8005aa8 <HAL_TIM_IC_ConfigChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8002778:	f7ff fed0 	bl	800251c <Error_Handler>
  }

}
 800277c:	bf00      	nop
 800277e:	3730      	adds	r7, #48	; 0x30
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200003f8 	.word	0x200003f8
 8002788:	40010000 	.word	0x40010000

0800278c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b090      	sub	sp, #64	; 0x40
 8002790:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002792:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80027c6:	4b34      	ldr	r3, [pc, #208]	; (8002898 <MX_TIM3_Init+0x10c>)
 80027c8:	4a34      	ldr	r2, [pc, #208]	; (800289c <MX_TIM3_Init+0x110>)
 80027ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027cc:	4b32      	ldr	r3, [pc, #200]	; (8002898 <MX_TIM3_Init+0x10c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d2:	4b31      	ldr	r3, [pc, #196]	; (8002898 <MX_TIM3_Init+0x10c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027d8:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <MX_TIM3_Init+0x10c>)
 80027da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e0:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <MX_TIM3_Init+0x10c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e6:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <MX_TIM3_Init+0x10c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027ec:	482a      	ldr	r0, [pc, #168]	; (8002898 <MX_TIM3_Init+0x10c>)
 80027ee:	f002 ff66 	bl	80056be <HAL_TIM_Base_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80027f8:	f7ff fe90 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002806:	4619      	mov	r1, r3
 8002808:	4823      	ldr	r0, [pc, #140]	; (8002898 <MX_TIM3_Init+0x10c>)
 800280a:	f003 f9e9 	bl	8005be0 <HAL_TIM_ConfigClockSource>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002814:	f7ff fe82 	bl	800251c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002818:	481f      	ldr	r0, [pc, #124]	; (8002898 <MX_TIM3_Init+0x10c>)
 800281a:	f002 ff9f 	bl	800575c <HAL_TIM_IC_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002824:	f7ff fe7a 	bl	800251c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800282c:	2340      	movs	r3, #64	; 0x40
 800282e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	4619      	mov	r1, r3
 800283a:	4817      	ldr	r0, [pc, #92]	; (8002898 <MX_TIM3_Init+0x10c>)
 800283c:	f003 fa94 	bl	8005d68 <HAL_TIM_SlaveConfigSynchro>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8002846:	f7ff fe69 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	480f      	ldr	r0, [pc, #60]	; (8002898 <MX_TIM3_Init+0x10c>)
 800285a:	f003 fe4b 	bl	80064f4 <HAL_TIMEx_MasterConfigSynchronization>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8002864:	f7ff fe5a 	bl	800251c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002868:	2300      	movs	r3, #0
 800286a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 800286c:	2303      	movs	r3, #3
 800286e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2200      	movs	r2, #0
 800287c:	4619      	mov	r1, r3
 800287e:	4806      	ldr	r0, [pc, #24]	; (8002898 <MX_TIM3_Init+0x10c>)
 8002880:	f003 f912 	bl	8005aa8 <HAL_TIM_IC_ConfigChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800288a:	f7ff fe47 	bl	800251c <Error_Handler>
  }

}
 800288e:	bf00      	nop
 8002890:	3740      	adds	r7, #64	; 0x40
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200003b8 	.word	0x200003b8
 800289c:	40000400 	.word	0x40000400

080028a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b090      	sub	sp, #64	; 0x40
 80028a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <MX_TIM4_Init+0x130>)
 80028dc:	4a3d      	ldr	r2, [pc, #244]	; (80029d4 <MX_TIM4_Init+0x134>)
 80028de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 80028e0:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <MX_TIM4_Init+0x130>)
 80028e2:	22a7      	movs	r2, #167	; 0xa7
 80028e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e6:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <MX_TIM4_Init+0x130>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80028ec:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <MX_TIM4_Init+0x130>)
 80028ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f4:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <MX_TIM4_Init+0x130>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fa:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <MX_TIM4_Init+0x130>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002900:	4833      	ldr	r0, [pc, #204]	; (80029d0 <MX_TIM4_Init+0x130>)
 8002902:	f002 fedc 	bl	80056be <HAL_TIM_Base_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800290c:	f7ff fe06 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800291a:	4619      	mov	r1, r3
 800291c:	482c      	ldr	r0, [pc, #176]	; (80029d0 <MX_TIM4_Init+0x130>)
 800291e:	f003 f95f 	bl	8005be0 <HAL_TIM_ConfigClockSource>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002928:	f7ff fdf8 	bl	800251c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800292c:	4828      	ldr	r0, [pc, #160]	; (80029d0 <MX_TIM4_Init+0x130>)
 800292e:	f002 ff15 	bl	800575c <HAL_TIM_IC_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002938:	f7ff fdf0 	bl	800251c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800293c:	2304      	movs	r3, #4
 800293e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002940:	2350      	movs	r3, #80	; 0x50
 8002942:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4619      	mov	r1, r3
 8002952:	481f      	ldr	r0, [pc, #124]	; (80029d0 <MX_TIM4_Init+0x130>)
 8002954:	f003 fa08 	bl	8005d68 <HAL_TIM_SlaveConfigSynchro>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 800295e:	f7ff fddd 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4619      	mov	r1, r3
 8002970:	4817      	ldr	r0, [pc, #92]	; (80029d0 <MX_TIM4_Init+0x130>)
 8002972:	f003 fdbf 	bl	80064f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800297c:	f7ff fdce 	bl	800251c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002980:	2300      	movs	r3, #0
 8002982:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002984:	2301      	movs	r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 800298c:	230f      	movs	r3, #15
 800298e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	2200      	movs	r2, #0
 8002994:	4619      	mov	r1, r3
 8002996:	480e      	ldr	r0, [pc, #56]	; (80029d0 <MX_TIM4_Init+0x130>)
 8002998:	f003 f886 	bl	8005aa8 <HAL_TIM_IC_ConfigChannel>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 80029a2:	f7ff fdbb 	bl	800251c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80029a6:	2302      	movs	r3, #2
 80029a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80029aa:	2302      	movs	r3, #2
 80029ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2204      	movs	r2, #4
 80029b6:	4619      	mov	r1, r3
 80029b8:	4805      	ldr	r0, [pc, #20]	; (80029d0 <MX_TIM4_Init+0x130>)
 80029ba:	f003 f875 	bl	8005aa8 <HAL_TIM_IC_ConfigChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM4_Init+0x128>
  {
    Error_Handler();
 80029c4:	f7ff fdaa 	bl	800251c <Error_Handler>
  }

}
 80029c8:	bf00      	nop
 80029ca:	3740      	adds	r7, #64	; 0x40
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000378 	.word	0x20000378
 80029d4:	40000800 	.word	0x40000800

080029d8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	; 0x30
 80029dc:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80029de:	f107 031c 	add.w	r3, r7, #28
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	60da      	str	r2, [r3, #12]
 80029ec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]

  htim8.Instance = TIM8;
 8002a04:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002a06:	4a37      	ldr	r2, [pc, #220]	; (8002ae4 <MX_TIM8_Init+0x10c>)
 8002a08:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8002a0a:	4b35      	ldr	r3, [pc, #212]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002a0c:	22a7      	movs	r2, #167	; 0xa7
 8002a0e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a10:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002a16:	4b32      	ldr	r3, [pc, #200]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a1c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1e:	4b30      	ldr	r3, [pc, #192]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a24:	4b2e      	ldr	r3, [pc, #184]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002a30:	482b      	ldr	r0, [pc, #172]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002a32:	f002 fe44 	bl	80056be <HAL_TIM_Base_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8002a3c:	f7ff fd6e 	bl	800251c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002a40:	4827      	ldr	r0, [pc, #156]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002a42:	f002 fe8b 	bl	800575c <HAL_TIM_IC_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002a4c:	f7ff fd66 	bl	800251c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002a50:	2304      	movs	r3, #4
 8002a52:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002a54:	2360      	movs	r3, #96	; 0x60
 8002a56:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8002a60:	f107 031c 	add.w	r3, r7, #28
 8002a64:	4619      	mov	r1, r3
 8002a66:	481e      	ldr	r0, [pc, #120]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002a68:	f003 f97e 	bl	8005d68 <HAL_TIM_SlaveConfigSynchro>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002a72:	f7ff fd53 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	4619      	mov	r1, r3
 8002a84:	4816      	ldr	r0, [pc, #88]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002a86:	f003 fd35 	bl	80064f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8002a90:	f7ff fd44 	bl	800251c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a94:	2300      	movs	r3, #0
 8002a96:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8002aa0:	230f      	movs	r3, #15
 8002aa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	480d      	ldr	r0, [pc, #52]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002aac:	f002 fffc 	bl	8005aa8 <HAL_TIM_IC_ConfigChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 8002ab6:	f7ff fd31 	bl	800251c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002aba:	2302      	movs	r3, #2
 8002abc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <MX_TIM8_Init+0x108>)
 8002aca:	f002 ffed 	bl	8005aa8 <HAL_TIM_IC_ConfigChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8002ad4:	f7ff fd22 	bl	800251c <Error_Handler>
  }

}
 8002ad8:	bf00      	nop
 8002ada:	3730      	adds	r7, #48	; 0x30
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000338 	.word	0x20000338
 8002ae4:	40010400 	.word	0x40010400

08002ae8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08e      	sub	sp, #56	; 0x38
 8002aec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 8002b18:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <MX_TIM12_Init+0x108>)
 8002b1a:	4a36      	ldr	r2, [pc, #216]	; (8002bf4 <MX_TIM12_Init+0x10c>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 167;
 8002b1e:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <MX_TIM12_Init+0x108>)
 8002b20:	22a7      	movs	r2, #167	; 0xa7
 8002b22:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <MX_TIM12_Init+0x108>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002b2a:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <MX_TIM12_Init+0x108>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <MX_TIM12_Init+0x108>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b38:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <MX_TIM12_Init+0x108>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002b3e:	482c      	ldr	r0, [pc, #176]	; (8002bf0 <MX_TIM12_Init+0x108>)
 8002b40:	f002 fdbd 	bl	80056be <HAL_TIM_Base_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8002b4a:	f7ff fce7 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002b54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4825      	ldr	r0, [pc, #148]	; (8002bf0 <MX_TIM12_Init+0x108>)
 8002b5c:	f003 f840 	bl	8005be0 <HAL_TIM_ConfigClockSource>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8002b66:	f7ff fcd9 	bl	800251c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8002b6a:	4821      	ldr	r0, [pc, #132]	; (8002bf0 <MX_TIM12_Init+0x108>)
 8002b6c:	f002 fdf6 	bl	800575c <HAL_TIM_IC_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 8002b76:	f7ff fcd1 	bl	800251c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002b7e:	2350      	movs	r3, #80	; 0x50
 8002b80:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerFilter = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4817      	ldr	r0, [pc, #92]	; (8002bf0 <MX_TIM12_Init+0x108>)
 8002b92:	f003 f8e9 	bl	8005d68 <HAL_TIM_SlaveConfigSynchro>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM12_Init+0xb8>
  {
    Error_Handler();
 8002b9c:	f7ff fcbe 	bl	800251c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8002bac:	230f      	movs	r3, #15
 8002bae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	480e      	ldr	r0, [pc, #56]	; (8002bf0 <MX_TIM12_Init+0x108>)
 8002bb8:	f002 ff76 	bl	8005aa8 <HAL_TIM_IC_ConfigChannel>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM12_Init+0xde>
  {
    Error_Handler();
 8002bc2:	f7ff fcab 	bl	800251c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <MX_TIM12_Init+0x108>)
 8002bda:	f002 ff65 	bl	8005aa8 <HAL_TIM_IC_ConfigChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 8002be4:	f7ff fc9a 	bl	800251c <Error_Handler>
  }

}
 8002be8:	bf00      	nop
 8002bea:	3738      	adds	r7, #56	; 0x38
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000438 	.word	0x20000438
 8002bf4:	40001800 	.word	0x40001800

08002bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b092      	sub	sp, #72	; 0x48
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a8a      	ldr	r2, [pc, #552]	; (8002e40 <HAL_TIM_Base_MspInit+0x248>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d135      	bne.n	8002c86 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c1e:	4b89      	ldr	r3, [pc, #548]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	4a88      	ldr	r2, [pc, #544]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2a:	4b86      	ldr	r3, [pc, #536]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3a:	4b82      	ldr	r3, [pc, #520]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a81      	ldr	r2, [pc, #516]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b7f      	ldr	r3, [pc, #508]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002c52:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	2300      	movs	r3, #0
 8002c62:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c64:	2301      	movs	r3, #1
 8002c66:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4876      	ldr	r0, [pc, #472]	; (8002e48 <HAL_TIM_Base_MspInit+0x250>)
 8002c70:	f001 ff10 	bl	8004a94 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002c74:	2200      	movs	r2, #0
 8002c76:	2100      	movs	r1, #0
 8002c78:	201b      	movs	r0, #27
 8002c7a:	f001 fb5a 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002c7e:	201b      	movs	r0, #27
 8002c80:	f001 fb73 	bl	800436a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002c84:	e0d8      	b.n	8002e38 <HAL_TIM_Base_MspInit+0x240>
  else if(tim_baseHandle->Instance==TIM3)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a70      	ldr	r2, [pc, #448]	; (8002e4c <HAL_TIM_Base_MspInit+0x254>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d12c      	bne.n	8002cea <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c90:	2300      	movs	r3, #0
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c94:	4b6b      	ldr	r3, [pc, #428]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	4a6a      	ldr	r2, [pc, #424]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca0:	4b68      	ldr	r3, [pc, #416]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cac:	2300      	movs	r3, #0
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb0:	4b64      	ldr	r3, [pc, #400]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	4a63      	ldr	r2, [pc, #396]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbc:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cc8:	2310      	movs	r3, #16
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	485b      	ldr	r0, [pc, #364]	; (8002e50 <HAL_TIM_Base_MspInit+0x258>)
 8002ce4:	f001 fed6 	bl	8004a94 <HAL_GPIO_Init>
}
 8002ce8:	e0a6      	b.n	8002e38 <HAL_TIM_Base_MspInit+0x240>
  else if(tim_baseHandle->Instance==TIM4)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a59      	ldr	r2, [pc, #356]	; (8002e54 <HAL_TIM_Base_MspInit+0x25c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d134      	bne.n	8002d5e <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
 8002cf8:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	4a51      	ldr	r2, [pc, #324]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	6413      	str	r3, [r2, #64]	; 0x40
 8002d04:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	623b      	str	r3, [r7, #32]
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	4b4b      	ldr	r3, [pc, #300]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4a4a      	ldr	r2, [pc, #296]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d20:	4b48      	ldr	r3, [pc, #288]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d2c:	2340      	movs	r3, #64	; 0x40
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d44:	4619      	mov	r1, r3
 8002d46:	4842      	ldr	r0, [pc, #264]	; (8002e50 <HAL_TIM_Base_MspInit+0x258>)
 8002d48:	f001 fea4 	bl	8004a94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	201e      	movs	r0, #30
 8002d52:	f001 faee 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d56:	201e      	movs	r0, #30
 8002d58:	f001 fb07 	bl	800436a <HAL_NVIC_EnableIRQ>
}
 8002d5c:	e06c      	b.n	8002e38 <HAL_TIM_Base_MspInit+0x240>
  else if(tim_baseHandle->Instance==TIM8)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3d      	ldr	r2, [pc, #244]	; (8002e58 <HAL_TIM_Base_MspInit+0x260>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d135      	bne.n	8002dd4 <HAL_TIM_Base_MspInit+0x1dc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	4a34      	ldr	r2, [pc, #208]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002d72:	f043 0302 	orr.w	r3, r3, #2
 8002d76:	6453      	str	r3, [r2, #68]	; 0x44
 8002d78:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	4a2d      	ldr	r2, [pc, #180]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002d8e:	f043 0304 	orr.w	r3, r3, #4
 8002d92:	6313      	str	r3, [r2, #48]	; 0x30
 8002d94:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002da0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002da4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002db2:	2303      	movs	r3, #3
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4827      	ldr	r0, [pc, #156]	; (8002e5c <HAL_TIM_Base_MspInit+0x264>)
 8002dbe:	f001 fe69 	bl	8004a94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	202e      	movs	r0, #46	; 0x2e
 8002dc8:	f001 fab3 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002dcc:	202e      	movs	r0, #46	; 0x2e
 8002dce:	f001 facc 	bl	800436a <HAL_NVIC_EnableIRQ>
}
 8002dd2:	e031      	b.n	8002e38 <HAL_TIM_Base_MspInit+0x240>
  else if(tim_baseHandle->Instance==TIM12)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a21      	ldr	r2, [pc, #132]	; (8002e60 <HAL_TIM_Base_MspInit+0x268>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d12c      	bne.n	8002e38 <HAL_TIM_Base_MspInit+0x240>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_TIM_Base_MspInit+0x24c>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002e28:	2309      	movs	r3, #9
 8002e2a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e30:	4619      	mov	r1, r3
 8002e32:	4807      	ldr	r0, [pc, #28]	; (8002e50 <HAL_TIM_Base_MspInit+0x258>)
 8002e34:	f001 fe2e 	bl	8004a94 <HAL_GPIO_Init>
}
 8002e38:	bf00      	nop
 8002e3a:	3748      	adds	r7, #72	; 0x48
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020000 	.word	0x40020000
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40020400 	.word	0x40020400
 8002e54:	40000800 	.word	0x40000800
 8002e58:	40010400 	.word	0x40010400
 8002e5c:	40020800 	.word	0x40020800
 8002e60:	40001800 	.word	0x40001800

08002e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e6a:	e003      	b.n	8002e74 <LoopCopyDataInit>

08002e6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e72:	3104      	adds	r1, #4

08002e74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e74:	480b      	ldr	r0, [pc, #44]	; (8002ea4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e7c:	d3f6      	bcc.n	8002e6c <CopyDataInit>
  ldr  r2, =_sbss
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e80:	e002      	b.n	8002e88 <LoopFillZerobss>

08002e82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e84:	f842 3b04 	str.w	r3, [r2], #4

08002e88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e8c:	d3f9      	bcc.n	8002e82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e8e:	f7ff fbdd 	bl	800264c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e92:	f003 fbc5 	bl	8006620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e96:	f7ff faaf 	bl	80023f8 <main>
  bx  lr    
 8002e9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ea0:	08008838 	.word	0x08008838
  ldr  r0, =_sdata
 8002ea4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ea8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002eac:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002eb0:	2000047c 	.word	0x2000047c

08002eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb4:	e7fe      	b.n	8002eb4 <ADC_IRQHandler>
	...

08002eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <HAL_Init+0x40>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <HAL_Init+0x40>)
 8002ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_Init+0x40>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <HAL_Init+0x40>)
 8002ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <HAL_Init+0x40>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <HAL_Init+0x40>)
 8002eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee0:	2003      	movs	r0, #3
 8002ee2:	f001 fa1b 	bl	800431c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f000 f808 	bl	8002efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eec:	f7ff fb1c 	bl	8002528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023c00 	.word	0x40023c00

08002efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <HAL_InitTick+0x54>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_InitTick+0x58>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 fa33 	bl	8004386 <HAL_SYSTICK_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e00e      	b.n	8002f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b0f      	cmp	r3, #15
 8002f2e:	d80a      	bhi.n	8002f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f30:	2200      	movs	r2, #0
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295
 8002f38:	f001 f9fb 	bl	8004332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f3c:	4a06      	ldr	r2, [pc, #24]	; (8002f58 <HAL_InitTick+0x5c>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e000      	b.n	8002f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000008 	.word	0x20000008
 8002f54:	20000010 	.word	0x20000010
 8002f58:	2000000c 	.word	0x2000000c

08002f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_IncTick+0x20>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_IncTick+0x24>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4a04      	ldr	r2, [pc, #16]	; (8002f80 <HAL_IncTick+0x24>)
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000010 	.word	0x20000010
 8002f80:	20000478 	.word	0x20000478

08002f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  return uwTick;
 8002f88:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <HAL_GetTick+0x14>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20000478 	.word	0x20000478

08002f9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e033      	b.n	800301a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fe feac 	bl	8001d18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d118      	bne.n	800300c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fe2:	f023 0302 	bic.w	r3, r3, #2
 8002fe6:	f043 0202 	orr.w	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f93a 	bl	8003268 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	f043 0201 	orr.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
 800300a:	e001      	b.n	8003010 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1c>
 800303c:	2302      	movs	r3, #2
 800303e:	e105      	b.n	800324c <HAL_ADC_ConfigChannel+0x228>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b09      	cmp	r3, #9
 800304e:	d925      	bls.n	800309c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68d9      	ldr	r1, [r3, #12]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	3b1e      	subs	r3, #30
 8003066:	2207      	movs	r2, #7
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43da      	mvns	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	400a      	ands	r2, r1
 8003074:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68d9      	ldr	r1, [r3, #12]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	4618      	mov	r0, r3
 8003088:	4603      	mov	r3, r0
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4403      	add	r3, r0
 800308e:	3b1e      	subs	r3, #30
 8003090:	409a      	lsls	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	e022      	b.n	80030e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6919      	ldr	r1, [r3, #16]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	2207      	movs	r2, #7
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	400a      	ands	r2, r1
 80030be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6919      	ldr	r1, [r3, #16]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4403      	add	r3, r0
 80030d8:	409a      	lsls	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d824      	bhi.n	8003134 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	3b05      	subs	r3, #5
 80030fc:	221f      	movs	r2, #31
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	400a      	ands	r2, r1
 800310a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	4618      	mov	r0, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	3b05      	subs	r3, #5
 8003126:	fa00 f203 	lsl.w	r2, r0, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	635a      	str	r2, [r3, #52]	; 0x34
 8003132:	e04c      	b.n	80031ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d824      	bhi.n	8003186 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	3b23      	subs	r3, #35	; 0x23
 800314e:	221f      	movs	r2, #31
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43da      	mvns	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	400a      	ands	r2, r1
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	4618      	mov	r0, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	3b23      	subs	r3, #35	; 0x23
 8003178:	fa00 f203 	lsl.w	r2, r0, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
 8003184:	e023      	b.n	80031ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	3b41      	subs	r3, #65	; 0x41
 8003198:	221f      	movs	r2, #31
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43da      	mvns	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	400a      	ands	r2, r1
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4618      	mov	r0, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	3b41      	subs	r3, #65	; 0x41
 80031c2:	fa00 f203 	lsl.w	r2, r0, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_ADC_ConfigChannel+0x234>)
 80031d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a21      	ldr	r2, [pc, #132]	; (800325c <HAL_ADC_ConfigChannel+0x238>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d109      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x1cc>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b12      	cmp	r3, #18
 80031e2:	d105      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a19      	ldr	r2, [pc, #100]	; (800325c <HAL_ADC_ConfigChannel+0x238>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d123      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x21e>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d003      	beq.n	800320a <HAL_ADC_ConfigChannel+0x1e6>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b11      	cmp	r3, #17
 8003208:	d11b      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b10      	cmp	r3, #16
 800321c:	d111      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800321e:	4b10      	ldr	r3, [pc, #64]	; (8003260 <HAL_ADC_ConfigChannel+0x23c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <HAL_ADC_ConfigChannel+0x240>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	0c9a      	lsrs	r2, r3, #18
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003234:	e002      	b.n	800323c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3b01      	subs	r3, #1
 800323a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f9      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40012300 	.word	0x40012300
 800325c:	40012000 	.word	0x40012000
 8003260:	20000008 	.word	0x20000008
 8003264:	431bde83 	.word	0x431bde83

08003268 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003270:	4b79      	ldr	r3, [pc, #484]	; (8003458 <ADC_Init+0x1f0>)
 8003272:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	431a      	orrs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800329c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	021a      	lsls	r2, r3, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	4a58      	ldr	r2, [pc, #352]	; (800345c <ADC_Init+0x1f4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800330e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6899      	ldr	r1, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6899      	ldr	r1, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	e00f      	b.n	8003366 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003364:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0202 	bic.w	r2, r2, #2
 8003374:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6899      	ldr	r1, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7e1b      	ldrb	r3, [r3, #24]
 8003380:	005a      	lsls	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01b      	beq.n	80033cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	3b01      	subs	r3, #1
 80033c0:	035a      	lsls	r2, r3, #13
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	e007      	b.n	80033dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	051a      	lsls	r2, r3, #20
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003410:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6899      	ldr	r1, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800341e:	025a      	lsls	r2, r3, #9
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003436:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6899      	ldr	r1, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	029a      	lsls	r2, r3, #10
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40012300 	.word	0x40012300
 800345c:	0f000001 	.word	0x0f000001

08003460 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e0ed      	b.n	800364e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d102      	bne.n	8003484 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fe fdc4 	bl	800200c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0202 	bic.w	r2, r2, #2
 8003492:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003494:	f7ff fd76 	bl	8002f84 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800349a:	e012      	b.n	80034c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800349c:	f7ff fd72 	bl	8002f84 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b0a      	cmp	r3, #10
 80034a8:	d90b      	bls.n	80034c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2205      	movs	r2, #5
 80034ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0c5      	b.n	800364e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e5      	bne.n	800349c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034e0:	f7ff fd50 	bl	8002f84 <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034e6:	e012      	b.n	800350e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034e8:	f7ff fd4c 	bl	8002f84 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b0a      	cmp	r3, #10
 80034f4:	d90b      	bls.n	800350e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2205      	movs	r2, #5
 8003506:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e09f      	b.n	800364e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0e5      	beq.n	80034e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7e1b      	ldrb	r3, [r3, #24]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d108      	bne.n	8003536 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e007      	b.n	8003546 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	7e5b      	ldrb	r3, [r3, #25]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d108      	bne.n	8003560 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e007      	b.n	8003570 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	7e9b      	ldrb	r3, [r3, #26]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0220 	orr.w	r2, r2, #32
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	e007      	b.n	800359a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0220 	bic.w	r2, r2, #32
 8003598:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	7edb      	ldrb	r3, [r3, #27]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d108      	bne.n	80035b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0210 	bic.w	r2, r2, #16
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e007      	b.n	80035c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0210 	orr.w	r2, r2, #16
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7f1b      	ldrb	r3, [r3, #28]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d108      	bne.n	80035de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0208 	orr.w	r2, r2, #8
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e007      	b.n	80035ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0208 	bic.w	r2, r2, #8
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7f5b      	ldrb	r3, [r3, #29]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0204 	orr.w	r2, r2, #4
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e007      	b.n	8003618 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0204 	bic.w	r2, r2, #4
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	ea42 0103 	orr.w	r1, r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	1e5a      	subs	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800366e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d003      	beq.n	800367e <HAL_CAN_ConfigFilter+0x26>
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	2b02      	cmp	r3, #2
 800367a:	f040 80be 	bne.w	80037fa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800367e:	4b65      	ldr	r3, [pc, #404]	; (8003814 <HAL_CAN_ConfigFilter+0x1bc>)
 8003680:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003698:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	431a      	orrs	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	2201      	movs	r2, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	401a      	ands	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d123      	bne.n	8003728 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	401a      	ands	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003702:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3248      	adds	r2, #72	; 0x48
 8003708:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800371c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800371e:	6979      	ldr	r1, [r7, #20]
 8003720:	3348      	adds	r3, #72	; 0x48
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d122      	bne.n	8003776 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	431a      	orrs	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003750:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	3248      	adds	r2, #72	; 0x48
 8003756:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800376a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800376c:	6979      	ldr	r1, [r7, #20]
 800376e:	3348      	adds	r3, #72	; 0x48
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	440b      	add	r3, r1
 8003774:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	43db      	mvns	r3, r3
 8003788:	401a      	ands	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003790:	e007      	b.n	80037a2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	431a      	orrs	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	401a      	ands	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80037bc:	e007      	b.n	80037ce <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d107      	bne.n	80037e6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	431a      	orrs	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037ec:	f023 0201 	bic.w	r2, r3, #1
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e006      	b.n	8003808 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
  }
}
 8003808:	4618      	mov	r0, r3
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40006400 	.word	0x40006400

08003818 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d12e      	bne.n	800388a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003844:	f7ff fb9e 	bl	8002f84 <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800384a:	e012      	b.n	8003872 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800384c:	f7ff fb9a 	bl	8002f84 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b0a      	cmp	r3, #10
 8003858:	d90b      	bls.n	8003872 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2205      	movs	r2, #5
 800386a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e012      	b.n	8003898 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e5      	bne.n	800384c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e006      	b.n	8003898 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d003      	beq.n	80038cc <HAL_CAN_AddTxMessage+0x2c>
 80038c4:	7ffb      	ldrb	r3, [r7, #31]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	f040 80b8 	bne.w	8003a3c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10a      	bne.n	80038ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d105      	bne.n	80038ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 80a0 	beq.w	8003a2c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	0e1b      	lsrs	r3, r3, #24
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d907      	bls.n	800390c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e09e      	b.n	8003a4a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800390c:	2201      	movs	r2, #1
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	409a      	lsls	r2, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10d      	bne.n	800393a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003928:	68f9      	ldr	r1, [r7, #12]
 800392a:	6809      	ldr	r1, [r1, #0]
 800392c:	431a      	orrs	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	3318      	adds	r3, #24
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	440b      	add	r3, r1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e00f      	b.n	800395a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003944:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800394e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3318      	adds	r3, #24
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	440b      	add	r3, r1
 8003958:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	3318      	adds	r3, #24
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	440b      	add	r3, r1
 800396a:	3304      	adds	r3, #4
 800396c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	7d1b      	ldrb	r3, [r3, #20]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d111      	bne.n	800399a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3318      	adds	r3, #24
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	4413      	add	r3, r2
 8003982:	3304      	adds	r3, #4
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	6811      	ldr	r1, [r2, #0]
 800398a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3318      	adds	r3, #24
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	440b      	add	r3, r1
 8003996:	3304      	adds	r3, #4
 8003998:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3307      	adds	r3, #7
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	061a      	lsls	r2, r3, #24
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3306      	adds	r3, #6
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	041b      	lsls	r3, r3, #16
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3305      	adds	r3, #5
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	4313      	orrs	r3, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	3204      	adds	r2, #4
 80039ba:	7812      	ldrb	r2, [r2, #0]
 80039bc:	4610      	mov	r0, r2
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	6811      	ldr	r1, [r2, #0]
 80039c2:	ea43 0200 	orr.w	r2, r3, r0
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	440b      	add	r3, r1
 80039cc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80039d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3303      	adds	r3, #3
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	061a      	lsls	r2, r3, #24
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3302      	adds	r3, #2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3301      	adds	r3, #1
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	4313      	orrs	r3, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	4610      	mov	r0, r2
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	6811      	ldr	r1, [r2, #0]
 80039f8:	ea43 0200 	orr.w	r2, r3, r0
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	440b      	add	r3, r1
 8003a02:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003a06:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	3318      	adds	r3, #24
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	4413      	add	r3, r2
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	6811      	ldr	r1, [r2, #0]
 8003a1a:	f043 0201 	orr.w	r2, r3, #1
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	3318      	adds	r3, #24
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	440b      	add	r3, r1
 8003a26:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e00e      	b.n	8003a4a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e006      	b.n	8003a4a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
  }
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3724      	adds	r7, #36	; 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a68:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d002      	beq.n	8003a76 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003a70:	7afb      	ldrb	r3, [r7, #11]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d11d      	bne.n	8003ab2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3301      	adds	r3, #1
 8003a88:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d003      	beq.n	8003ae4 <HAL_CAN_GetRxMessage+0x24>
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	f040 80f3 	bne.w	8003cca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10e      	bne.n	8003b08 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d116      	bne.n	8003b26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0e7      	b.n	8003cd8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d107      	bne.n	8003b26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0d8      	b.n	8003cd8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	331b      	adds	r3, #27
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	4413      	add	r3, r2
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0204 	and.w	r2, r3, #4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10c      	bne.n	8003b5e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	331b      	adds	r3, #27
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	4413      	add	r3, r2
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	0d5b      	lsrs	r3, r3, #21
 8003b54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e00b      	b.n	8003b76 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	331b      	adds	r3, #27
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	4413      	add	r3, r2
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	08db      	lsrs	r3, r3, #3
 8003b6e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	331b      	adds	r3, #27
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	4413      	add	r3, r2
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0202 	and.w	r2, r3, #2
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	331b      	adds	r3, #27
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	4413      	add	r3, r2
 8003b98:	3304      	adds	r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 020f 	and.w	r2, r3, #15
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	331b      	adds	r3, #27
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	4413      	add	r3, r2
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	0a1b      	lsrs	r3, r3, #8
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	331b      	adds	r3, #27
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3304      	adds	r3, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	0a1a      	lsrs	r2, r3, #8
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0c1a      	lsrs	r2, r3, #16
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	3302      	adds	r3, #2
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	0e1a      	lsrs	r2, r3, #24
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	3303      	adds	r3, #3
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	0a1a      	lsrs	r2, r3, #8
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	3305      	adds	r3, #5
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	0c1a      	lsrs	r2, r3, #16
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	3306      	adds	r3, #6
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0e1a      	lsrs	r2, r3, #24
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	3307      	adds	r3, #7
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d108      	bne.n	8003cb6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0220 	orr.w	r2, r2, #32
 8003cb2:	60da      	str	r2, [r3, #12]
 8003cb4:	e007      	b.n	8003cc6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0220 	orr.w	r2, r2, #32
 8003cc4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e006      	b.n	8003cd8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
  }
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d002      	beq.n	8003d02 <HAL_CAN_ActivateNotification+0x1e>
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d109      	bne.n	8003d16 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6959      	ldr	r1, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e006      	b.n	8003d24 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
  }
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	; 0x28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d07c      	beq.n	8003e70 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d023      	beq.n	8003dc8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2201      	movs	r2, #1
 8003d86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f983 	bl	800409e <HAL_CAN_TxMailbox0CompleteCallback>
 8003d98:	e016      	b.n	8003dc8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dac:	e00c      	b.n	8003dc8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc0:	e002      	b.n	8003dc8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f989 	bl	80040da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d024      	beq.n	8003e1c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f963 	bl	80040b2 <HAL_CAN_TxMailbox1CompleteCallback>
 8003dec:	e016      	b.n	8003e1c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003e00:	e00c      	b.n	8003e1c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
 8003e14:	e002      	b.n	8003e1c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f969 	bl	80040ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d024      	beq.n	8003e70 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f943 	bl	80040c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e40:	e016      	b.n	8003e70 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
 8003e54:	e00c      	b.n	8003e70 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
 8003e68:	e002      	b.n	8003e70 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f949 	bl	8004102 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2210      	movs	r2, #16
 8003e92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d006      	beq.n	8003eb6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2208      	movs	r2, #8
 8003eae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f930 	bl	8004116 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd f878 	bl	8000fc4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d006      	beq.n	8003f1a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2208      	movs	r2, #8
 8003f12:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f908 	bl	800412a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fd f860 	bl	8000ff8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2210      	movs	r2, #16
 8003f52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8f2 	bl	800413e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00b      	beq.n	8003f7c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d006      	beq.n	8003f7c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2208      	movs	r2, #8
 8003f74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f8eb 	bl	8004152 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d07b      	beq.n	800407e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d072      	beq.n	8004076 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	f043 0302 	orr.w	r3, r3, #2
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f043 0304 	orr.w	r3, r3, #4
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d043      	beq.n	8004076 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d03e      	beq.n	8004076 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ffe:	2b60      	cmp	r3, #96	; 0x60
 8004000:	d02b      	beq.n	800405a <HAL_CAN_IRQHandler+0x32a>
 8004002:	2b60      	cmp	r3, #96	; 0x60
 8004004:	d82e      	bhi.n	8004064 <HAL_CAN_IRQHandler+0x334>
 8004006:	2b50      	cmp	r3, #80	; 0x50
 8004008:	d022      	beq.n	8004050 <HAL_CAN_IRQHandler+0x320>
 800400a:	2b50      	cmp	r3, #80	; 0x50
 800400c:	d82a      	bhi.n	8004064 <HAL_CAN_IRQHandler+0x334>
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d019      	beq.n	8004046 <HAL_CAN_IRQHandler+0x316>
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d826      	bhi.n	8004064 <HAL_CAN_IRQHandler+0x334>
 8004016:	2b30      	cmp	r3, #48	; 0x30
 8004018:	d010      	beq.n	800403c <HAL_CAN_IRQHandler+0x30c>
 800401a:	2b30      	cmp	r3, #48	; 0x30
 800401c:	d822      	bhi.n	8004064 <HAL_CAN_IRQHandler+0x334>
 800401e:	2b10      	cmp	r3, #16
 8004020:	d002      	beq.n	8004028 <HAL_CAN_IRQHandler+0x2f8>
 8004022:	2b20      	cmp	r3, #32
 8004024:	d005      	beq.n	8004032 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004026:	e01d      	b.n	8004064 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	f043 0308 	orr.w	r3, r3, #8
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004030:	e019      	b.n	8004066 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	f043 0310 	orr.w	r3, r3, #16
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800403a:	e014      	b.n	8004066 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f043 0320 	orr.w	r3, r3, #32
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004044:	e00f      	b.n	8004066 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800404e:	e00a      	b.n	8004066 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004058:	e005      	b.n	8004066 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004062:	e000      	b.n	8004066 <HAL_CAN_IRQHandler+0x336>
            break;
 8004064:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004074:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2204      	movs	r2, #4
 800407c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f868 	bl	8004166 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004096:	bf00      	nop
 8004098:	3728      	adds	r7, #40	; 0x28
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <__NVIC_SetPriorityGrouping>:
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <__NVIC_SetPriorityGrouping+0x44>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004198:	4013      	ands	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ae:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <__NVIC_SetPriorityGrouping+0x44>)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	60d3      	str	r3, [r2, #12]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <__NVIC_GetPriorityGrouping>:
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <__NVIC_GetPriorityGrouping+0x18>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	0a1b      	lsrs	r3, r3, #8
 80041ce:	f003 0307 	and.w	r3, r3, #7
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	e000ed00 	.word	0xe000ed00

080041e0 <__NVIC_EnableIRQ>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	db0b      	blt.n	800420a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	f003 021f 	and.w	r2, r3, #31
 80041f8:	4907      	ldr	r1, [pc, #28]	; (8004218 <__NVIC_EnableIRQ+0x38>)
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2001      	movs	r0, #1
 8004202:	fa00 f202 	lsl.w	r2, r0, r2
 8004206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	e000e100 	.word	0xe000e100

0800421c <__NVIC_SetPriority>:
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422c:	2b00      	cmp	r3, #0
 800422e:	db0a      	blt.n	8004246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	490c      	ldr	r1, [pc, #48]	; (8004268 <__NVIC_SetPriority+0x4c>)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	0112      	lsls	r2, r2, #4
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	440b      	add	r3, r1
 8004240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004244:	e00a      	b.n	800425c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4908      	ldr	r1, [pc, #32]	; (800426c <__NVIC_SetPriority+0x50>)
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	3b04      	subs	r3, #4
 8004254:	0112      	lsls	r2, r2, #4
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	440b      	add	r3, r1
 800425a:	761a      	strb	r2, [r3, #24]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000e100 	.word	0xe000e100
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <NVIC_EncodePriority>:
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f1c3 0307 	rsb	r3, r3, #7
 800428a:	2b04      	cmp	r3, #4
 800428c:	bf28      	it	cs
 800428e:	2304      	movcs	r3, #4
 8004290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3304      	adds	r3, #4
 8004296:	2b06      	cmp	r3, #6
 8004298:	d902      	bls.n	80042a0 <NVIC_EncodePriority+0x30>
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3b03      	subs	r3, #3
 800429e:	e000      	b.n	80042a2 <NVIC_EncodePriority+0x32>
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43da      	mvns	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	401a      	ands	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b8:	f04f 31ff 	mov.w	r1, #4294967295
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	43d9      	mvns	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	4313      	orrs	r3, r2
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3724      	adds	r7, #36	; 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <SysTick_Config>:
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e8:	d301      	bcc.n	80042ee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80042ea:	2301      	movs	r3, #1
 80042ec:	e00f      	b.n	800430e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ee:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <SysTick_Config+0x40>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042f6:	210f      	movs	r1, #15
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	f7ff ff8e 	bl	800421c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <SysTick_Config+0x40>)
 8004302:	2200      	movs	r2, #0
 8004304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004306:	4b04      	ldr	r3, [pc, #16]	; (8004318 <SysTick_Config+0x40>)
 8004308:	2207      	movs	r2, #7
 800430a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	e000e010 	.word	0xe000e010

0800431c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff29 	bl	800417c <__NVIC_SetPriorityGrouping>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004344:	f7ff ff3e 	bl	80041c4 <__NVIC_GetPriorityGrouping>
 8004348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	6978      	ldr	r0, [r7, #20]
 8004350:	f7ff ff8e 	bl	8004270 <NVIC_EncodePriority>
 8004354:	4602      	mov	r2, r0
 8004356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff ff5d 	bl	800421c <__NVIC_SetPriority>
}
 8004362:	bf00      	nop
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	4603      	mov	r3, r0
 8004372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff ff31 	bl	80041e0 <__NVIC_EnableIRQ>
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ffa2 	bl	80042d8 <SysTick_Config>
 8004394:	4603      	mov	r3, r0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80043a2:	f7fc ffbb 	bl	800131c <HAL_SYSTICK_Callback>
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e00e      	b.n	80043da <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	795b      	ldrb	r3, [r3, #5]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d105      	bne.n	80043d2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7fd fe97 	bl	8002100 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e014      	b.n	800441e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	791b      	ldrb	r3, [r3, #4]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7fd fec7 	bl	8002198 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2202      	movs	r2, #2
 800440e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004426:	b480      	push	{r7}
 8004428:	b087      	sub	sp, #28
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	795b      	ldrb	r3, [r3, #5]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_DAC_ConfigChannel+0x20>
 8004442:	2302      	movs	r3, #2
 8004444:	e036      	b.n	80044b4 <HAL_DAC_ConfigChannel+0x8e>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2202      	movs	r2, #2
 8004450:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800445a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4013      	ands	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6819      	ldr	r1, [r3, #0]
 8004494:	22c0      	movs	r2, #192	; 0xc0
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	43da      	mvns	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	400a      	ands	r2, r1
 80044a4:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044cc:	f7fe fd5a 	bl	8002f84 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e099      	b.n	8004610 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044fc:	e00f      	b.n	800451e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044fe:	f7fe fd41 	bl	8002f84 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b05      	cmp	r3, #5
 800450a:	d908      	bls.n	800451e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2203      	movs	r2, #3
 8004516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e078      	b.n	8004610 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e8      	bne.n	80044fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4b38      	ldr	r3, [pc, #224]	; (8004618 <HAL_DMA_Init+0x158>)
 8004538:	4013      	ands	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800454a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2b04      	cmp	r3, #4
 8004576:	d107      	bne.n	8004588 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	4313      	orrs	r3, r2
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f023 0307 	bic.w	r3, r3, #7
 800459e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d117      	bne.n	80045e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00e      	beq.n	80045e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f9e9 	bl	800499c <DMA_CheckFifoParam>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2240      	movs	r2, #64	; 0x40
 80045d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045de:	2301      	movs	r3, #1
 80045e0:	e016      	b.n	8004610 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f9a0 	bl	8004930 <DMA_CalcBaseAndBitshift>
 80045f0:	4603      	mov	r3, r0
 80045f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f8:	223f      	movs	r2, #63	; 0x3f
 80045fa:	409a      	lsls	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	f010803f 	.word	0xf010803f

0800461c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004628:	4b92      	ldr	r3, [pc, #584]	; (8004874 <HAL_DMA_IRQHandler+0x258>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a92      	ldr	r2, [pc, #584]	; (8004878 <HAL_DMA_IRQHandler+0x25c>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0a9b      	lsrs	r3, r3, #10
 8004634:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	2208      	movs	r2, #8
 8004648:	409a      	lsls	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01a      	beq.n	8004688 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d013      	beq.n	8004688 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0204 	bic.w	r2, r2, #4
 800466e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	2208      	movs	r2, #8
 8004676:	409a      	lsls	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004680:	f043 0201 	orr.w	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	2201      	movs	r2, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d012      	beq.n	80046be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	2201      	movs	r2, #1
 80046ac:	409a      	lsls	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	f043 0202 	orr.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c2:	2204      	movs	r2, #4
 80046c4:	409a      	lsls	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d012      	beq.n	80046f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e0:	2204      	movs	r2, #4
 80046e2:	409a      	lsls	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ec:	f043 0204 	orr.w	r2, r3, #4
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f8:	2210      	movs	r2, #16
 80046fa:	409a      	lsls	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d043      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d03c      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	2210      	movs	r2, #16
 8004718:	409a      	lsls	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d018      	beq.n	800475e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d108      	bne.n	800474c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d024      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
 800474a:	e01f      	b.n	800478c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01b      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
 800475c:	e016      	b.n	800478c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d107      	bne.n	800477c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0208 	bic.w	r2, r2, #8
 800477a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	2220      	movs	r2, #32
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 808e 	beq.w	80048ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8086 	beq.w	80048ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	2220      	movs	r2, #32
 80047b4:	409a      	lsls	r2, r3
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d136      	bne.n	8004834 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0216 	bic.w	r2, r2, #22
 80047d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <HAL_DMA_IRQHandler+0x1da>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0208 	bic.w	r2, r2, #8
 8004804:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	223f      	movs	r2, #63	; 0x3f
 800480c:	409a      	lsls	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004826:	2b00      	cmp	r3, #0
 8004828:	d07d      	beq.n	8004926 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
        }
        return;
 8004832:	e078      	b.n	8004926 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01c      	beq.n	800487c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d108      	bne.n	8004862 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	2b00      	cmp	r3, #0
 8004856:	d030      	beq.n	80048ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
 8004860:	e02b      	b.n	80048ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d027      	beq.n	80048ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	4798      	blx	r3
 8004872:	e022      	b.n	80048ba <HAL_DMA_IRQHandler+0x29e>
 8004874:	20000008 	.word	0x20000008
 8004878:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0210 	bic.w	r2, r2, #16
 8004898:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d032      	beq.n	8004928 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d022      	beq.n	8004914 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2205      	movs	r2, #5
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d307      	bcc.n	8004902 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f2      	bne.n	80048e6 <HAL_DMA_IRQHandler+0x2ca>
 8004900:	e000      	b.n	8004904 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004902:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
 8004924:	e000      	b.n	8004928 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004926:	bf00      	nop
    }
  }
}
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop

08004930 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	3b10      	subs	r3, #16
 8004940:	4a14      	ldr	r2, [pc, #80]	; (8004994 <DMA_CalcBaseAndBitshift+0x64>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800494a:	4a13      	ldr	r2, [pc, #76]	; (8004998 <DMA_CalcBaseAndBitshift+0x68>)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b03      	cmp	r3, #3
 800495c:	d909      	bls.n	8004972 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004966:	f023 0303 	bic.w	r3, r3, #3
 800496a:	1d1a      	adds	r2, r3, #4
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	659a      	str	r2, [r3, #88]	; 0x58
 8004970:	e007      	b.n	8004982 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	aaaaaaab 	.word	0xaaaaaaab
 8004998:	08008600 	.word	0x08008600

0800499c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d11f      	bne.n	80049f6 <DMA_CheckFifoParam+0x5a>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d856      	bhi.n	8004a6a <DMA_CheckFifoParam+0xce>
 80049bc:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <DMA_CheckFifoParam+0x28>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	080049d5 	.word	0x080049d5
 80049c8:	080049e7 	.word	0x080049e7
 80049cc:	080049d5 	.word	0x080049d5
 80049d0:	08004a6b 	.word	0x08004a6b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d046      	beq.n	8004a6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e4:	e043      	b.n	8004a6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049ee:	d140      	bne.n	8004a72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f4:	e03d      	b.n	8004a72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fe:	d121      	bne.n	8004a44 <DMA_CheckFifoParam+0xa8>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d837      	bhi.n	8004a76 <DMA_CheckFifoParam+0xda>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <DMA_CheckFifoParam+0x70>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004a1d 	.word	0x08004a1d
 8004a10:	08004a23 	.word	0x08004a23
 8004a14:	08004a1d 	.word	0x08004a1d
 8004a18:	08004a35 	.word	0x08004a35
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a20:	e030      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d025      	beq.n	8004a7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a32:	e022      	b.n	8004a7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a3c:	d11f      	bne.n	8004a7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a42:	e01c      	b.n	8004a7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d903      	bls.n	8004a52 <DMA_CheckFifoParam+0xb6>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d003      	beq.n	8004a58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a50:	e018      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
      break;
 8004a56:	e015      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      break;
 8004a68:	e00b      	b.n	8004a82 <DMA_CheckFifoParam+0xe6>
      break;
 8004a6a:	bf00      	nop
 8004a6c:	e00a      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e008      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
      break;
 8004a72:	bf00      	nop
 8004a74:	e006      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
      break;
 8004a76:	bf00      	nop
 8004a78:	e004      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
      break;
 8004a7a:	bf00      	nop
 8004a7c:	e002      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a7e:	bf00      	nop
 8004a80:	e000      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
      break;
 8004a82:	bf00      	nop
    }
  } 
  
  return status; 
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop

08004a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	e16b      	b.n	8004d88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	f040 815a 	bne.w	8004d82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d00b      	beq.n	8004aee <HAL_GPIO_Init+0x5a>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d007      	beq.n	8004aee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ae2:	2b11      	cmp	r3, #17
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b12      	cmp	r3, #18
 8004aec:	d130      	bne.n	8004b50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	2203      	movs	r2, #3
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b24:	2201      	movs	r2, #1
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 0201 	and.w	r2, r3, #1
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	2203      	movs	r2, #3
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4013      	ands	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d003      	beq.n	8004b90 <HAL_GPIO_Init+0xfc>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b12      	cmp	r3, #18
 8004b8e:	d123      	bne.n	8004bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	08da      	lsrs	r2, r3, #3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3208      	adds	r2, #8
 8004b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	08da      	lsrs	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3208      	adds	r2, #8
 8004bd2:	69b9      	ldr	r1, [r7, #24]
 8004bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	2203      	movs	r2, #3
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f003 0203 	and.w	r2, r3, #3
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80b4 	beq.w	8004d82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	4b60      	ldr	r3, [pc, #384]	; (8004da0 <HAL_GPIO_Init+0x30c>)
 8004c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c22:	4a5f      	ldr	r2, [pc, #380]	; (8004da0 <HAL_GPIO_Init+0x30c>)
 8004c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c28:	6453      	str	r3, [r2, #68]	; 0x44
 8004c2a:	4b5d      	ldr	r3, [pc, #372]	; (8004da0 <HAL_GPIO_Init+0x30c>)
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c36:	4a5b      	ldr	r2, [pc, #364]	; (8004da4 <HAL_GPIO_Init+0x310>)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	089b      	lsrs	r3, r3, #2
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	220f      	movs	r2, #15
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a52      	ldr	r2, [pc, #328]	; (8004da8 <HAL_GPIO_Init+0x314>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02b      	beq.n	8004cba <HAL_GPIO_Init+0x226>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a51      	ldr	r2, [pc, #324]	; (8004dac <HAL_GPIO_Init+0x318>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d025      	beq.n	8004cb6 <HAL_GPIO_Init+0x222>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a50      	ldr	r2, [pc, #320]	; (8004db0 <HAL_GPIO_Init+0x31c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01f      	beq.n	8004cb2 <HAL_GPIO_Init+0x21e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a4f      	ldr	r2, [pc, #316]	; (8004db4 <HAL_GPIO_Init+0x320>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d019      	beq.n	8004cae <HAL_GPIO_Init+0x21a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a4e      	ldr	r2, [pc, #312]	; (8004db8 <HAL_GPIO_Init+0x324>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_GPIO_Init+0x216>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a4d      	ldr	r2, [pc, #308]	; (8004dbc <HAL_GPIO_Init+0x328>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00d      	beq.n	8004ca6 <HAL_GPIO_Init+0x212>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a4c      	ldr	r2, [pc, #304]	; (8004dc0 <HAL_GPIO_Init+0x32c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <HAL_GPIO_Init+0x20e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a4b      	ldr	r2, [pc, #300]	; (8004dc4 <HAL_GPIO_Init+0x330>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d101      	bne.n	8004c9e <HAL_GPIO_Init+0x20a>
 8004c9a:	2307      	movs	r3, #7
 8004c9c:	e00e      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	e00c      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	e00a      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004ca6:	2305      	movs	r3, #5
 8004ca8:	e008      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004caa:	2304      	movs	r3, #4
 8004cac:	e006      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e004      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e002      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	f002 0203 	and.w	r2, r2, #3
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	4093      	lsls	r3, r2
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ccc:	4935      	ldr	r1, [pc, #212]	; (8004da4 <HAL_GPIO_Init+0x310>)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cda:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_GPIO_Init+0x334>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cfe:	4a32      	ldr	r2, [pc, #200]	; (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d04:	4b30      	ldr	r3, [pc, #192]	; (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d28:	4a27      	ldr	r2, [pc, #156]	; (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d2e:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d52:	4a1d      	ldr	r2, [pc, #116]	; (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d58:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d7c:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b0f      	cmp	r3, #15
 8004d8c:	f67f ae90 	bls.w	8004ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3724      	adds	r7, #36	; 0x24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40013800 	.word	0x40013800
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40020800 	.word	0x40020800
 8004db4:	40020c00 	.word	0x40020c00
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40021400 	.word	0x40021400
 8004dc0:	40021800 	.word	0x40021800
 8004dc4:	40021c00 	.word	0x40021c00
 8004dc8:	40013c00 	.word	0x40013c00

08004dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ddc:	787b      	ldrb	r3, [r7, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004de2:	887a      	ldrh	r2, [r7, #2]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004de8:	e003      	b.n	8004df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	041a      	lsls	r2, r3, #16
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	619a      	str	r2, [r3, #24]
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e25b      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d075      	beq.n	8004f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e1e:	4ba3      	ldr	r3, [pc, #652]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 030c 	and.w	r3, r3, #12
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d00c      	beq.n	8004e44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e2a:	4ba0      	ldr	r3, [pc, #640]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d112      	bne.n	8004e5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e36:	4b9d      	ldr	r3, [pc, #628]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e42:	d10b      	bne.n	8004e5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e44:	4b99      	ldr	r3, [pc, #612]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d05b      	beq.n	8004f08 <HAL_RCC_OscConfig+0x108>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d157      	bne.n	8004f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e236      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e64:	d106      	bne.n	8004e74 <HAL_RCC_OscConfig+0x74>
 8004e66:	4b91      	ldr	r3, [pc, #580]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a90      	ldr	r2, [pc, #576]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e01d      	b.n	8004eb0 <HAL_RCC_OscConfig+0xb0>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e7c:	d10c      	bne.n	8004e98 <HAL_RCC_OscConfig+0x98>
 8004e7e:	4b8b      	ldr	r3, [pc, #556]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a8a      	ldr	r2, [pc, #552]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	4b88      	ldr	r3, [pc, #544]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a87      	ldr	r2, [pc, #540]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	e00b      	b.n	8004eb0 <HAL_RCC_OscConfig+0xb0>
 8004e98:	4b84      	ldr	r3, [pc, #528]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a83      	ldr	r2, [pc, #524]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	4b81      	ldr	r3, [pc, #516]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a80      	ldr	r2, [pc, #512]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d013      	beq.n	8004ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb8:	f7fe f864 	bl	8002f84 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec0:	f7fe f860 	bl	8002f84 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b64      	cmp	r3, #100	; 0x64
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e1fb      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed2:	4b76      	ldr	r3, [pc, #472]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0xc0>
 8004ede:	e014      	b.n	8004f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee0:	f7fe f850 	bl	8002f84 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee8:	f7fe f84c 	bl	8002f84 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b64      	cmp	r3, #100	; 0x64
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e1e7      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004efa:	4b6c      	ldr	r3, [pc, #432]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0xe8>
 8004f06:	e000      	b.n	8004f0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d063      	beq.n	8004fde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f16:	4b65      	ldr	r3, [pc, #404]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00b      	beq.n	8004f3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f22:	4b62      	ldr	r3, [pc, #392]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d11c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2e:	4b5f      	ldr	r3, [pc, #380]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d116      	bne.n	8004f68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f3a:	4b5c      	ldr	r3, [pc, #368]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <HAL_RCC_OscConfig+0x152>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d001      	beq.n	8004f52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e1bb      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f52:	4b56      	ldr	r3, [pc, #344]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	4952      	ldr	r1, [pc, #328]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f66:	e03a      	b.n	8004fde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d020      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f70:	4b4f      	ldr	r3, [pc, #316]	; (80050b0 <HAL_RCC_OscConfig+0x2b0>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f76:	f7fe f805 	bl	8002f84 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f7e:	f7fe f801 	bl	8002f84 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e19c      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f90:	4b46      	ldr	r3, [pc, #280]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9c:	4b43      	ldr	r3, [pc, #268]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	4940      	ldr	r1, [pc, #256]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	600b      	str	r3, [r1, #0]
 8004fb0:	e015      	b.n	8004fde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fb2:	4b3f      	ldr	r3, [pc, #252]	; (80050b0 <HAL_RCC_OscConfig+0x2b0>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fd ffe4 	bl	8002f84 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc0:	f7fd ffe0 	bl	8002f84 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e17b      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd2:	4b36      	ldr	r3, [pc, #216]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d030      	beq.n	800504c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d016      	beq.n	8005020 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff2:	4b30      	ldr	r3, [pc, #192]	; (80050b4 <HAL_RCC_OscConfig+0x2b4>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff8:	f7fd ffc4 	bl	8002f84 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005000:	f7fd ffc0 	bl	8002f84 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e15b      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005012:	4b26      	ldr	r3, [pc, #152]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8005014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCC_OscConfig+0x200>
 800501e:	e015      	b.n	800504c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005020:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <HAL_RCC_OscConfig+0x2b4>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005026:	f7fd ffad 	bl	8002f84 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800502e:	f7fd ffa9 	bl	8002f84 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e144      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8005042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f0      	bne.n	800502e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80a0 	beq.w	800519a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800505e:	4b13      	ldr	r3, [pc, #76]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10f      	bne.n	800508a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	4a0e      	ldr	r2, [pc, #56]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 8005074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005078:	6413      	str	r3, [r2, #64]	; 0x40
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <HAL_RCC_OscConfig+0x2ac>)
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508a:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <HAL_RCC_OscConfig+0x2b8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005092:	2b00      	cmp	r3, #0
 8005094:	d121      	bne.n	80050da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005096:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <HAL_RCC_OscConfig+0x2b8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a07      	ldr	r2, [pc, #28]	; (80050b8 <HAL_RCC_OscConfig+0x2b8>)
 800509c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a2:	f7fd ff6f 	bl	8002f84 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a8:	e011      	b.n	80050ce <HAL_RCC_OscConfig+0x2ce>
 80050aa:	bf00      	nop
 80050ac:	40023800 	.word	0x40023800
 80050b0:	42470000 	.word	0x42470000
 80050b4:	42470e80 	.word	0x42470e80
 80050b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050bc:	f7fd ff62 	bl	8002f84 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e0fd      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ce:	4b81      	ldr	r3, [pc, #516]	; (80052d4 <HAL_RCC_OscConfig+0x4d4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d106      	bne.n	80050f0 <HAL_RCC_OscConfig+0x2f0>
 80050e2:	4b7d      	ldr	r3, [pc, #500]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	4a7c      	ldr	r2, [pc, #496]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	6713      	str	r3, [r2, #112]	; 0x70
 80050ee:	e01c      	b.n	800512a <HAL_RCC_OscConfig+0x32a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	d10c      	bne.n	8005112 <HAL_RCC_OscConfig+0x312>
 80050f8:	4b77      	ldr	r3, [pc, #476]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 80050fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fc:	4a76      	ldr	r2, [pc, #472]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 80050fe:	f043 0304 	orr.w	r3, r3, #4
 8005102:	6713      	str	r3, [r2, #112]	; 0x70
 8005104:	4b74      	ldr	r3, [pc, #464]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005108:	4a73      	ldr	r2, [pc, #460]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	6713      	str	r3, [r2, #112]	; 0x70
 8005110:	e00b      	b.n	800512a <HAL_RCC_OscConfig+0x32a>
 8005112:	4b71      	ldr	r3, [pc, #452]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a70      	ldr	r2, [pc, #448]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 8005118:	f023 0301 	bic.w	r3, r3, #1
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	4b6e      	ldr	r3, [pc, #440]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	4a6d      	ldr	r2, [pc, #436]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 8005124:	f023 0304 	bic.w	r3, r3, #4
 8005128:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d015      	beq.n	800515e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005132:	f7fd ff27 	bl	8002f84 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005138:	e00a      	b.n	8005150 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f7fd ff23 	bl	8002f84 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f241 3288 	movw	r2, #5000	; 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e0bc      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005150:	4b61      	ldr	r3, [pc, #388]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ee      	beq.n	800513a <HAL_RCC_OscConfig+0x33a>
 800515c:	e014      	b.n	8005188 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515e:	f7fd ff11 	bl	8002f84 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fd ff0d 	bl	8002f84 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e0a6      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517c:	4b56      	ldr	r3, [pc, #344]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1ee      	bne.n	8005166 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005188:	7dfb      	ldrb	r3, [r7, #23]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d105      	bne.n	800519a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800518e:	4b52      	ldr	r3, [pc, #328]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	4a51      	ldr	r2, [pc, #324]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 8005194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005198:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8092 	beq.w	80052c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051a4:	4b4c      	ldr	r3, [pc, #304]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 030c 	and.w	r3, r3, #12
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d05c      	beq.n	800526a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d141      	bne.n	800523c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b8:	4b48      	ldr	r3, [pc, #288]	; (80052dc <HAL_RCC_OscConfig+0x4dc>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051be:	f7fd fee1 	bl	8002f84 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c6:	f7fd fedd 	bl	8002f84 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e078      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d8:	4b3f      	ldr	r3, [pc, #252]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1f0      	bne.n	80051c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	019b      	lsls	r3, r3, #6
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	3b01      	subs	r3, #1
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	061b      	lsls	r3, r3, #24
 8005208:	4933      	ldr	r1, [pc, #204]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 800520a:	4313      	orrs	r3, r2
 800520c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800520e:	4b33      	ldr	r3, [pc, #204]	; (80052dc <HAL_RCC_OscConfig+0x4dc>)
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7fd feb6 	bl	8002f84 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521c:	f7fd feb2 	bl	8002f84 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e04d      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522e:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0x41c>
 800523a:	e045      	b.n	80052c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523c:	4b27      	ldr	r3, [pc, #156]	; (80052dc <HAL_RCC_OscConfig+0x4dc>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005242:	f7fd fe9f 	bl	8002f84 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800524a:	f7fd fe9b 	bl	8002f84 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e036      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525c:	4b1e      	ldr	r3, [pc, #120]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f0      	bne.n	800524a <HAL_RCC_OscConfig+0x44a>
 8005268:	e02e      	b.n	80052c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e029      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005276:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <HAL_RCC_OscConfig+0x4d8>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	429a      	cmp	r2, r3
 8005288:	d11c      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005294:	429a      	cmp	r2, r3
 8005296:	d115      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800529e:	4013      	ands	r3, r2
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d10d      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d106      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d001      	beq.n	80052c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40007000 	.word	0x40007000
 80052d8:	40023800 	.word	0x40023800
 80052dc:	42470060 	.word	0x42470060

080052e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0cc      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052f4:	4b68      	ldr	r3, [pc, #416]	; (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d90c      	bls.n	800531c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005302:	4b65      	ldr	r3, [pc, #404]	; (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800530a:	4b63      	ldr	r3, [pc, #396]	; (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d001      	beq.n	800531c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e0b8      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d020      	beq.n	800536a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005334:	4b59      	ldr	r3, [pc, #356]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	4a58      	ldr	r2, [pc, #352]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800533e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800534c:	4b53      	ldr	r3, [pc, #332]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4a52      	ldr	r2, [pc, #328]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005358:	4b50      	ldr	r3, [pc, #320]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	494d      	ldr	r1, [pc, #308]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	4313      	orrs	r3, r2
 8005368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d044      	beq.n	8005400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d107      	bne.n	800538e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537e:	4b47      	ldr	r3, [pc, #284]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d119      	bne.n	80053be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e07f      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d003      	beq.n	800539e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800539a:	2b03      	cmp	r3, #3
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539e:	4b3f      	ldr	r3, [pc, #252]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e06f      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ae:	4b3b      	ldr	r3, [pc, #236]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e067      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053be:	4b37      	ldr	r3, [pc, #220]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f023 0203 	bic.w	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4934      	ldr	r1, [pc, #208]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053d0:	f7fd fdd8 	bl	8002f84 <HAL_GetTick>
 80053d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d6:	e00a      	b.n	80053ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d8:	f7fd fdd4 	bl	8002f84 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e04f      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	4b2b      	ldr	r3, [pc, #172]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 020c 	and.w	r2, r3, #12
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d1eb      	bne.n	80053d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005400:	4b25      	ldr	r3, [pc, #148]	; (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d20c      	bcs.n	8005428 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540e:	4b22      	ldr	r3, [pc, #136]	; (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005416:	4b20      	ldr	r3, [pc, #128]	; (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e032      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005434:	4b19      	ldr	r3, [pc, #100]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	4916      	ldr	r1, [pc, #88]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	4313      	orrs	r3, r2
 8005444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005452:	4b12      	ldr	r3, [pc, #72]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	490e      	ldr	r1, [pc, #56]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005466:	f000 f82d 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 800546a:	4602      	mov	r2, r0
 800546c:	4b0b      	ldr	r3, [pc, #44]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	091b      	lsrs	r3, r3, #4
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	490a      	ldr	r1, [pc, #40]	; (80054a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005478:	5ccb      	ldrb	r3, [r1, r3]
 800547a:	fa22 f303 	lsr.w	r3, r2, r3
 800547e:	4a09      	ldr	r2, [pc, #36]	; (80054a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005482:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7fd fd38 	bl	8002efc <HAL_InitTick>

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40023c00 	.word	0x40023c00
 800549c:	40023800 	.word	0x40023800
 80054a0:	080085f0 	.word	0x080085f0
 80054a4:	20000008 	.word	0x20000008
 80054a8:	2000000c 	.word	0x2000000c

080054ac <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80054b0:	4b03      	ldr	r3, [pc, #12]	; (80054c0 <HAL_RCC_EnableCSS+0x14>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
}
 80054b6:	bf00      	nop
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	4247004c 	.word	0x4247004c

080054c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	2300      	movs	r3, #0
 80054d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054dc:	4b67      	ldr	r3, [pc, #412]	; (800567c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 030c 	and.w	r3, r3, #12
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d00d      	beq.n	8005504 <HAL_RCC_GetSysClockFreq+0x40>
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	f200 80bd 	bhi.w	8005668 <HAL_RCC_GetSysClockFreq+0x1a4>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0x34>
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d003      	beq.n	80054fe <HAL_RCC_GetSysClockFreq+0x3a>
 80054f6:	e0b7      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054f8:	4b61      	ldr	r3, [pc, #388]	; (8005680 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80054fa:	60bb      	str	r3, [r7, #8]
       break;
 80054fc:	e0b7      	b.n	800566e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054fe:	4b61      	ldr	r3, [pc, #388]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005500:	60bb      	str	r3, [r7, #8]
      break;
 8005502:	e0b4      	b.n	800566e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005504:	4b5d      	ldr	r3, [pc, #372]	; (800567c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800550c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800550e:	4b5b      	ldr	r3, [pc, #364]	; (800567c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d04d      	beq.n	80055b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551a:	4b58      	ldr	r3, [pc, #352]	; (800567c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	099b      	lsrs	r3, r3, #6
 8005520:	461a      	mov	r2, r3
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	f240 10ff 	movw	r0, #511	; 0x1ff
 800552a:	f04f 0100 	mov.w	r1, #0
 800552e:	ea02 0800 	and.w	r8, r2, r0
 8005532:	ea03 0901 	and.w	r9, r3, r1
 8005536:	4640      	mov	r0, r8
 8005538:	4649      	mov	r1, r9
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	014b      	lsls	r3, r1, #5
 8005544:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005548:	0142      	lsls	r2, r0, #5
 800554a:	4610      	mov	r0, r2
 800554c:	4619      	mov	r1, r3
 800554e:	ebb0 0008 	subs.w	r0, r0, r8
 8005552:	eb61 0109 	sbc.w	r1, r1, r9
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	018b      	lsls	r3, r1, #6
 8005560:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005564:	0182      	lsls	r2, r0, #6
 8005566:	1a12      	subs	r2, r2, r0
 8005568:	eb63 0301 	sbc.w	r3, r3, r1
 800556c:	f04f 0000 	mov.w	r0, #0
 8005570:	f04f 0100 	mov.w	r1, #0
 8005574:	00d9      	lsls	r1, r3, #3
 8005576:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800557a:	00d0      	lsls	r0, r2, #3
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	eb12 0208 	adds.w	r2, r2, r8
 8005584:	eb43 0309 	adc.w	r3, r3, r9
 8005588:	f04f 0000 	mov.w	r0, #0
 800558c:	f04f 0100 	mov.w	r1, #0
 8005590:	0259      	lsls	r1, r3, #9
 8005592:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005596:	0250      	lsls	r0, r2, #9
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4610      	mov	r0, r2
 800559e:	4619      	mov	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	f7fb faf2 	bl	8000b90 <__aeabi_uldivmod>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4613      	mov	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e04a      	b.n	800564c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b6:	4b31      	ldr	r3, [pc, #196]	; (800567c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	099b      	lsrs	r3, r3, #6
 80055bc:	461a      	mov	r2, r3
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	ea02 0400 	and.w	r4, r2, r0
 80055ce:	ea03 0501 	and.w	r5, r3, r1
 80055d2:	4620      	mov	r0, r4
 80055d4:	4629      	mov	r1, r5
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	014b      	lsls	r3, r1, #5
 80055e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055e4:	0142      	lsls	r2, r0, #5
 80055e6:	4610      	mov	r0, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	1b00      	subs	r0, r0, r4
 80055ec:	eb61 0105 	sbc.w	r1, r1, r5
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	018b      	lsls	r3, r1, #6
 80055fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055fe:	0182      	lsls	r2, r0, #6
 8005600:	1a12      	subs	r2, r2, r0
 8005602:	eb63 0301 	sbc.w	r3, r3, r1
 8005606:	f04f 0000 	mov.w	r0, #0
 800560a:	f04f 0100 	mov.w	r1, #0
 800560e:	00d9      	lsls	r1, r3, #3
 8005610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005614:	00d0      	lsls	r0, r2, #3
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	1912      	adds	r2, r2, r4
 800561c:	eb45 0303 	adc.w	r3, r5, r3
 8005620:	f04f 0000 	mov.w	r0, #0
 8005624:	f04f 0100 	mov.w	r1, #0
 8005628:	0299      	lsls	r1, r3, #10
 800562a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800562e:	0290      	lsls	r0, r2, #10
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4610      	mov	r0, r2
 8005636:	4619      	mov	r1, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	461a      	mov	r2, r3
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	f7fb faa6 	bl	8000b90 <__aeabi_uldivmod>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4613      	mov	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	3301      	adds	r3, #1
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	60bb      	str	r3, [r7, #8]
      break;
 8005666:	e002      	b.n	800566e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005668:	4b05      	ldr	r3, [pc, #20]	; (8005680 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800566a:	60bb      	str	r3, [r7, #8]
      break;
 800566c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800566e:	68bb      	ldr	r3, [r7, #8]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800567a:	bf00      	nop
 800567c:	40023800 	.word	0x40023800
 8005680:	00f42400 	.word	0x00f42400
 8005684:	007a1200 	.word	0x007a1200

08005688 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005694:	2b80      	cmp	r3, #128	; 0x80
 8005696:	d104      	bne.n	80056a2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005698:	f000 f80a 	bl	80056b0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <HAL_RCC_NMI_IRQHandler+0x24>)
 800569e:	2280      	movs	r2, #128	; 0x80
 80056a0:	701a      	strb	r2, [r3, #0]
  }
}
 80056a2:	bf00      	nop
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40023800 	.word	0x40023800
 80056ac:	4002380e 	.word	0x4002380e

080056b0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e01d      	b.n	800570c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7fd fa87 	bl	8002bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3304      	adds	r3, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4610      	mov	r0, r2
 80056fe:	f000 fbe1 	bl	8005ec4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b06      	cmp	r3, #6
 800573c:	d007      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0201 	orr.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e01d      	b.n	80057aa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f815 	bl	80057b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f000 fb92 	bl	8005ec4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b0c      	cmp	r3, #12
 80057d6:	d841      	bhi.n	800585c <HAL_TIM_IC_Start_IT+0x94>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <HAL_TIM_IC_Start_IT+0x18>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	08005815 	.word	0x08005815
 80057e4:	0800585d 	.word	0x0800585d
 80057e8:	0800585d 	.word	0x0800585d
 80057ec:	0800585d 	.word	0x0800585d
 80057f0:	08005827 	.word	0x08005827
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	0800585d 	.word	0x0800585d
 80057fc:	0800585d 	.word	0x0800585d
 8005800:	08005839 	.word	0x08005839
 8005804:	0800585d 	.word	0x0800585d
 8005808:	0800585d 	.word	0x0800585d
 800580c:	0800585d 	.word	0x0800585d
 8005810:	0800584b 	.word	0x0800584b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0202 	orr.w	r2, r2, #2
 8005822:	60da      	str	r2, [r3, #12]
      break;
 8005824:	e01b      	b.n	800585e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0204 	orr.w	r2, r2, #4
 8005834:	60da      	str	r2, [r3, #12]
      break;
 8005836:	e012      	b.n	800585e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0208 	orr.w	r2, r2, #8
 8005846:	60da      	str	r2, [r3, #12]
      break;
 8005848:	e009      	b.n	800585e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0210 	orr.w	r2, r2, #16
 8005858:	60da      	str	r2, [r3, #12]
      break;
 800585a:	e000      	b.n	800585e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800585c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2201      	movs	r2, #1
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fe1e 	bl	80064a8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b06      	cmp	r3, #6
 800587c:	d007      	beq.n	800588e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0201 	orr.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d122      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d11b      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0202 	mvn.w	r2, #2
 80058c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fb fbbe 	bl	800105c <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fad0 	bl	8005e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fad7 	bl	8005e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d122      	bne.n	8005948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b04      	cmp	r3, #4
 800590e:	d11b      	bne.n	8005948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0204 	mvn.w	r2, #4
 8005918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fb fb94 	bl	800105c <HAL_TIM_IC_CaptureCallback>
 8005934:	e005      	b.n	8005942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 faa6 	bl	8005e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 faad 	bl	8005e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b08      	cmp	r3, #8
 8005954:	d122      	bne.n	800599c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b08      	cmp	r3, #8
 8005962:	d11b      	bne.n	800599c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0208 	mvn.w	r2, #8
 800596c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2204      	movs	r2, #4
 8005972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fb fb6a 	bl	800105c <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa7c 	bl	8005e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fa83 	bl	8005e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b10      	cmp	r3, #16
 80059a8:	d122      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d11b      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0210 	mvn.w	r2, #16
 80059c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2208      	movs	r2, #8
 80059c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fb fb40 	bl	800105c <HAL_TIM_IC_CaptureCallback>
 80059dc:	e005      	b.n	80059ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fa52 	bl	8005e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa59 	bl	8005e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d10e      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d107      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0201 	mvn.w	r2, #1
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fa2c 	bl	8005e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	2b80      	cmp	r3, #128	; 0x80
 8005a28:	d10e      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a34:	2b80      	cmp	r3, #128	; 0x80
 8005a36:	d107      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fddc 	bl	8006600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d10e      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	d107      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa1e 	bl	8005eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d10e      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d107      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0220 	mvn.w	r2, #32
 8005a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fda6 	bl	80065ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e08a      	b.n	8005bd8 <HAL_TIM_IC_ConfigChannel+0x130>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2202      	movs	r2, #2
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d11b      	bne.n	8005b10 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	6819      	ldr	r1, [r3, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f000 fb1a 	bl	8006120 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 020c 	bic.w	r2, r2, #12
 8005afa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6999      	ldr	r1, [r3, #24]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	619a      	str	r2, [r3, #24]
 8005b0e:	e05a      	b.n	8005bc6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d11c      	bne.n	8005b50 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6819      	ldr	r1, [r3, #0]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f000 fb9e 	bl	8006266 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6999      	ldr	r1, [r3, #24]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	021a      	lsls	r2, r3, #8
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	619a      	str	r2, [r3, #24]
 8005b4e:	e03a      	b.n	8005bc6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d11b      	bne.n	8005b8e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6819      	ldr	r1, [r3, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f000 fbeb 	bl	8006340 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 020c 	bic.w	r2, r2, #12
 8005b78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69d9      	ldr	r1, [r3, #28]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	61da      	str	r2, [r3, #28]
 8005b8c:	e01b      	b.n	8005bc6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f000 fc0b 	bl	80063b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bb0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69d9      	ldr	r1, [r3, #28]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	021a      	lsls	r2, r3, #8
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_ConfigClockSource+0x18>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e0b3      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x180>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c30:	d03e      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0xd0>
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c36:	f200 8087 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x168>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	f000 8085 	beq.w	8005d4c <HAL_TIM_ConfigClockSource+0x16c>
 8005c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c46:	d87f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x168>
 8005c48:	2b70      	cmp	r3, #112	; 0x70
 8005c4a:	d01a      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0xa2>
 8005c4c:	2b70      	cmp	r3, #112	; 0x70
 8005c4e:	d87b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x168>
 8005c50:	2b60      	cmp	r3, #96	; 0x60
 8005c52:	d050      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x116>
 8005c54:	2b60      	cmp	r3, #96	; 0x60
 8005c56:	d877      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x168>
 8005c58:	2b50      	cmp	r3, #80	; 0x50
 8005c5a:	d03c      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0xf6>
 8005c5c:	2b50      	cmp	r3, #80	; 0x50
 8005c5e:	d873      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x168>
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d058      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x136>
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d86f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x168>
 8005c68:	2b30      	cmp	r3, #48	; 0x30
 8005c6a:	d064      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x156>
 8005c6c:	2b30      	cmp	r3, #48	; 0x30
 8005c6e:	d86b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x168>
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d060      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x156>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d867      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x168>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d05c      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x156>
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d05a      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c80:	e062      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6899      	ldr	r1, [r3, #8]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f000 fbe9 	bl	8006468 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ca4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	609a      	str	r2, [r3, #8]
      break;
 8005cae:	e04e      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	6899      	ldr	r1, [r3, #8]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f000 fbd2 	bl	8006468 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cd2:	609a      	str	r2, [r3, #8]
      break;
 8005cd4:	e03b      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6859      	ldr	r1, [r3, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f000 fa90 	bl	8006208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2150      	movs	r1, #80	; 0x50
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fb9f 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005cf4:	e02b      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 faec 	bl	80062e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2160      	movs	r1, #96	; 0x60
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fb8f 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005d14:	e01b      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 fa70 	bl	8006208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2140      	movs	r1, #64	; 0x40
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fb7f 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005d34:	e00b      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f000 fb76 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005d46:	e002      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d48:	bf00      	nop
 8005d4a:	e000      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e031      	b.n	8005de4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f936 	bl	8006004 <TIM_SlaveTimer_SetConfig>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e018      	b.n	8005de4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dd0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b0c      	cmp	r3, #12
 8005dfe:	d831      	bhi.n	8005e64 <HAL_TIM_ReadCapturedValue+0x78>
 8005e00:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e3d 	.word	0x08005e3d
 8005e0c:	08005e65 	.word	0x08005e65
 8005e10:	08005e65 	.word	0x08005e65
 8005e14:	08005e65 	.word	0x08005e65
 8005e18:	08005e47 	.word	0x08005e47
 8005e1c:	08005e65 	.word	0x08005e65
 8005e20:	08005e65 	.word	0x08005e65
 8005e24:	08005e65 	.word	0x08005e65
 8005e28:	08005e51 	.word	0x08005e51
 8005e2c:	08005e65 	.word	0x08005e65
 8005e30:	08005e65 	.word	0x08005e65
 8005e34:	08005e65 	.word	0x08005e65
 8005e38:	08005e5b 	.word	0x08005e5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e42:	60fb      	str	r3, [r7, #12]

      break;
 8005e44:	e00f      	b.n	8005e66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	60fb      	str	r3, [r7, #12]

      break;
 8005e4e:	e00a      	b.n	8005e66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	60fb      	str	r3, [r7, #12]

      break;
 8005e58:	e005      	b.n	8005e66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	60fb      	str	r3, [r7, #12]

      break;
 8005e62:	e000      	b.n	8005e66 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005e64:	bf00      	nop
  }

  return tmpreg;
 8005e66:	68fb      	ldr	r3, [r7, #12]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a40      	ldr	r2, [pc, #256]	; (8005fd8 <TIM_Base_SetConfig+0x114>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d013      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee2:	d00f      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a3d      	ldr	r2, [pc, #244]	; (8005fdc <TIM_Base_SetConfig+0x118>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00b      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a3c      	ldr	r2, [pc, #240]	; (8005fe0 <TIM_Base_SetConfig+0x11c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d007      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a3b      	ldr	r2, [pc, #236]	; (8005fe4 <TIM_Base_SetConfig+0x120>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d003      	beq.n	8005f04 <TIM_Base_SetConfig+0x40>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a3a      	ldr	r2, [pc, #232]	; (8005fe8 <TIM_Base_SetConfig+0x124>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d108      	bne.n	8005f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2f      	ldr	r2, [pc, #188]	; (8005fd8 <TIM_Base_SetConfig+0x114>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d02b      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f24:	d027      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a2c      	ldr	r2, [pc, #176]	; (8005fdc <TIM_Base_SetConfig+0x118>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d023      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2b      	ldr	r2, [pc, #172]	; (8005fe0 <TIM_Base_SetConfig+0x11c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01f      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a2a      	ldr	r2, [pc, #168]	; (8005fe4 <TIM_Base_SetConfig+0x120>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01b      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a29      	ldr	r2, [pc, #164]	; (8005fe8 <TIM_Base_SetConfig+0x124>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d017      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a28      	ldr	r2, [pc, #160]	; (8005fec <TIM_Base_SetConfig+0x128>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <TIM_Base_SetConfig+0x12c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00f      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a26      	ldr	r2, [pc, #152]	; (8005ff4 <TIM_Base_SetConfig+0x130>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00b      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a25      	ldr	r2, [pc, #148]	; (8005ff8 <TIM_Base_SetConfig+0x134>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d007      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a24      	ldr	r2, [pc, #144]	; (8005ffc <TIM_Base_SetConfig+0x138>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d003      	beq.n	8005f76 <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a23      	ldr	r2, [pc, #140]	; (8006000 <TIM_Base_SetConfig+0x13c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d108      	bne.n	8005f88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <TIM_Base_SetConfig+0x114>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d003      	beq.n	8005fbc <TIM_Base_SetConfig+0xf8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a0c      	ldr	r2, [pc, #48]	; (8005fe8 <TIM_Base_SetConfig+0x124>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d103      	bne.n	8005fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	615a      	str	r2, [r3, #20]
}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40010000 	.word	0x40010000
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	40000c00 	.word	0x40000c00
 8005fe8:	40010400 	.word	0x40010400
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40014800 	.word	0x40014800
 8005ff8:	40001800 	.word	0x40001800
 8005ffc:	40001c00 	.word	0x40001c00
 8006000:	40002000 	.word	0x40002000

08006004 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0307 	bic.w	r3, r3, #7
 800602e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b70      	cmp	r3, #112	; 0x70
 8006048:	d01a      	beq.n	8006080 <TIM_SlaveTimer_SetConfig+0x7c>
 800604a:	2b70      	cmp	r3, #112	; 0x70
 800604c:	d860      	bhi.n	8006110 <TIM_SlaveTimer_SetConfig+0x10c>
 800604e:	2b60      	cmp	r3, #96	; 0x60
 8006050:	d054      	beq.n	80060fc <TIM_SlaveTimer_SetConfig+0xf8>
 8006052:	2b60      	cmp	r3, #96	; 0x60
 8006054:	d85c      	bhi.n	8006110 <TIM_SlaveTimer_SetConfig+0x10c>
 8006056:	2b50      	cmp	r3, #80	; 0x50
 8006058:	d046      	beq.n	80060e8 <TIM_SlaveTimer_SetConfig+0xe4>
 800605a:	2b50      	cmp	r3, #80	; 0x50
 800605c:	d858      	bhi.n	8006110 <TIM_SlaveTimer_SetConfig+0x10c>
 800605e:	2b40      	cmp	r3, #64	; 0x40
 8006060:	d019      	beq.n	8006096 <TIM_SlaveTimer_SetConfig+0x92>
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d854      	bhi.n	8006110 <TIM_SlaveTimer_SetConfig+0x10c>
 8006066:	2b30      	cmp	r3, #48	; 0x30
 8006068:	d054      	beq.n	8006114 <TIM_SlaveTimer_SetConfig+0x110>
 800606a:	2b30      	cmp	r3, #48	; 0x30
 800606c:	d850      	bhi.n	8006110 <TIM_SlaveTimer_SetConfig+0x10c>
 800606e:	2b20      	cmp	r3, #32
 8006070:	d050      	beq.n	8006114 <TIM_SlaveTimer_SetConfig+0x110>
 8006072:	2b20      	cmp	r3, #32
 8006074:	d84c      	bhi.n	8006110 <TIM_SlaveTimer_SetConfig+0x10c>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d04c      	beq.n	8006114 <TIM_SlaveTimer_SetConfig+0x110>
 800607a:	2b10      	cmp	r3, #16
 800607c:	d04a      	beq.n	8006114 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800607e:	e047      	b.n	8006110 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	68d9      	ldr	r1, [r3, #12]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f000 f9ea 	bl	8006468 <TIM_ETR_SetConfig>
      break;
 8006094:	e03f      	b.n	8006116 <TIM_SlaveTimer_SetConfig+0x112>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b05      	cmp	r3, #5
 800609c:	d101      	bne.n	80060a2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e03a      	b.n	8006118 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6a1a      	ldr	r2, [r3, #32]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060c8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	621a      	str	r2, [r3, #32]
      break;
 80060e6:	e016      	b.n	8006116 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	6899      	ldr	r1, [r3, #8]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	461a      	mov	r2, r3
 80060f6:	f000 f887 	bl	8006208 <TIM_TI1_ConfigInputStage>
      break;
 80060fa:	e00c      	b.n	8006116 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	6899      	ldr	r1, [r3, #8]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	461a      	mov	r2, r3
 800610a:	f000 f8e9 	bl	80062e0 <TIM_TI2_ConfigInputStage>
      break;
 800610e:	e002      	b.n	8006116 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8006110:	bf00      	nop
 8006112:	e000      	b.n	8006116 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8006114:	bf00      	nop
  }
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f023 0201 	bic.w	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4a28      	ldr	r2, [pc, #160]	; (80061ec <TIM_TI1_SetConfig+0xcc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d01b      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006154:	d017      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4a25      	ldr	r2, [pc, #148]	; (80061f0 <TIM_TI1_SetConfig+0xd0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a24      	ldr	r2, [pc, #144]	; (80061f4 <TIM_TI1_SetConfig+0xd4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00f      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a23      	ldr	r2, [pc, #140]	; (80061f8 <TIM_TI1_SetConfig+0xd8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00b      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a22      	ldr	r2, [pc, #136]	; (80061fc <TIM_TI1_SetConfig+0xdc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d007      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a21      	ldr	r2, [pc, #132]	; (8006200 <TIM_TI1_SetConfig+0xe0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_TI1_SetConfig+0x66>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a20      	ldr	r2, [pc, #128]	; (8006204 <TIM_TI1_SetConfig+0xe4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d101      	bne.n	800618a <TIM_TI1_SetConfig+0x6a>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <TIM_TI1_SetConfig+0x6c>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e003      	b.n	80061aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f043 0301 	orr.w	r3, r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f023 030a 	bic.w	r3, r3, #10
 80061c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f003 030a 	and.w	r3, r3, #10
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800
 80061f8:	40000c00 	.word	0x40000c00
 80061fc:	40010400 	.word	0x40010400
 8006200:	40014000 	.word	0x40014000
 8006204:	40001800 	.word	0x40001800

08006208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	f023 0201 	bic.w	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f023 030a 	bic.w	r3, r3, #10
 8006244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006266:	b480      	push	{r7}
 8006268:	b087      	sub	sp, #28
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	607a      	str	r2, [r7, #4]
 8006272:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	f023 0210 	bic.w	r2, r3, #16
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006292:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	031b      	lsls	r3, r3, #12
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	621a      	str	r2, [r3, #32]
}
 80062d4:	bf00      	nop
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f023 0210 	bic.w	r2, r3, #16
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800630a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	031b      	lsls	r3, r3, #12
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800631c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	621a      	str	r2, [r3, #32]
}
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f023 0303 	bic.w	r3, r3, #3
 800636c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800637c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	b2db      	uxtb	r3, r3
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006390:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	621a      	str	r2, [r3, #32]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	031b      	lsls	r3, r3, #12
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800640a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	031b      	lsls	r3, r3, #12
 8006410:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	f043 0307 	orr.w	r3, r3, #7
 8006454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	609a      	str	r2, [r3, #8]
}
 800645c:	bf00      	nop
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	021a      	lsls	r2, r3, #8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	431a      	orrs	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4313      	orrs	r3, r2
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	609a      	str	r2, [r3, #8]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f003 031f 	and.w	r3, r3, #31
 80064ba:	2201      	movs	r2, #1
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1a      	ldr	r2, [r3, #32]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	43db      	mvns	r3, r3
 80064ca:	401a      	ands	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1a      	ldr	r2, [r3, #32]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	fa01 f303 	lsl.w	r3, r1, r3
 80064e0:	431a      	orrs	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
	...

080064f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006508:	2302      	movs	r3, #2
 800650a:	e05a      	b.n	80065c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a21      	ldr	r2, [pc, #132]	; (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d022      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d01d      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d018      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1b      	ldr	r2, [pc, #108]	; (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1a      	ldr	r2, [pc, #104]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00e      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a18      	ldr	r2, [pc, #96]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d009      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a17      	ldr	r2, [pc, #92]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d10c      	bne.n	80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800659c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40000800 	.word	0x40000800
 80065dc:	40000c00 	.word	0x40000c00
 80065e0:	40010400 	.word	0x40010400
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40001800 	.word	0x40001800

080065ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <__errno>:
 8006614:	4b01      	ldr	r3, [pc, #4]	; (800661c <__errno+0x8>)
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	20000014 	.word	0x20000014

08006620 <__libc_init_array>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	4d0d      	ldr	r5, [pc, #52]	; (8006658 <__libc_init_array+0x38>)
 8006624:	4c0d      	ldr	r4, [pc, #52]	; (800665c <__libc_init_array+0x3c>)
 8006626:	1b64      	subs	r4, r4, r5
 8006628:	10a4      	asrs	r4, r4, #2
 800662a:	2600      	movs	r6, #0
 800662c:	42a6      	cmp	r6, r4
 800662e:	d109      	bne.n	8006644 <__libc_init_array+0x24>
 8006630:	4d0b      	ldr	r5, [pc, #44]	; (8006660 <__libc_init_array+0x40>)
 8006632:	4c0c      	ldr	r4, [pc, #48]	; (8006664 <__libc_init_array+0x44>)
 8006634:	f001 ffce 	bl	80085d4 <_init>
 8006638:	1b64      	subs	r4, r4, r5
 800663a:	10a4      	asrs	r4, r4, #2
 800663c:	2600      	movs	r6, #0
 800663e:	42a6      	cmp	r6, r4
 8006640:	d105      	bne.n	800664e <__libc_init_array+0x2e>
 8006642:	bd70      	pop	{r4, r5, r6, pc}
 8006644:	f855 3b04 	ldr.w	r3, [r5], #4
 8006648:	4798      	blx	r3
 800664a:	3601      	adds	r6, #1
 800664c:	e7ee      	b.n	800662c <__libc_init_array+0xc>
 800664e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006652:	4798      	blx	r3
 8006654:	3601      	adds	r6, #1
 8006656:	e7f2      	b.n	800663e <__libc_init_array+0x1e>
 8006658:	08008830 	.word	0x08008830
 800665c:	08008830 	.word	0x08008830
 8006660:	08008830 	.word	0x08008830
 8006664:	08008834 	.word	0x08008834

08006668 <memset>:
 8006668:	4402      	add	r2, r0
 800666a:	4603      	mov	r3, r0
 800666c:	4293      	cmp	r3, r2
 800666e:	d100      	bne.n	8006672 <memset+0xa>
 8006670:	4770      	bx	lr
 8006672:	f803 1b01 	strb.w	r1, [r3], #1
 8006676:	e7f9      	b.n	800666c <memset+0x4>

08006678 <cos>:
 8006678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800667a:	ec53 2b10 	vmov	r2, r3, d0
 800667e:	4824      	ldr	r0, [pc, #144]	; (8006710 <cos+0x98>)
 8006680:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006684:	4281      	cmp	r1, r0
 8006686:	dc06      	bgt.n	8006696 <cos+0x1e>
 8006688:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8006708 <cos+0x90>
 800668c:	f001 f92c 	bl	80078e8 <__kernel_cos>
 8006690:	ec51 0b10 	vmov	r0, r1, d0
 8006694:	e007      	b.n	80066a6 <cos+0x2e>
 8006696:	481f      	ldr	r0, [pc, #124]	; (8006714 <cos+0x9c>)
 8006698:	4281      	cmp	r1, r0
 800669a:	dd09      	ble.n	80066b0 <cos+0x38>
 800669c:	ee10 0a10 	vmov	r0, s0
 80066a0:	4619      	mov	r1, r3
 80066a2:	f7f9 fd95 	bl	80001d0 <__aeabi_dsub>
 80066a6:	ec41 0b10 	vmov	d0, r0, r1
 80066aa:	b005      	add	sp, #20
 80066ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80066b0:	4668      	mov	r0, sp
 80066b2:	f000 fe59 	bl	8007368 <__ieee754_rem_pio2>
 80066b6:	f000 0003 	and.w	r0, r0, #3
 80066ba:	2801      	cmp	r0, #1
 80066bc:	d007      	beq.n	80066ce <cos+0x56>
 80066be:	2802      	cmp	r0, #2
 80066c0:	d012      	beq.n	80066e8 <cos+0x70>
 80066c2:	b9c0      	cbnz	r0, 80066f6 <cos+0x7e>
 80066c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066c8:	ed9d 0b00 	vldr	d0, [sp]
 80066cc:	e7de      	b.n	800668c <cos+0x14>
 80066ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066d2:	ed9d 0b00 	vldr	d0, [sp]
 80066d6:	f001 fd0f 	bl	80080f8 <__kernel_sin>
 80066da:	ec53 2b10 	vmov	r2, r3, d0
 80066de:	ee10 0a10 	vmov	r0, s0
 80066e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80066e6:	e7de      	b.n	80066a6 <cos+0x2e>
 80066e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066ec:	ed9d 0b00 	vldr	d0, [sp]
 80066f0:	f001 f8fa 	bl	80078e8 <__kernel_cos>
 80066f4:	e7f1      	b.n	80066da <cos+0x62>
 80066f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066fa:	ed9d 0b00 	vldr	d0, [sp]
 80066fe:	2001      	movs	r0, #1
 8006700:	f001 fcfa 	bl	80080f8 <__kernel_sin>
 8006704:	e7c4      	b.n	8006690 <cos+0x18>
 8006706:	bf00      	nop
	...
 8006710:	3fe921fb 	.word	0x3fe921fb
 8006714:	7fefffff 	.word	0x7fefffff

08006718 <sin>:
 8006718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800671a:	ec53 2b10 	vmov	r2, r3, d0
 800671e:	4826      	ldr	r0, [pc, #152]	; (80067b8 <sin+0xa0>)
 8006720:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006724:	4281      	cmp	r1, r0
 8006726:	dc07      	bgt.n	8006738 <sin+0x20>
 8006728:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80067b0 <sin+0x98>
 800672c:	2000      	movs	r0, #0
 800672e:	f001 fce3 	bl	80080f8 <__kernel_sin>
 8006732:	ec51 0b10 	vmov	r0, r1, d0
 8006736:	e007      	b.n	8006748 <sin+0x30>
 8006738:	4820      	ldr	r0, [pc, #128]	; (80067bc <sin+0xa4>)
 800673a:	4281      	cmp	r1, r0
 800673c:	dd09      	ble.n	8006752 <sin+0x3a>
 800673e:	ee10 0a10 	vmov	r0, s0
 8006742:	4619      	mov	r1, r3
 8006744:	f7f9 fd44 	bl	80001d0 <__aeabi_dsub>
 8006748:	ec41 0b10 	vmov	d0, r0, r1
 800674c:	b005      	add	sp, #20
 800674e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006752:	4668      	mov	r0, sp
 8006754:	f000 fe08 	bl	8007368 <__ieee754_rem_pio2>
 8006758:	f000 0003 	and.w	r0, r0, #3
 800675c:	2801      	cmp	r0, #1
 800675e:	d008      	beq.n	8006772 <sin+0x5a>
 8006760:	2802      	cmp	r0, #2
 8006762:	d00d      	beq.n	8006780 <sin+0x68>
 8006764:	b9d0      	cbnz	r0, 800679c <sin+0x84>
 8006766:	ed9d 1b02 	vldr	d1, [sp, #8]
 800676a:	ed9d 0b00 	vldr	d0, [sp]
 800676e:	2001      	movs	r0, #1
 8006770:	e7dd      	b.n	800672e <sin+0x16>
 8006772:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006776:	ed9d 0b00 	vldr	d0, [sp]
 800677a:	f001 f8b5 	bl	80078e8 <__kernel_cos>
 800677e:	e7d8      	b.n	8006732 <sin+0x1a>
 8006780:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006784:	ed9d 0b00 	vldr	d0, [sp]
 8006788:	2001      	movs	r0, #1
 800678a:	f001 fcb5 	bl	80080f8 <__kernel_sin>
 800678e:	ec53 2b10 	vmov	r2, r3, d0
 8006792:	ee10 0a10 	vmov	r0, s0
 8006796:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800679a:	e7d5      	b.n	8006748 <sin+0x30>
 800679c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067a0:	ed9d 0b00 	vldr	d0, [sp]
 80067a4:	f001 f8a0 	bl	80078e8 <__kernel_cos>
 80067a8:	e7f1      	b.n	800678e <sin+0x76>
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w
	...
 80067b8:	3fe921fb 	.word	0x3fe921fb
 80067bc:	7fefffff 	.word	0x7fefffff

080067c0 <pow>:
 80067c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067c4:	ec59 8b10 	vmov	r8, r9, d0
 80067c8:	ec57 6b11 	vmov	r6, r7, d1
 80067cc:	f000 f8a8 	bl	8006920 <__ieee754_pow>
 80067d0:	4b4e      	ldr	r3, [pc, #312]	; (800690c <pow+0x14c>)
 80067d2:	f993 3000 	ldrsb.w	r3, [r3]
 80067d6:	3301      	adds	r3, #1
 80067d8:	ec55 4b10 	vmov	r4, r5, d0
 80067dc:	d015      	beq.n	800680a <pow+0x4a>
 80067de:	4632      	mov	r2, r6
 80067e0:	463b      	mov	r3, r7
 80067e2:	4630      	mov	r0, r6
 80067e4:	4639      	mov	r1, r7
 80067e6:	f7fa f945 	bl	8000a74 <__aeabi_dcmpun>
 80067ea:	b970      	cbnz	r0, 800680a <pow+0x4a>
 80067ec:	4642      	mov	r2, r8
 80067ee:	464b      	mov	r3, r9
 80067f0:	4640      	mov	r0, r8
 80067f2:	4649      	mov	r1, r9
 80067f4:	f7fa f93e 	bl	8000a74 <__aeabi_dcmpun>
 80067f8:	2200      	movs	r2, #0
 80067fa:	2300      	movs	r3, #0
 80067fc:	b148      	cbz	r0, 8006812 <pow+0x52>
 80067fe:	4630      	mov	r0, r6
 8006800:	4639      	mov	r1, r7
 8006802:	f7fa f905 	bl	8000a10 <__aeabi_dcmpeq>
 8006806:	2800      	cmp	r0, #0
 8006808:	d17d      	bne.n	8006906 <pow+0x146>
 800680a:	ec45 4b10 	vmov	d0, r4, r5
 800680e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006812:	4640      	mov	r0, r8
 8006814:	4649      	mov	r1, r9
 8006816:	f7fa f8fb 	bl	8000a10 <__aeabi_dcmpeq>
 800681a:	b1e0      	cbz	r0, 8006856 <pow+0x96>
 800681c:	2200      	movs	r2, #0
 800681e:	2300      	movs	r3, #0
 8006820:	4630      	mov	r0, r6
 8006822:	4639      	mov	r1, r7
 8006824:	f7fa f8f4 	bl	8000a10 <__aeabi_dcmpeq>
 8006828:	2800      	cmp	r0, #0
 800682a:	d16c      	bne.n	8006906 <pow+0x146>
 800682c:	ec47 6b10 	vmov	d0, r6, r7
 8006830:	f001 fd29 	bl	8008286 <finite>
 8006834:	2800      	cmp	r0, #0
 8006836:	d0e8      	beq.n	800680a <pow+0x4a>
 8006838:	2200      	movs	r2, #0
 800683a:	2300      	movs	r3, #0
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7fa f8f0 	bl	8000a24 <__aeabi_dcmplt>
 8006844:	2800      	cmp	r0, #0
 8006846:	d0e0      	beq.n	800680a <pow+0x4a>
 8006848:	f7ff fee4 	bl	8006614 <__errno>
 800684c:	2321      	movs	r3, #33	; 0x21
 800684e:	6003      	str	r3, [r0, #0]
 8006850:	2400      	movs	r4, #0
 8006852:	4d2f      	ldr	r5, [pc, #188]	; (8006910 <pow+0x150>)
 8006854:	e7d9      	b.n	800680a <pow+0x4a>
 8006856:	ec45 4b10 	vmov	d0, r4, r5
 800685a:	f001 fd14 	bl	8008286 <finite>
 800685e:	bbb8      	cbnz	r0, 80068d0 <pow+0x110>
 8006860:	ec49 8b10 	vmov	d0, r8, r9
 8006864:	f001 fd0f 	bl	8008286 <finite>
 8006868:	b390      	cbz	r0, 80068d0 <pow+0x110>
 800686a:	ec47 6b10 	vmov	d0, r6, r7
 800686e:	f001 fd0a 	bl	8008286 <finite>
 8006872:	b368      	cbz	r0, 80068d0 <pow+0x110>
 8006874:	4622      	mov	r2, r4
 8006876:	462b      	mov	r3, r5
 8006878:	4620      	mov	r0, r4
 800687a:	4629      	mov	r1, r5
 800687c:	f7fa f8fa 	bl	8000a74 <__aeabi_dcmpun>
 8006880:	b160      	cbz	r0, 800689c <pow+0xdc>
 8006882:	f7ff fec7 	bl	8006614 <__errno>
 8006886:	2321      	movs	r3, #33	; 0x21
 8006888:	6003      	str	r3, [r0, #0]
 800688a:	2200      	movs	r2, #0
 800688c:	2300      	movs	r3, #0
 800688e:	4610      	mov	r0, r2
 8006890:	4619      	mov	r1, r3
 8006892:	f7f9 ff7f 	bl	8000794 <__aeabi_ddiv>
 8006896:	4604      	mov	r4, r0
 8006898:	460d      	mov	r5, r1
 800689a:	e7b6      	b.n	800680a <pow+0x4a>
 800689c:	f7ff feba 	bl	8006614 <__errno>
 80068a0:	2322      	movs	r3, #34	; 0x22
 80068a2:	6003      	str	r3, [r0, #0]
 80068a4:	2200      	movs	r2, #0
 80068a6:	2300      	movs	r3, #0
 80068a8:	4640      	mov	r0, r8
 80068aa:	4649      	mov	r1, r9
 80068ac:	f7fa f8ba 	bl	8000a24 <__aeabi_dcmplt>
 80068b0:	2400      	movs	r4, #0
 80068b2:	b158      	cbz	r0, 80068cc <pow+0x10c>
 80068b4:	ec47 6b10 	vmov	d0, r6, r7
 80068b8:	f001 fd7a 	bl	80083b0 <rint>
 80068bc:	4632      	mov	r2, r6
 80068be:	ec51 0b10 	vmov	r0, r1, d0
 80068c2:	463b      	mov	r3, r7
 80068c4:	f7fa f8a4 	bl	8000a10 <__aeabi_dcmpeq>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d0c2      	beq.n	8006852 <pow+0x92>
 80068cc:	4d11      	ldr	r5, [pc, #68]	; (8006914 <pow+0x154>)
 80068ce:	e79c      	b.n	800680a <pow+0x4a>
 80068d0:	2200      	movs	r2, #0
 80068d2:	2300      	movs	r3, #0
 80068d4:	4620      	mov	r0, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	f7fa f89a 	bl	8000a10 <__aeabi_dcmpeq>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d094      	beq.n	800680a <pow+0x4a>
 80068e0:	ec49 8b10 	vmov	d0, r8, r9
 80068e4:	f001 fccf 	bl	8008286 <finite>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d08e      	beq.n	800680a <pow+0x4a>
 80068ec:	ec47 6b10 	vmov	d0, r6, r7
 80068f0:	f001 fcc9 	bl	8008286 <finite>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d088      	beq.n	800680a <pow+0x4a>
 80068f8:	f7ff fe8c 	bl	8006614 <__errno>
 80068fc:	2322      	movs	r3, #34	; 0x22
 80068fe:	6003      	str	r3, [r0, #0]
 8006900:	2400      	movs	r4, #0
 8006902:	2500      	movs	r5, #0
 8006904:	e781      	b.n	800680a <pow+0x4a>
 8006906:	4d04      	ldr	r5, [pc, #16]	; (8006918 <pow+0x158>)
 8006908:	2400      	movs	r4, #0
 800690a:	e77e      	b.n	800680a <pow+0x4a>
 800690c:	20000078 	.word	0x20000078
 8006910:	fff00000 	.word	0xfff00000
 8006914:	7ff00000 	.word	0x7ff00000
 8006918:	3ff00000 	.word	0x3ff00000
 800691c:	00000000 	.word	0x00000000

08006920 <__ieee754_pow>:
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	ed2d 8b06 	vpush	{d8-d10}
 8006928:	b08d      	sub	sp, #52	; 0x34
 800692a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800692e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006932:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006936:	ea56 0100 	orrs.w	r1, r6, r0
 800693a:	ec53 2b10 	vmov	r2, r3, d0
 800693e:	f000 84d1 	beq.w	80072e4 <__ieee754_pow+0x9c4>
 8006942:	497f      	ldr	r1, [pc, #508]	; (8006b40 <__ieee754_pow+0x220>)
 8006944:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006948:	428c      	cmp	r4, r1
 800694a:	ee10 8a10 	vmov	r8, s0
 800694e:	4699      	mov	r9, r3
 8006950:	dc09      	bgt.n	8006966 <__ieee754_pow+0x46>
 8006952:	d103      	bne.n	800695c <__ieee754_pow+0x3c>
 8006954:	b97a      	cbnz	r2, 8006976 <__ieee754_pow+0x56>
 8006956:	42a6      	cmp	r6, r4
 8006958:	dd02      	ble.n	8006960 <__ieee754_pow+0x40>
 800695a:	e00c      	b.n	8006976 <__ieee754_pow+0x56>
 800695c:	428e      	cmp	r6, r1
 800695e:	dc02      	bgt.n	8006966 <__ieee754_pow+0x46>
 8006960:	428e      	cmp	r6, r1
 8006962:	d110      	bne.n	8006986 <__ieee754_pow+0x66>
 8006964:	b178      	cbz	r0, 8006986 <__ieee754_pow+0x66>
 8006966:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800696a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800696e:	ea54 0308 	orrs.w	r3, r4, r8
 8006972:	f000 84b7 	beq.w	80072e4 <__ieee754_pow+0x9c4>
 8006976:	4873      	ldr	r0, [pc, #460]	; (8006b44 <__ieee754_pow+0x224>)
 8006978:	b00d      	add	sp, #52	; 0x34
 800697a:	ecbd 8b06 	vpop	{d8-d10}
 800697e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006982:	f001 bd0d 	b.w	80083a0 <nan>
 8006986:	f1b9 0f00 	cmp.w	r9, #0
 800698a:	da36      	bge.n	80069fa <__ieee754_pow+0xda>
 800698c:	496e      	ldr	r1, [pc, #440]	; (8006b48 <__ieee754_pow+0x228>)
 800698e:	428e      	cmp	r6, r1
 8006990:	dc51      	bgt.n	8006a36 <__ieee754_pow+0x116>
 8006992:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8006996:	428e      	cmp	r6, r1
 8006998:	f340 84af 	ble.w	80072fa <__ieee754_pow+0x9da>
 800699c:	1531      	asrs	r1, r6, #20
 800699e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80069a2:	2914      	cmp	r1, #20
 80069a4:	dd0f      	ble.n	80069c6 <__ieee754_pow+0xa6>
 80069a6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80069aa:	fa20 fc01 	lsr.w	ip, r0, r1
 80069ae:	fa0c f101 	lsl.w	r1, ip, r1
 80069b2:	4281      	cmp	r1, r0
 80069b4:	f040 84a1 	bne.w	80072fa <__ieee754_pow+0x9da>
 80069b8:	f00c 0c01 	and.w	ip, ip, #1
 80069bc:	f1cc 0102 	rsb	r1, ip, #2
 80069c0:	9100      	str	r1, [sp, #0]
 80069c2:	b180      	cbz	r0, 80069e6 <__ieee754_pow+0xc6>
 80069c4:	e059      	b.n	8006a7a <__ieee754_pow+0x15a>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d155      	bne.n	8006a76 <__ieee754_pow+0x156>
 80069ca:	f1c1 0114 	rsb	r1, r1, #20
 80069ce:	fa46 fc01 	asr.w	ip, r6, r1
 80069d2:	fa0c f101 	lsl.w	r1, ip, r1
 80069d6:	42b1      	cmp	r1, r6
 80069d8:	f040 848c 	bne.w	80072f4 <__ieee754_pow+0x9d4>
 80069dc:	f00c 0c01 	and.w	ip, ip, #1
 80069e0:	f1cc 0102 	rsb	r1, ip, #2
 80069e4:	9100      	str	r1, [sp, #0]
 80069e6:	4959      	ldr	r1, [pc, #356]	; (8006b4c <__ieee754_pow+0x22c>)
 80069e8:	428e      	cmp	r6, r1
 80069ea:	d12d      	bne.n	8006a48 <__ieee754_pow+0x128>
 80069ec:	2f00      	cmp	r7, #0
 80069ee:	da79      	bge.n	8006ae4 <__ieee754_pow+0x1c4>
 80069f0:	4956      	ldr	r1, [pc, #344]	; (8006b4c <__ieee754_pow+0x22c>)
 80069f2:	2000      	movs	r0, #0
 80069f4:	f7f9 fece 	bl	8000794 <__aeabi_ddiv>
 80069f8:	e016      	b.n	8006a28 <__ieee754_pow+0x108>
 80069fa:	2100      	movs	r1, #0
 80069fc:	9100      	str	r1, [sp, #0]
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d13b      	bne.n	8006a7a <__ieee754_pow+0x15a>
 8006a02:	494f      	ldr	r1, [pc, #316]	; (8006b40 <__ieee754_pow+0x220>)
 8006a04:	428e      	cmp	r6, r1
 8006a06:	d1ee      	bne.n	80069e6 <__ieee754_pow+0xc6>
 8006a08:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006a0c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006a10:	ea53 0308 	orrs.w	r3, r3, r8
 8006a14:	f000 8466 	beq.w	80072e4 <__ieee754_pow+0x9c4>
 8006a18:	4b4d      	ldr	r3, [pc, #308]	; (8006b50 <__ieee754_pow+0x230>)
 8006a1a:	429c      	cmp	r4, r3
 8006a1c:	dd0d      	ble.n	8006a3a <__ieee754_pow+0x11a>
 8006a1e:	2f00      	cmp	r7, #0
 8006a20:	f280 8464 	bge.w	80072ec <__ieee754_pow+0x9cc>
 8006a24:	2000      	movs	r0, #0
 8006a26:	2100      	movs	r1, #0
 8006a28:	ec41 0b10 	vmov	d0, r0, r1
 8006a2c:	b00d      	add	sp, #52	; 0x34
 8006a2e:	ecbd 8b06 	vpop	{d8-d10}
 8006a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a36:	2102      	movs	r1, #2
 8006a38:	e7e0      	b.n	80069fc <__ieee754_pow+0xdc>
 8006a3a:	2f00      	cmp	r7, #0
 8006a3c:	daf2      	bge.n	8006a24 <__ieee754_pow+0x104>
 8006a3e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006a42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a46:	e7ef      	b.n	8006a28 <__ieee754_pow+0x108>
 8006a48:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006a4c:	d104      	bne.n	8006a58 <__ieee754_pow+0x138>
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4619      	mov	r1, r3
 8006a52:	f7f9 fd75 	bl	8000540 <__aeabi_dmul>
 8006a56:	e7e7      	b.n	8006a28 <__ieee754_pow+0x108>
 8006a58:	493e      	ldr	r1, [pc, #248]	; (8006b54 <__ieee754_pow+0x234>)
 8006a5a:	428f      	cmp	r7, r1
 8006a5c:	d10d      	bne.n	8006a7a <__ieee754_pow+0x15a>
 8006a5e:	f1b9 0f00 	cmp.w	r9, #0
 8006a62:	db0a      	blt.n	8006a7a <__ieee754_pow+0x15a>
 8006a64:	ec43 2b10 	vmov	d0, r2, r3
 8006a68:	b00d      	add	sp, #52	; 0x34
 8006a6a:	ecbd 8b06 	vpop	{d8-d10}
 8006a6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a72:	f000 be83 	b.w	800777c <__ieee754_sqrt>
 8006a76:	2100      	movs	r1, #0
 8006a78:	9100      	str	r1, [sp, #0]
 8006a7a:	ec43 2b10 	vmov	d0, r2, r3
 8006a7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a82:	f001 fbf7 	bl	8008274 <fabs>
 8006a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a8a:	ec51 0b10 	vmov	r0, r1, d0
 8006a8e:	f1b8 0f00 	cmp.w	r8, #0
 8006a92:	d12a      	bne.n	8006aea <__ieee754_pow+0x1ca>
 8006a94:	b12c      	cbz	r4, 8006aa2 <__ieee754_pow+0x182>
 8006a96:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8006b4c <__ieee754_pow+0x22c>
 8006a9a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8006a9e:	45e6      	cmp	lr, ip
 8006aa0:	d123      	bne.n	8006aea <__ieee754_pow+0x1ca>
 8006aa2:	2f00      	cmp	r7, #0
 8006aa4:	da05      	bge.n	8006ab2 <__ieee754_pow+0x192>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	2000      	movs	r0, #0
 8006aac:	4927      	ldr	r1, [pc, #156]	; (8006b4c <__ieee754_pow+0x22c>)
 8006aae:	f7f9 fe71 	bl	8000794 <__aeabi_ddiv>
 8006ab2:	f1b9 0f00 	cmp.w	r9, #0
 8006ab6:	dab7      	bge.n	8006a28 <__ieee754_pow+0x108>
 8006ab8:	9b00      	ldr	r3, [sp, #0]
 8006aba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006abe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006ac2:	4323      	orrs	r3, r4
 8006ac4:	d108      	bne.n	8006ad8 <__ieee754_pow+0x1b8>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4610      	mov	r0, r2
 8006acc:	4619      	mov	r1, r3
 8006ace:	f7f9 fb7f 	bl	80001d0 <__aeabi_dsub>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	e78d      	b.n	80069f4 <__ieee754_pow+0xd4>
 8006ad8:	9b00      	ldr	r3, [sp, #0]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d1a4      	bne.n	8006a28 <__ieee754_pow+0x108>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	e79e      	b.n	8006a28 <__ieee754_pow+0x108>
 8006aea:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8006aee:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006af2:	950a      	str	r5, [sp, #40]	; 0x28
 8006af4:	9d00      	ldr	r5, [sp, #0]
 8006af6:	46ac      	mov	ip, r5
 8006af8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006afa:	ea5c 0505 	orrs.w	r5, ip, r5
 8006afe:	d0e4      	beq.n	8006aca <__ieee754_pow+0x1aa>
 8006b00:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <__ieee754_pow+0x238>)
 8006b02:	429e      	cmp	r6, r3
 8006b04:	f340 80fc 	ble.w	8006d00 <__ieee754_pow+0x3e0>
 8006b08:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006b0c:	429e      	cmp	r6, r3
 8006b0e:	4b10      	ldr	r3, [pc, #64]	; (8006b50 <__ieee754_pow+0x230>)
 8006b10:	dd07      	ble.n	8006b22 <__ieee754_pow+0x202>
 8006b12:	429c      	cmp	r4, r3
 8006b14:	dc0a      	bgt.n	8006b2c <__ieee754_pow+0x20c>
 8006b16:	2f00      	cmp	r7, #0
 8006b18:	da84      	bge.n	8006a24 <__ieee754_pow+0x104>
 8006b1a:	a307      	add	r3, pc, #28	; (adr r3, 8006b38 <__ieee754_pow+0x218>)
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	e795      	b.n	8006a4e <__ieee754_pow+0x12e>
 8006b22:	429c      	cmp	r4, r3
 8006b24:	dbf7      	blt.n	8006b16 <__ieee754_pow+0x1f6>
 8006b26:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <__ieee754_pow+0x22c>)
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	dd17      	ble.n	8006b5c <__ieee754_pow+0x23c>
 8006b2c:	2f00      	cmp	r7, #0
 8006b2e:	dcf4      	bgt.n	8006b1a <__ieee754_pow+0x1fa>
 8006b30:	e778      	b.n	8006a24 <__ieee754_pow+0x104>
 8006b32:	bf00      	nop
 8006b34:	f3af 8000 	nop.w
 8006b38:	8800759c 	.word	0x8800759c
 8006b3c:	7e37e43c 	.word	0x7e37e43c
 8006b40:	7ff00000 	.word	0x7ff00000
 8006b44:	08008608 	.word	0x08008608
 8006b48:	433fffff 	.word	0x433fffff
 8006b4c:	3ff00000 	.word	0x3ff00000
 8006b50:	3fefffff 	.word	0x3fefffff
 8006b54:	3fe00000 	.word	0x3fe00000
 8006b58:	41e00000 	.word	0x41e00000
 8006b5c:	4b64      	ldr	r3, [pc, #400]	; (8006cf0 <__ieee754_pow+0x3d0>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f7f9 fb36 	bl	80001d0 <__aeabi_dsub>
 8006b64:	a356      	add	r3, pc, #344	; (adr r3, 8006cc0 <__ieee754_pow+0x3a0>)
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	460d      	mov	r5, r1
 8006b6e:	f7f9 fce7 	bl	8000540 <__aeabi_dmul>
 8006b72:	a355      	add	r3, pc, #340	; (adr r3, 8006cc8 <__ieee754_pow+0x3a8>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	4606      	mov	r6, r0
 8006b7a:	460f      	mov	r7, r1
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	4629      	mov	r1, r5
 8006b80:	f7f9 fcde 	bl	8000540 <__aeabi_dmul>
 8006b84:	4b5b      	ldr	r3, [pc, #364]	; (8006cf4 <__ieee754_pow+0x3d4>)
 8006b86:	4682      	mov	sl, r0
 8006b88:	468b      	mov	fp, r1
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	4629      	mov	r1, r5
 8006b90:	f7f9 fcd6 	bl	8000540 <__aeabi_dmul>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	a14d      	add	r1, pc, #308	; (adr r1, 8006cd0 <__ieee754_pow+0x3b0>)
 8006b9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b9e:	f7f9 fb17 	bl	80001d0 <__aeabi_dsub>
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	462b      	mov	r3, r5
 8006ba6:	f7f9 fccb 	bl	8000540 <__aeabi_dmul>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	2000      	movs	r0, #0
 8006bb0:	4951      	ldr	r1, [pc, #324]	; (8006cf8 <__ieee754_pow+0x3d8>)
 8006bb2:	f7f9 fb0d 	bl	80001d0 <__aeabi_dsub>
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	4680      	mov	r8, r0
 8006bba:	4689      	mov	r9, r1
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f7f9 fcbd 	bl	8000540 <__aeabi_dmul>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4640      	mov	r0, r8
 8006bcc:	4649      	mov	r1, r9
 8006bce:	f7f9 fcb7 	bl	8000540 <__aeabi_dmul>
 8006bd2:	a341      	add	r3, pc, #260	; (adr r3, 8006cd8 <__ieee754_pow+0x3b8>)
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	f7f9 fcb2 	bl	8000540 <__aeabi_dmul>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4650      	mov	r0, sl
 8006be2:	4659      	mov	r1, fp
 8006be4:	f7f9 faf4 	bl	80001d0 <__aeabi_dsub>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4680      	mov	r8, r0
 8006bee:	4689      	mov	r9, r1
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	f7f9 faee 	bl	80001d4 <__adddf3>
 8006bf8:	2400      	movs	r4, #0
 8006bfa:	4632      	mov	r2, r6
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	4620      	mov	r0, r4
 8006c00:	460d      	mov	r5, r1
 8006c02:	f7f9 fae5 	bl	80001d0 <__aeabi_dsub>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	f7f9 fadf 	bl	80001d0 <__aeabi_dsub>
 8006c12:	9b00      	ldr	r3, [sp, #0]
 8006c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c16:	3b01      	subs	r3, #1
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	4682      	mov	sl, r0
 8006c1c:	468b      	mov	fp, r1
 8006c1e:	f040 81f1 	bne.w	8007004 <__ieee754_pow+0x6e4>
 8006c22:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006ce0 <__ieee754_pow+0x3c0>
 8006c26:	eeb0 8a47 	vmov.f32	s16, s14
 8006c2a:	eef0 8a67 	vmov.f32	s17, s15
 8006c2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c32:	2600      	movs	r6, #0
 8006c34:	4632      	mov	r2, r6
 8006c36:	463b      	mov	r3, r7
 8006c38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c3c:	f7f9 fac8 	bl	80001d0 <__aeabi_dsub>
 8006c40:	4622      	mov	r2, r4
 8006c42:	462b      	mov	r3, r5
 8006c44:	f7f9 fc7c 	bl	8000540 <__aeabi_dmul>
 8006c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	4689      	mov	r9, r1
 8006c50:	4650      	mov	r0, sl
 8006c52:	4659      	mov	r1, fp
 8006c54:	f7f9 fc74 	bl	8000540 <__aeabi_dmul>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	4649      	mov	r1, r9
 8006c60:	f7f9 fab8 	bl	80001d4 <__adddf3>
 8006c64:	4632      	mov	r2, r6
 8006c66:	463b      	mov	r3, r7
 8006c68:	4680      	mov	r8, r0
 8006c6a:	4689      	mov	r9, r1
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	4629      	mov	r1, r5
 8006c70:	f7f9 fc66 	bl	8000540 <__aeabi_dmul>
 8006c74:	460b      	mov	r3, r1
 8006c76:	4604      	mov	r4, r0
 8006c78:	460d      	mov	r5, r1
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	4640      	mov	r0, r8
 8006c80:	f7f9 faa8 	bl	80001d4 <__adddf3>
 8006c84:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <__ieee754_pow+0x3dc>)
 8006c86:	4299      	cmp	r1, r3
 8006c88:	ec45 4b19 	vmov	d9, r4, r5
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	460f      	mov	r7, r1
 8006c90:	468b      	mov	fp, r1
 8006c92:	f340 82fe 	ble.w	8007292 <__ieee754_pow+0x972>
 8006c96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006c9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006c9e:	4303      	orrs	r3, r0
 8006ca0:	f000 81f0 	beq.w	8007084 <__ieee754_pow+0x764>
 8006ca4:	a310      	add	r3, pc, #64	; (adr r3, 8006ce8 <__ieee754_pow+0x3c8>)
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	ec51 0b18 	vmov	r0, r1, d8
 8006cae:	f7f9 fc47 	bl	8000540 <__aeabi_dmul>
 8006cb2:	a30d      	add	r3, pc, #52	; (adr r3, 8006ce8 <__ieee754_pow+0x3c8>)
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	e6cb      	b.n	8006a52 <__ieee754_pow+0x132>
 8006cba:	bf00      	nop
 8006cbc:	f3af 8000 	nop.w
 8006cc0:	60000000 	.word	0x60000000
 8006cc4:	3ff71547 	.word	0x3ff71547
 8006cc8:	f85ddf44 	.word	0xf85ddf44
 8006ccc:	3e54ae0b 	.word	0x3e54ae0b
 8006cd0:	55555555 	.word	0x55555555
 8006cd4:	3fd55555 	.word	0x3fd55555
 8006cd8:	652b82fe 	.word	0x652b82fe
 8006cdc:	3ff71547 	.word	0x3ff71547
 8006ce0:	00000000 	.word	0x00000000
 8006ce4:	bff00000 	.word	0xbff00000
 8006ce8:	8800759c 	.word	0x8800759c
 8006cec:	7e37e43c 	.word	0x7e37e43c
 8006cf0:	3ff00000 	.word	0x3ff00000
 8006cf4:	3fd00000 	.word	0x3fd00000
 8006cf8:	3fe00000 	.word	0x3fe00000
 8006cfc:	408fffff 	.word	0x408fffff
 8006d00:	4bd7      	ldr	r3, [pc, #860]	; (8007060 <__ieee754_pow+0x740>)
 8006d02:	ea03 0309 	and.w	r3, r3, r9
 8006d06:	2200      	movs	r2, #0
 8006d08:	b92b      	cbnz	r3, 8006d16 <__ieee754_pow+0x3f6>
 8006d0a:	4bd6      	ldr	r3, [pc, #856]	; (8007064 <__ieee754_pow+0x744>)
 8006d0c:	f7f9 fc18 	bl	8000540 <__aeabi_dmul>
 8006d10:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006d14:	460c      	mov	r4, r1
 8006d16:	1523      	asrs	r3, r4, #20
 8006d18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d1c:	4413      	add	r3, r2
 8006d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d20:	4bd1      	ldr	r3, [pc, #836]	; (8007068 <__ieee754_pow+0x748>)
 8006d22:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006d26:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006d2a:	429c      	cmp	r4, r3
 8006d2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d30:	dd08      	ble.n	8006d44 <__ieee754_pow+0x424>
 8006d32:	4bce      	ldr	r3, [pc, #824]	; (800706c <__ieee754_pow+0x74c>)
 8006d34:	429c      	cmp	r4, r3
 8006d36:	f340 8163 	ble.w	8007000 <__ieee754_pow+0x6e0>
 8006d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d40:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006d44:	2400      	movs	r4, #0
 8006d46:	00e3      	lsls	r3, r4, #3
 8006d48:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d4a:	4bc9      	ldr	r3, [pc, #804]	; (8007070 <__ieee754_pow+0x750>)
 8006d4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d50:	ed93 7b00 	vldr	d7, [r3]
 8006d54:	4629      	mov	r1, r5
 8006d56:	ec53 2b17 	vmov	r2, r3, d7
 8006d5a:	eeb0 8a47 	vmov.f32	s16, s14
 8006d5e:	eef0 8a67 	vmov.f32	s17, s15
 8006d62:	4682      	mov	sl, r0
 8006d64:	f7f9 fa34 	bl	80001d0 <__aeabi_dsub>
 8006d68:	4652      	mov	r2, sl
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	460f      	mov	r7, r1
 8006d6e:	462b      	mov	r3, r5
 8006d70:	ec51 0b18 	vmov	r0, r1, d8
 8006d74:	f7f9 fa2e 	bl	80001d4 <__adddf3>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	49bd      	ldr	r1, [pc, #756]	; (8007074 <__ieee754_pow+0x754>)
 8006d80:	f7f9 fd08 	bl	8000794 <__aeabi_ddiv>
 8006d84:	ec41 0b19 	vmov	d9, r0, r1
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	4639      	mov	r1, r7
 8006d90:	f7f9 fbd6 	bl	8000540 <__aeabi_dmul>
 8006d94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006da0:	2300      	movs	r3, #0
 8006da2:	9304      	str	r3, [sp, #16]
 8006da4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006da8:	46ab      	mov	fp, r5
 8006daa:	106d      	asrs	r5, r5, #1
 8006dac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006db0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006db4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006db8:	2200      	movs	r2, #0
 8006dba:	4640      	mov	r0, r8
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	4614      	mov	r4, r2
 8006dc0:	461d      	mov	r5, r3
 8006dc2:	f7f9 fbbd 	bl	8000540 <__aeabi_dmul>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4630      	mov	r0, r6
 8006dcc:	4639      	mov	r1, r7
 8006dce:	f7f9 f9ff 	bl	80001d0 <__aeabi_dsub>
 8006dd2:	ec53 2b18 	vmov	r2, r3, d8
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	460f      	mov	r7, r1
 8006dda:	4620      	mov	r0, r4
 8006ddc:	4629      	mov	r1, r5
 8006dde:	f7f9 f9f7 	bl	80001d0 <__aeabi_dsub>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4650      	mov	r0, sl
 8006de8:	4659      	mov	r1, fp
 8006dea:	f7f9 f9f1 	bl	80001d0 <__aeabi_dsub>
 8006dee:	4642      	mov	r2, r8
 8006df0:	464b      	mov	r3, r9
 8006df2:	f7f9 fba5 	bl	8000540 <__aeabi_dmul>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	f7f9 f9e7 	bl	80001d0 <__aeabi_dsub>
 8006e02:	ec53 2b19 	vmov	r2, r3, d9
 8006e06:	f7f9 fb9b 	bl	8000540 <__aeabi_dmul>
 8006e0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e0e:	ec41 0b18 	vmov	d8, r0, r1
 8006e12:	4610      	mov	r0, r2
 8006e14:	4619      	mov	r1, r3
 8006e16:	f7f9 fb93 	bl	8000540 <__aeabi_dmul>
 8006e1a:	a37d      	add	r3, pc, #500	; (adr r3, 8007010 <__ieee754_pow+0x6f0>)
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	4604      	mov	r4, r0
 8006e22:	460d      	mov	r5, r1
 8006e24:	f7f9 fb8c 	bl	8000540 <__aeabi_dmul>
 8006e28:	a37b      	add	r3, pc, #492	; (adr r3, 8007018 <__ieee754_pow+0x6f8>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 f9d1 	bl	80001d4 <__adddf3>
 8006e32:	4622      	mov	r2, r4
 8006e34:	462b      	mov	r3, r5
 8006e36:	f7f9 fb83 	bl	8000540 <__aeabi_dmul>
 8006e3a:	a379      	add	r3, pc, #484	; (adr r3, 8007020 <__ieee754_pow+0x700>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 f9c8 	bl	80001d4 <__adddf3>
 8006e44:	4622      	mov	r2, r4
 8006e46:	462b      	mov	r3, r5
 8006e48:	f7f9 fb7a 	bl	8000540 <__aeabi_dmul>
 8006e4c:	a376      	add	r3, pc, #472	; (adr r3, 8007028 <__ieee754_pow+0x708>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f7f9 f9bf 	bl	80001d4 <__adddf3>
 8006e56:	4622      	mov	r2, r4
 8006e58:	462b      	mov	r3, r5
 8006e5a:	f7f9 fb71 	bl	8000540 <__aeabi_dmul>
 8006e5e:	a374      	add	r3, pc, #464	; (adr r3, 8007030 <__ieee754_pow+0x710>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f7f9 f9b6 	bl	80001d4 <__adddf3>
 8006e68:	4622      	mov	r2, r4
 8006e6a:	462b      	mov	r3, r5
 8006e6c:	f7f9 fb68 	bl	8000540 <__aeabi_dmul>
 8006e70:	a371      	add	r3, pc, #452	; (adr r3, 8007038 <__ieee754_pow+0x718>)
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	f7f9 f9ad 	bl	80001d4 <__adddf3>
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	4606      	mov	r6, r0
 8006e7e:	460f      	mov	r7, r1
 8006e80:	462b      	mov	r3, r5
 8006e82:	4620      	mov	r0, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	f7f9 fb5b 	bl	8000540 <__aeabi_dmul>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4630      	mov	r0, r6
 8006e90:	4639      	mov	r1, r7
 8006e92:	f7f9 fb55 	bl	8000540 <__aeabi_dmul>
 8006e96:	4642      	mov	r2, r8
 8006e98:	4604      	mov	r4, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	464b      	mov	r3, r9
 8006e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ea2:	f7f9 f997 	bl	80001d4 <__adddf3>
 8006ea6:	ec53 2b18 	vmov	r2, r3, d8
 8006eaa:	f7f9 fb49 	bl	8000540 <__aeabi_dmul>
 8006eae:	4622      	mov	r2, r4
 8006eb0:	462b      	mov	r3, r5
 8006eb2:	f7f9 f98f 	bl	80001d4 <__adddf3>
 8006eb6:	4642      	mov	r2, r8
 8006eb8:	4682      	mov	sl, r0
 8006eba:	468b      	mov	fp, r1
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	f7f9 fb3d 	bl	8000540 <__aeabi_dmul>
 8006ec6:	4b6c      	ldr	r3, [pc, #432]	; (8007078 <__ieee754_pow+0x758>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	4606      	mov	r6, r0
 8006ecc:	460f      	mov	r7, r1
 8006ece:	f7f9 f981 	bl	80001d4 <__adddf3>
 8006ed2:	4652      	mov	r2, sl
 8006ed4:	465b      	mov	r3, fp
 8006ed6:	f7f9 f97d 	bl	80001d4 <__adddf3>
 8006eda:	9c04      	ldr	r4, [sp, #16]
 8006edc:	460d      	mov	r5, r1
 8006ede:	4622      	mov	r2, r4
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	f7f9 fb2b 	bl	8000540 <__aeabi_dmul>
 8006eea:	4b63      	ldr	r3, [pc, #396]	; (8007078 <__ieee754_pow+0x758>)
 8006eec:	4680      	mov	r8, r0
 8006eee:	4689      	mov	r9, r1
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	f7f9 f96b 	bl	80001d0 <__aeabi_dsub>
 8006efa:	4632      	mov	r2, r6
 8006efc:	463b      	mov	r3, r7
 8006efe:	f7f9 f967 	bl	80001d0 <__aeabi_dsub>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	4650      	mov	r0, sl
 8006f08:	4659      	mov	r1, fp
 8006f0a:	f7f9 f961 	bl	80001d0 <__aeabi_dsub>
 8006f0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f12:	f7f9 fb15 	bl	8000540 <__aeabi_dmul>
 8006f16:	4622      	mov	r2, r4
 8006f18:	4606      	mov	r6, r0
 8006f1a:	460f      	mov	r7, r1
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	ec51 0b18 	vmov	r0, r1, d8
 8006f22:	f7f9 fb0d 	bl	8000540 <__aeabi_dmul>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	f7f9 f951 	bl	80001d4 <__adddf3>
 8006f32:	4606      	mov	r6, r0
 8006f34:	460f      	mov	r7, r1
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	f7f9 f949 	bl	80001d4 <__adddf3>
 8006f42:	9c04      	ldr	r4, [sp, #16]
 8006f44:	a33e      	add	r3, pc, #248	; (adr r3, 8007040 <__ieee754_pow+0x720>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	460d      	mov	r5, r1
 8006f4e:	f7f9 faf7 	bl	8000540 <__aeabi_dmul>
 8006f52:	4642      	mov	r2, r8
 8006f54:	ec41 0b18 	vmov	d8, r0, r1
 8006f58:	464b      	mov	r3, r9
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f7f9 f937 	bl	80001d0 <__aeabi_dsub>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4630      	mov	r0, r6
 8006f68:	4639      	mov	r1, r7
 8006f6a:	f7f9 f931 	bl	80001d0 <__aeabi_dsub>
 8006f6e:	a336      	add	r3, pc, #216	; (adr r3, 8007048 <__ieee754_pow+0x728>)
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f7f9 fae4 	bl	8000540 <__aeabi_dmul>
 8006f78:	a335      	add	r3, pc, #212	; (adr r3, 8007050 <__ieee754_pow+0x730>)
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	4606      	mov	r6, r0
 8006f80:	460f      	mov	r7, r1
 8006f82:	4620      	mov	r0, r4
 8006f84:	4629      	mov	r1, r5
 8006f86:	f7f9 fadb 	bl	8000540 <__aeabi_dmul>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4630      	mov	r0, r6
 8006f90:	4639      	mov	r1, r7
 8006f92:	f7f9 f91f 	bl	80001d4 <__adddf3>
 8006f96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f98:	4b38      	ldr	r3, [pc, #224]	; (800707c <__ieee754_pow+0x75c>)
 8006f9a:	4413      	add	r3, r2
 8006f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa0:	f7f9 f918 	bl	80001d4 <__adddf3>
 8006fa4:	4682      	mov	sl, r0
 8006fa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fa8:	468b      	mov	fp, r1
 8006faa:	f7f9 fa5f 	bl	800046c <__aeabi_i2d>
 8006fae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fb0:	4b33      	ldr	r3, [pc, #204]	; (8007080 <__ieee754_pow+0x760>)
 8006fb2:	4413      	add	r3, r2
 8006fb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fb8:	4606      	mov	r6, r0
 8006fba:	460f      	mov	r7, r1
 8006fbc:	4652      	mov	r2, sl
 8006fbe:	465b      	mov	r3, fp
 8006fc0:	ec51 0b18 	vmov	r0, r1, d8
 8006fc4:	f7f9 f906 	bl	80001d4 <__adddf3>
 8006fc8:	4642      	mov	r2, r8
 8006fca:	464b      	mov	r3, r9
 8006fcc:	f7f9 f902 	bl	80001d4 <__adddf3>
 8006fd0:	4632      	mov	r2, r6
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	f7f9 f8fe 	bl	80001d4 <__adddf3>
 8006fd8:	9c04      	ldr	r4, [sp, #16]
 8006fda:	4632      	mov	r2, r6
 8006fdc:	463b      	mov	r3, r7
 8006fde:	4620      	mov	r0, r4
 8006fe0:	460d      	mov	r5, r1
 8006fe2:	f7f9 f8f5 	bl	80001d0 <__aeabi_dsub>
 8006fe6:	4642      	mov	r2, r8
 8006fe8:	464b      	mov	r3, r9
 8006fea:	f7f9 f8f1 	bl	80001d0 <__aeabi_dsub>
 8006fee:	ec53 2b18 	vmov	r2, r3, d8
 8006ff2:	f7f9 f8ed 	bl	80001d0 <__aeabi_dsub>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	4659      	mov	r1, fp
 8006ffe:	e606      	b.n	8006c0e <__ieee754_pow+0x2ee>
 8007000:	2401      	movs	r4, #1
 8007002:	e6a0      	b.n	8006d46 <__ieee754_pow+0x426>
 8007004:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007058 <__ieee754_pow+0x738>
 8007008:	e60d      	b.n	8006c26 <__ieee754_pow+0x306>
 800700a:	bf00      	nop
 800700c:	f3af 8000 	nop.w
 8007010:	4a454eef 	.word	0x4a454eef
 8007014:	3fca7e28 	.word	0x3fca7e28
 8007018:	93c9db65 	.word	0x93c9db65
 800701c:	3fcd864a 	.word	0x3fcd864a
 8007020:	a91d4101 	.word	0xa91d4101
 8007024:	3fd17460 	.word	0x3fd17460
 8007028:	518f264d 	.word	0x518f264d
 800702c:	3fd55555 	.word	0x3fd55555
 8007030:	db6fabff 	.word	0xdb6fabff
 8007034:	3fdb6db6 	.word	0x3fdb6db6
 8007038:	33333303 	.word	0x33333303
 800703c:	3fe33333 	.word	0x3fe33333
 8007040:	e0000000 	.word	0xe0000000
 8007044:	3feec709 	.word	0x3feec709
 8007048:	dc3a03fd 	.word	0xdc3a03fd
 800704c:	3feec709 	.word	0x3feec709
 8007050:	145b01f5 	.word	0x145b01f5
 8007054:	be3e2fe0 	.word	0xbe3e2fe0
 8007058:	00000000 	.word	0x00000000
 800705c:	3ff00000 	.word	0x3ff00000
 8007060:	7ff00000 	.word	0x7ff00000
 8007064:	43400000 	.word	0x43400000
 8007068:	0003988e 	.word	0x0003988e
 800706c:	000bb679 	.word	0x000bb679
 8007070:	08008610 	.word	0x08008610
 8007074:	3ff00000 	.word	0x3ff00000
 8007078:	40080000 	.word	0x40080000
 800707c:	08008630 	.word	0x08008630
 8007080:	08008620 	.word	0x08008620
 8007084:	a3b5      	add	r3, pc, #724	; (adr r3, 800735c <__ieee754_pow+0xa3c>)
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	4640      	mov	r0, r8
 800708c:	4649      	mov	r1, r9
 800708e:	f7f9 f8a1 	bl	80001d4 <__adddf3>
 8007092:	4622      	mov	r2, r4
 8007094:	ec41 0b1a 	vmov	d10, r0, r1
 8007098:	462b      	mov	r3, r5
 800709a:	4630      	mov	r0, r6
 800709c:	4639      	mov	r1, r7
 800709e:	f7f9 f897 	bl	80001d0 <__aeabi_dsub>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	ec51 0b1a 	vmov	r0, r1, d10
 80070aa:	f7f9 fcd9 	bl	8000a60 <__aeabi_dcmpgt>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	f47f adf8 	bne.w	8006ca4 <__ieee754_pow+0x384>
 80070b4:	4aa4      	ldr	r2, [pc, #656]	; (8007348 <__ieee754_pow+0xa28>)
 80070b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070ba:	4293      	cmp	r3, r2
 80070bc:	f340 810b 	ble.w	80072d6 <__ieee754_pow+0x9b6>
 80070c0:	151b      	asrs	r3, r3, #20
 80070c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80070c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80070ca:	fa4a f303 	asr.w	r3, sl, r3
 80070ce:	445b      	add	r3, fp
 80070d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80070d4:	4e9d      	ldr	r6, [pc, #628]	; (800734c <__ieee754_pow+0xa2c>)
 80070d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80070da:	4116      	asrs	r6, r2
 80070dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80070e0:	2000      	movs	r0, #0
 80070e2:	ea23 0106 	bic.w	r1, r3, r6
 80070e6:	f1c2 0214 	rsb	r2, r2, #20
 80070ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80070ee:	fa4a fa02 	asr.w	sl, sl, r2
 80070f2:	f1bb 0f00 	cmp.w	fp, #0
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4620      	mov	r0, r4
 80070fc:	4629      	mov	r1, r5
 80070fe:	bfb8      	it	lt
 8007100:	f1ca 0a00 	rsblt	sl, sl, #0
 8007104:	f7f9 f864 	bl	80001d0 <__aeabi_dsub>
 8007108:	ec41 0b19 	vmov	d9, r0, r1
 800710c:	4642      	mov	r2, r8
 800710e:	464b      	mov	r3, r9
 8007110:	ec51 0b19 	vmov	r0, r1, d9
 8007114:	f7f9 f85e 	bl	80001d4 <__adddf3>
 8007118:	2400      	movs	r4, #0
 800711a:	a379      	add	r3, pc, #484	; (adr r3, 8007300 <__ieee754_pow+0x9e0>)
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	4620      	mov	r0, r4
 8007122:	460d      	mov	r5, r1
 8007124:	f7f9 fa0c 	bl	8000540 <__aeabi_dmul>
 8007128:	ec53 2b19 	vmov	r2, r3, d9
 800712c:	4606      	mov	r6, r0
 800712e:	460f      	mov	r7, r1
 8007130:	4620      	mov	r0, r4
 8007132:	4629      	mov	r1, r5
 8007134:	f7f9 f84c 	bl	80001d0 <__aeabi_dsub>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4640      	mov	r0, r8
 800713e:	4649      	mov	r1, r9
 8007140:	f7f9 f846 	bl	80001d0 <__aeabi_dsub>
 8007144:	a370      	add	r3, pc, #448	; (adr r3, 8007308 <__ieee754_pow+0x9e8>)
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f7f9 f9f9 	bl	8000540 <__aeabi_dmul>
 800714e:	a370      	add	r3, pc, #448	; (adr r3, 8007310 <__ieee754_pow+0x9f0>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	4680      	mov	r8, r0
 8007156:	4689      	mov	r9, r1
 8007158:	4620      	mov	r0, r4
 800715a:	4629      	mov	r1, r5
 800715c:	f7f9 f9f0 	bl	8000540 <__aeabi_dmul>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4640      	mov	r0, r8
 8007166:	4649      	mov	r1, r9
 8007168:	f7f9 f834 	bl	80001d4 <__adddf3>
 800716c:	4604      	mov	r4, r0
 800716e:	460d      	mov	r5, r1
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4630      	mov	r0, r6
 8007176:	4639      	mov	r1, r7
 8007178:	f7f9 f82c 	bl	80001d4 <__adddf3>
 800717c:	4632      	mov	r2, r6
 800717e:	463b      	mov	r3, r7
 8007180:	4680      	mov	r8, r0
 8007182:	4689      	mov	r9, r1
 8007184:	f7f9 f824 	bl	80001d0 <__aeabi_dsub>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	4620      	mov	r0, r4
 800718e:	4629      	mov	r1, r5
 8007190:	f7f9 f81e 	bl	80001d0 <__aeabi_dsub>
 8007194:	4642      	mov	r2, r8
 8007196:	4606      	mov	r6, r0
 8007198:	460f      	mov	r7, r1
 800719a:	464b      	mov	r3, r9
 800719c:	4640      	mov	r0, r8
 800719e:	4649      	mov	r1, r9
 80071a0:	f7f9 f9ce 	bl	8000540 <__aeabi_dmul>
 80071a4:	a35c      	add	r3, pc, #368	; (adr r3, 8007318 <__ieee754_pow+0x9f8>)
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	4604      	mov	r4, r0
 80071ac:	460d      	mov	r5, r1
 80071ae:	f7f9 f9c7 	bl	8000540 <__aeabi_dmul>
 80071b2:	a35b      	add	r3, pc, #364	; (adr r3, 8007320 <__ieee754_pow+0xa00>)
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	f7f9 f80a 	bl	80001d0 <__aeabi_dsub>
 80071bc:	4622      	mov	r2, r4
 80071be:	462b      	mov	r3, r5
 80071c0:	f7f9 f9be 	bl	8000540 <__aeabi_dmul>
 80071c4:	a358      	add	r3, pc, #352	; (adr r3, 8007328 <__ieee754_pow+0xa08>)
 80071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ca:	f7f9 f803 	bl	80001d4 <__adddf3>
 80071ce:	4622      	mov	r2, r4
 80071d0:	462b      	mov	r3, r5
 80071d2:	f7f9 f9b5 	bl	8000540 <__aeabi_dmul>
 80071d6:	a356      	add	r3, pc, #344	; (adr r3, 8007330 <__ieee754_pow+0xa10>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f7f8 fff8 	bl	80001d0 <__aeabi_dsub>
 80071e0:	4622      	mov	r2, r4
 80071e2:	462b      	mov	r3, r5
 80071e4:	f7f9 f9ac 	bl	8000540 <__aeabi_dmul>
 80071e8:	a353      	add	r3, pc, #332	; (adr r3, 8007338 <__ieee754_pow+0xa18>)
 80071ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ee:	f7f8 fff1 	bl	80001d4 <__adddf3>
 80071f2:	4622      	mov	r2, r4
 80071f4:	462b      	mov	r3, r5
 80071f6:	f7f9 f9a3 	bl	8000540 <__aeabi_dmul>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4640      	mov	r0, r8
 8007200:	4649      	mov	r1, r9
 8007202:	f7f8 ffe5 	bl	80001d0 <__aeabi_dsub>
 8007206:	4604      	mov	r4, r0
 8007208:	460d      	mov	r5, r1
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4640      	mov	r0, r8
 8007210:	4649      	mov	r1, r9
 8007212:	f7f9 f995 	bl	8000540 <__aeabi_dmul>
 8007216:	2200      	movs	r2, #0
 8007218:	ec41 0b19 	vmov	d9, r0, r1
 800721c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007220:	4620      	mov	r0, r4
 8007222:	4629      	mov	r1, r5
 8007224:	f7f8 ffd4 	bl	80001d0 <__aeabi_dsub>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	ec51 0b19 	vmov	r0, r1, d9
 8007230:	f7f9 fab0 	bl	8000794 <__aeabi_ddiv>
 8007234:	4632      	mov	r2, r6
 8007236:	4604      	mov	r4, r0
 8007238:	460d      	mov	r5, r1
 800723a:	463b      	mov	r3, r7
 800723c:	4640      	mov	r0, r8
 800723e:	4649      	mov	r1, r9
 8007240:	f7f9 f97e 	bl	8000540 <__aeabi_dmul>
 8007244:	4632      	mov	r2, r6
 8007246:	463b      	mov	r3, r7
 8007248:	f7f8 ffc4 	bl	80001d4 <__adddf3>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4620      	mov	r0, r4
 8007252:	4629      	mov	r1, r5
 8007254:	f7f8 ffbc 	bl	80001d0 <__aeabi_dsub>
 8007258:	4642      	mov	r2, r8
 800725a:	464b      	mov	r3, r9
 800725c:	f7f8 ffb8 	bl	80001d0 <__aeabi_dsub>
 8007260:	460b      	mov	r3, r1
 8007262:	4602      	mov	r2, r0
 8007264:	493a      	ldr	r1, [pc, #232]	; (8007350 <__ieee754_pow+0xa30>)
 8007266:	2000      	movs	r0, #0
 8007268:	f7f8 ffb2 	bl	80001d0 <__aeabi_dsub>
 800726c:	e9cd 0100 	strd	r0, r1, [sp]
 8007270:	9b01      	ldr	r3, [sp, #4]
 8007272:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800727a:	da2f      	bge.n	80072dc <__ieee754_pow+0x9bc>
 800727c:	4650      	mov	r0, sl
 800727e:	ed9d 0b00 	vldr	d0, [sp]
 8007282:	f001 f921 	bl	80084c8 <scalbn>
 8007286:	ec51 0b10 	vmov	r0, r1, d0
 800728a:	ec53 2b18 	vmov	r2, r3, d8
 800728e:	f7ff bbe0 	b.w	8006a52 <__ieee754_pow+0x132>
 8007292:	4b30      	ldr	r3, [pc, #192]	; (8007354 <__ieee754_pow+0xa34>)
 8007294:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007298:	429e      	cmp	r6, r3
 800729a:	f77f af0b 	ble.w	80070b4 <__ieee754_pow+0x794>
 800729e:	4b2e      	ldr	r3, [pc, #184]	; (8007358 <__ieee754_pow+0xa38>)
 80072a0:	440b      	add	r3, r1
 80072a2:	4303      	orrs	r3, r0
 80072a4:	d00b      	beq.n	80072be <__ieee754_pow+0x99e>
 80072a6:	a326      	add	r3, pc, #152	; (adr r3, 8007340 <__ieee754_pow+0xa20>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	ec51 0b18 	vmov	r0, r1, d8
 80072b0:	f7f9 f946 	bl	8000540 <__aeabi_dmul>
 80072b4:	a322      	add	r3, pc, #136	; (adr r3, 8007340 <__ieee754_pow+0xa20>)
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f7ff bbca 	b.w	8006a52 <__ieee754_pow+0x132>
 80072be:	4622      	mov	r2, r4
 80072c0:	462b      	mov	r3, r5
 80072c2:	f7f8 ff85 	bl	80001d0 <__aeabi_dsub>
 80072c6:	4642      	mov	r2, r8
 80072c8:	464b      	mov	r3, r9
 80072ca:	f7f9 fbbf 	bl	8000a4c <__aeabi_dcmpge>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f43f aef0 	beq.w	80070b4 <__ieee754_pow+0x794>
 80072d4:	e7e7      	b.n	80072a6 <__ieee754_pow+0x986>
 80072d6:	f04f 0a00 	mov.w	sl, #0
 80072da:	e717      	b.n	800710c <__ieee754_pow+0x7ec>
 80072dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072e0:	4619      	mov	r1, r3
 80072e2:	e7d2      	b.n	800728a <__ieee754_pow+0x96a>
 80072e4:	491a      	ldr	r1, [pc, #104]	; (8007350 <__ieee754_pow+0xa30>)
 80072e6:	2000      	movs	r0, #0
 80072e8:	f7ff bb9e 	b.w	8006a28 <__ieee754_pow+0x108>
 80072ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072f0:	f7ff bb9a 	b.w	8006a28 <__ieee754_pow+0x108>
 80072f4:	9000      	str	r0, [sp, #0]
 80072f6:	f7ff bb76 	b.w	80069e6 <__ieee754_pow+0xc6>
 80072fa:	2100      	movs	r1, #0
 80072fc:	f7ff bb60 	b.w	80069c0 <__ieee754_pow+0xa0>
 8007300:	00000000 	.word	0x00000000
 8007304:	3fe62e43 	.word	0x3fe62e43
 8007308:	fefa39ef 	.word	0xfefa39ef
 800730c:	3fe62e42 	.word	0x3fe62e42
 8007310:	0ca86c39 	.word	0x0ca86c39
 8007314:	be205c61 	.word	0xbe205c61
 8007318:	72bea4d0 	.word	0x72bea4d0
 800731c:	3e663769 	.word	0x3e663769
 8007320:	c5d26bf1 	.word	0xc5d26bf1
 8007324:	3ebbbd41 	.word	0x3ebbbd41
 8007328:	af25de2c 	.word	0xaf25de2c
 800732c:	3f11566a 	.word	0x3f11566a
 8007330:	16bebd93 	.word	0x16bebd93
 8007334:	3f66c16c 	.word	0x3f66c16c
 8007338:	5555553e 	.word	0x5555553e
 800733c:	3fc55555 	.word	0x3fc55555
 8007340:	c2f8f359 	.word	0xc2f8f359
 8007344:	01a56e1f 	.word	0x01a56e1f
 8007348:	3fe00000 	.word	0x3fe00000
 800734c:	000fffff 	.word	0x000fffff
 8007350:	3ff00000 	.word	0x3ff00000
 8007354:	4090cbff 	.word	0x4090cbff
 8007358:	3f6f3400 	.word	0x3f6f3400
 800735c:	652b82fe 	.word	0x652b82fe
 8007360:	3c971547 	.word	0x3c971547
 8007364:	00000000 	.word	0x00000000

08007368 <__ieee754_rem_pio2>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	ed2d 8b02 	vpush	{d8}
 8007370:	ec55 4b10 	vmov	r4, r5, d0
 8007374:	4bca      	ldr	r3, [pc, #808]	; (80076a0 <__ieee754_rem_pio2+0x338>)
 8007376:	b08b      	sub	sp, #44	; 0x2c
 8007378:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800737c:	4598      	cmp	r8, r3
 800737e:	4682      	mov	sl, r0
 8007380:	9502      	str	r5, [sp, #8]
 8007382:	dc08      	bgt.n	8007396 <__ieee754_rem_pio2+0x2e>
 8007384:	2200      	movs	r2, #0
 8007386:	2300      	movs	r3, #0
 8007388:	ed80 0b00 	vstr	d0, [r0]
 800738c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007390:	f04f 0b00 	mov.w	fp, #0
 8007394:	e028      	b.n	80073e8 <__ieee754_rem_pio2+0x80>
 8007396:	4bc3      	ldr	r3, [pc, #780]	; (80076a4 <__ieee754_rem_pio2+0x33c>)
 8007398:	4598      	cmp	r8, r3
 800739a:	dc78      	bgt.n	800748e <__ieee754_rem_pio2+0x126>
 800739c:	9b02      	ldr	r3, [sp, #8]
 800739e:	4ec2      	ldr	r6, [pc, #776]	; (80076a8 <__ieee754_rem_pio2+0x340>)
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	ee10 0a10 	vmov	r0, s0
 80073a6:	a3b0      	add	r3, pc, #704	; (adr r3, 8007668 <__ieee754_rem_pio2+0x300>)
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	4629      	mov	r1, r5
 80073ae:	dd39      	ble.n	8007424 <__ieee754_rem_pio2+0xbc>
 80073b0:	f7f8 ff0e 	bl	80001d0 <__aeabi_dsub>
 80073b4:	45b0      	cmp	r8, r6
 80073b6:	4604      	mov	r4, r0
 80073b8:	460d      	mov	r5, r1
 80073ba:	d01b      	beq.n	80073f4 <__ieee754_rem_pio2+0x8c>
 80073bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8007670 <__ieee754_rem_pio2+0x308>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f8 ff05 	bl	80001d0 <__aeabi_dsub>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	e9ca 2300 	strd	r2, r3, [sl]
 80073ce:	4620      	mov	r0, r4
 80073d0:	4629      	mov	r1, r5
 80073d2:	f7f8 fefd 	bl	80001d0 <__aeabi_dsub>
 80073d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8007670 <__ieee754_rem_pio2+0x308>)
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f7f8 fef8 	bl	80001d0 <__aeabi_dsub>
 80073e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80073e4:	f04f 0b01 	mov.w	fp, #1
 80073e8:	4658      	mov	r0, fp
 80073ea:	b00b      	add	sp, #44	; 0x2c
 80073ec:	ecbd 8b02 	vpop	{d8}
 80073f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8007678 <__ieee754_rem_pio2+0x310>)
 80073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fa:	f7f8 fee9 	bl	80001d0 <__aeabi_dsub>
 80073fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8007680 <__ieee754_rem_pio2+0x318>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	4604      	mov	r4, r0
 8007406:	460d      	mov	r5, r1
 8007408:	f7f8 fee2 	bl	80001d0 <__aeabi_dsub>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	e9ca 2300 	strd	r2, r3, [sl]
 8007414:	4620      	mov	r0, r4
 8007416:	4629      	mov	r1, r5
 8007418:	f7f8 feda 	bl	80001d0 <__aeabi_dsub>
 800741c:	a398      	add	r3, pc, #608	; (adr r3, 8007680 <__ieee754_rem_pio2+0x318>)
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	e7db      	b.n	80073dc <__ieee754_rem_pio2+0x74>
 8007424:	f7f8 fed6 	bl	80001d4 <__adddf3>
 8007428:	45b0      	cmp	r8, r6
 800742a:	4604      	mov	r4, r0
 800742c:	460d      	mov	r5, r1
 800742e:	d016      	beq.n	800745e <__ieee754_rem_pio2+0xf6>
 8007430:	a38f      	add	r3, pc, #572	; (adr r3, 8007670 <__ieee754_rem_pio2+0x308>)
 8007432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007436:	f7f8 fecd 	bl	80001d4 <__adddf3>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	e9ca 2300 	strd	r2, r3, [sl]
 8007442:	4620      	mov	r0, r4
 8007444:	4629      	mov	r1, r5
 8007446:	f7f8 fec3 	bl	80001d0 <__aeabi_dsub>
 800744a:	a389      	add	r3, pc, #548	; (adr r3, 8007670 <__ieee754_rem_pio2+0x308>)
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	f7f8 fec0 	bl	80001d4 <__adddf3>
 8007454:	f04f 3bff 	mov.w	fp, #4294967295
 8007458:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800745c:	e7c4      	b.n	80073e8 <__ieee754_rem_pio2+0x80>
 800745e:	a386      	add	r3, pc, #536	; (adr r3, 8007678 <__ieee754_rem_pio2+0x310>)
 8007460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007464:	f7f8 feb6 	bl	80001d4 <__adddf3>
 8007468:	a385      	add	r3, pc, #532	; (adr r3, 8007680 <__ieee754_rem_pio2+0x318>)
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	4604      	mov	r4, r0
 8007470:	460d      	mov	r5, r1
 8007472:	f7f8 feaf 	bl	80001d4 <__adddf3>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	e9ca 2300 	strd	r2, r3, [sl]
 800747e:	4620      	mov	r0, r4
 8007480:	4629      	mov	r1, r5
 8007482:	f7f8 fea5 	bl	80001d0 <__aeabi_dsub>
 8007486:	a37e      	add	r3, pc, #504	; (adr r3, 8007680 <__ieee754_rem_pio2+0x318>)
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	e7e0      	b.n	8007450 <__ieee754_rem_pio2+0xe8>
 800748e:	4b87      	ldr	r3, [pc, #540]	; (80076ac <__ieee754_rem_pio2+0x344>)
 8007490:	4598      	cmp	r8, r3
 8007492:	f300 80d9 	bgt.w	8007648 <__ieee754_rem_pio2+0x2e0>
 8007496:	f000 feed 	bl	8008274 <fabs>
 800749a:	ec55 4b10 	vmov	r4, r5, d0
 800749e:	ee10 0a10 	vmov	r0, s0
 80074a2:	a379      	add	r3, pc, #484	; (adr r3, 8007688 <__ieee754_rem_pio2+0x320>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	4629      	mov	r1, r5
 80074aa:	f7f9 f849 	bl	8000540 <__aeabi_dmul>
 80074ae:	4b80      	ldr	r3, [pc, #512]	; (80076b0 <__ieee754_rem_pio2+0x348>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	f7f8 fe8f 	bl	80001d4 <__adddf3>
 80074b6:	f7f9 faf3 	bl	8000aa0 <__aeabi_d2iz>
 80074ba:	4683      	mov	fp, r0
 80074bc:	f7f8 ffd6 	bl	800046c <__aeabi_i2d>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	ec43 2b18 	vmov	d8, r2, r3
 80074c8:	a367      	add	r3, pc, #412	; (adr r3, 8007668 <__ieee754_rem_pio2+0x300>)
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f7f9 f837 	bl	8000540 <__aeabi_dmul>
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	4620      	mov	r0, r4
 80074d8:	4629      	mov	r1, r5
 80074da:	f7f8 fe79 	bl	80001d0 <__aeabi_dsub>
 80074de:	a364      	add	r3, pc, #400	; (adr r3, 8007670 <__ieee754_rem_pio2+0x308>)
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	4606      	mov	r6, r0
 80074e6:	460f      	mov	r7, r1
 80074e8:	ec51 0b18 	vmov	r0, r1, d8
 80074ec:	f7f9 f828 	bl	8000540 <__aeabi_dmul>
 80074f0:	f1bb 0f1f 	cmp.w	fp, #31
 80074f4:	4604      	mov	r4, r0
 80074f6:	460d      	mov	r5, r1
 80074f8:	dc0d      	bgt.n	8007516 <__ieee754_rem_pio2+0x1ae>
 80074fa:	4b6e      	ldr	r3, [pc, #440]	; (80076b4 <__ieee754_rem_pio2+0x34c>)
 80074fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007504:	4543      	cmp	r3, r8
 8007506:	d006      	beq.n	8007516 <__ieee754_rem_pio2+0x1ae>
 8007508:	4622      	mov	r2, r4
 800750a:	462b      	mov	r3, r5
 800750c:	4630      	mov	r0, r6
 800750e:	4639      	mov	r1, r7
 8007510:	f7f8 fe5e 	bl	80001d0 <__aeabi_dsub>
 8007514:	e00f      	b.n	8007536 <__ieee754_rem_pio2+0x1ce>
 8007516:	462b      	mov	r3, r5
 8007518:	4622      	mov	r2, r4
 800751a:	4630      	mov	r0, r6
 800751c:	4639      	mov	r1, r7
 800751e:	f7f8 fe57 	bl	80001d0 <__aeabi_dsub>
 8007522:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007526:	9303      	str	r3, [sp, #12]
 8007528:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800752c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007530:	f1b8 0f10 	cmp.w	r8, #16
 8007534:	dc02      	bgt.n	800753c <__ieee754_rem_pio2+0x1d4>
 8007536:	e9ca 0100 	strd	r0, r1, [sl]
 800753a:	e039      	b.n	80075b0 <__ieee754_rem_pio2+0x248>
 800753c:	a34e      	add	r3, pc, #312	; (adr r3, 8007678 <__ieee754_rem_pio2+0x310>)
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	ec51 0b18 	vmov	r0, r1, d8
 8007546:	f7f8 fffb 	bl	8000540 <__aeabi_dmul>
 800754a:	4604      	mov	r4, r0
 800754c:	460d      	mov	r5, r1
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4630      	mov	r0, r6
 8007554:	4639      	mov	r1, r7
 8007556:	f7f8 fe3b 	bl	80001d0 <__aeabi_dsub>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4680      	mov	r8, r0
 8007560:	4689      	mov	r9, r1
 8007562:	4630      	mov	r0, r6
 8007564:	4639      	mov	r1, r7
 8007566:	f7f8 fe33 	bl	80001d0 <__aeabi_dsub>
 800756a:	4622      	mov	r2, r4
 800756c:	462b      	mov	r3, r5
 800756e:	f7f8 fe2f 	bl	80001d0 <__aeabi_dsub>
 8007572:	a343      	add	r3, pc, #268	; (adr r3, 8007680 <__ieee754_rem_pio2+0x318>)
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	4604      	mov	r4, r0
 800757a:	460d      	mov	r5, r1
 800757c:	ec51 0b18 	vmov	r0, r1, d8
 8007580:	f7f8 ffde 	bl	8000540 <__aeabi_dmul>
 8007584:	4622      	mov	r2, r4
 8007586:	462b      	mov	r3, r5
 8007588:	f7f8 fe22 	bl	80001d0 <__aeabi_dsub>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4604      	mov	r4, r0
 8007592:	460d      	mov	r5, r1
 8007594:	4640      	mov	r0, r8
 8007596:	4649      	mov	r1, r9
 8007598:	f7f8 fe1a 	bl	80001d0 <__aeabi_dsub>
 800759c:	9a03      	ldr	r2, [sp, #12]
 800759e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b31      	cmp	r3, #49	; 0x31
 80075a6:	dc24      	bgt.n	80075f2 <__ieee754_rem_pio2+0x28a>
 80075a8:	e9ca 0100 	strd	r0, r1, [sl]
 80075ac:	4646      	mov	r6, r8
 80075ae:	464f      	mov	r7, r9
 80075b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80075b4:	4630      	mov	r0, r6
 80075b6:	4642      	mov	r2, r8
 80075b8:	464b      	mov	r3, r9
 80075ba:	4639      	mov	r1, r7
 80075bc:	f7f8 fe08 	bl	80001d0 <__aeabi_dsub>
 80075c0:	462b      	mov	r3, r5
 80075c2:	4622      	mov	r2, r4
 80075c4:	f7f8 fe04 	bl	80001d0 <__aeabi_dsub>
 80075c8:	9b02      	ldr	r3, [sp, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80075d0:	f6bf af0a 	bge.w	80073e8 <__ieee754_rem_pio2+0x80>
 80075d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80075d8:	f8ca 3004 	str.w	r3, [sl, #4]
 80075dc:	f8ca 8000 	str.w	r8, [sl]
 80075e0:	f8ca 0008 	str.w	r0, [sl, #8]
 80075e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075e8:	f8ca 300c 	str.w	r3, [sl, #12]
 80075ec:	f1cb 0b00 	rsb	fp, fp, #0
 80075f0:	e6fa      	b.n	80073e8 <__ieee754_rem_pio2+0x80>
 80075f2:	a327      	add	r3, pc, #156	; (adr r3, 8007690 <__ieee754_rem_pio2+0x328>)
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	ec51 0b18 	vmov	r0, r1, d8
 80075fc:	f7f8 ffa0 	bl	8000540 <__aeabi_dmul>
 8007600:	4604      	mov	r4, r0
 8007602:	460d      	mov	r5, r1
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	4640      	mov	r0, r8
 800760a:	4649      	mov	r1, r9
 800760c:	f7f8 fde0 	bl	80001d0 <__aeabi_dsub>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4606      	mov	r6, r0
 8007616:	460f      	mov	r7, r1
 8007618:	4640      	mov	r0, r8
 800761a:	4649      	mov	r1, r9
 800761c:	f7f8 fdd8 	bl	80001d0 <__aeabi_dsub>
 8007620:	4622      	mov	r2, r4
 8007622:	462b      	mov	r3, r5
 8007624:	f7f8 fdd4 	bl	80001d0 <__aeabi_dsub>
 8007628:	a31b      	add	r3, pc, #108	; (adr r3, 8007698 <__ieee754_rem_pio2+0x330>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	4604      	mov	r4, r0
 8007630:	460d      	mov	r5, r1
 8007632:	ec51 0b18 	vmov	r0, r1, d8
 8007636:	f7f8 ff83 	bl	8000540 <__aeabi_dmul>
 800763a:	4622      	mov	r2, r4
 800763c:	462b      	mov	r3, r5
 800763e:	f7f8 fdc7 	bl	80001d0 <__aeabi_dsub>
 8007642:	4604      	mov	r4, r0
 8007644:	460d      	mov	r5, r1
 8007646:	e75f      	b.n	8007508 <__ieee754_rem_pio2+0x1a0>
 8007648:	4b1b      	ldr	r3, [pc, #108]	; (80076b8 <__ieee754_rem_pio2+0x350>)
 800764a:	4598      	cmp	r8, r3
 800764c:	dd36      	ble.n	80076bc <__ieee754_rem_pio2+0x354>
 800764e:	ee10 2a10 	vmov	r2, s0
 8007652:	462b      	mov	r3, r5
 8007654:	4620      	mov	r0, r4
 8007656:	4629      	mov	r1, r5
 8007658:	f7f8 fdba 	bl	80001d0 <__aeabi_dsub>
 800765c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007660:	e9ca 0100 	strd	r0, r1, [sl]
 8007664:	e694      	b.n	8007390 <__ieee754_rem_pio2+0x28>
 8007666:	bf00      	nop
 8007668:	54400000 	.word	0x54400000
 800766c:	3ff921fb 	.word	0x3ff921fb
 8007670:	1a626331 	.word	0x1a626331
 8007674:	3dd0b461 	.word	0x3dd0b461
 8007678:	1a600000 	.word	0x1a600000
 800767c:	3dd0b461 	.word	0x3dd0b461
 8007680:	2e037073 	.word	0x2e037073
 8007684:	3ba3198a 	.word	0x3ba3198a
 8007688:	6dc9c883 	.word	0x6dc9c883
 800768c:	3fe45f30 	.word	0x3fe45f30
 8007690:	2e000000 	.word	0x2e000000
 8007694:	3ba3198a 	.word	0x3ba3198a
 8007698:	252049c1 	.word	0x252049c1
 800769c:	397b839a 	.word	0x397b839a
 80076a0:	3fe921fb 	.word	0x3fe921fb
 80076a4:	4002d97b 	.word	0x4002d97b
 80076a8:	3ff921fb 	.word	0x3ff921fb
 80076ac:	413921fb 	.word	0x413921fb
 80076b0:	3fe00000 	.word	0x3fe00000
 80076b4:	08008640 	.word	0x08008640
 80076b8:	7fefffff 	.word	0x7fefffff
 80076bc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80076c0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80076c4:	ee10 0a10 	vmov	r0, s0
 80076c8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80076cc:	ee10 6a10 	vmov	r6, s0
 80076d0:	460f      	mov	r7, r1
 80076d2:	f7f9 f9e5 	bl	8000aa0 <__aeabi_d2iz>
 80076d6:	f7f8 fec9 	bl	800046c <__aeabi_i2d>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4630      	mov	r0, r6
 80076e0:	4639      	mov	r1, r7
 80076e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076e6:	f7f8 fd73 	bl	80001d0 <__aeabi_dsub>
 80076ea:	4b22      	ldr	r3, [pc, #136]	; (8007774 <__ieee754_rem_pio2+0x40c>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	f7f8 ff27 	bl	8000540 <__aeabi_dmul>
 80076f2:	460f      	mov	r7, r1
 80076f4:	4606      	mov	r6, r0
 80076f6:	f7f9 f9d3 	bl	8000aa0 <__aeabi_d2iz>
 80076fa:	f7f8 feb7 	bl	800046c <__aeabi_i2d>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4630      	mov	r0, r6
 8007704:	4639      	mov	r1, r7
 8007706:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800770a:	f7f8 fd61 	bl	80001d0 <__aeabi_dsub>
 800770e:	4b19      	ldr	r3, [pc, #100]	; (8007774 <__ieee754_rem_pio2+0x40c>)
 8007710:	2200      	movs	r2, #0
 8007712:	f7f8 ff15 	bl	8000540 <__aeabi_dmul>
 8007716:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800771a:	ad04      	add	r5, sp, #16
 800771c:	f04f 0803 	mov.w	r8, #3
 8007720:	46a9      	mov	r9, r5
 8007722:	2600      	movs	r6, #0
 8007724:	2700      	movs	r7, #0
 8007726:	4632      	mov	r2, r6
 8007728:	463b      	mov	r3, r7
 800772a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800772e:	46c3      	mov	fp, r8
 8007730:	3d08      	subs	r5, #8
 8007732:	f108 38ff 	add.w	r8, r8, #4294967295
 8007736:	f7f9 f96b 	bl	8000a10 <__aeabi_dcmpeq>
 800773a:	2800      	cmp	r0, #0
 800773c:	d1f3      	bne.n	8007726 <__ieee754_rem_pio2+0x3be>
 800773e:	4b0e      	ldr	r3, [pc, #56]	; (8007778 <__ieee754_rem_pio2+0x410>)
 8007740:	9301      	str	r3, [sp, #4]
 8007742:	2302      	movs	r3, #2
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	4622      	mov	r2, r4
 8007748:	465b      	mov	r3, fp
 800774a:	4651      	mov	r1, sl
 800774c:	4648      	mov	r0, r9
 800774e:	f000 f993 	bl	8007a78 <__kernel_rem_pio2>
 8007752:	9b02      	ldr	r3, [sp, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	4683      	mov	fp, r0
 8007758:	f6bf ae46 	bge.w	80073e8 <__ieee754_rem_pio2+0x80>
 800775c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007760:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007764:	f8ca 3004 	str.w	r3, [sl, #4]
 8007768:	f8da 300c 	ldr.w	r3, [sl, #12]
 800776c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007770:	e73a      	b.n	80075e8 <__ieee754_rem_pio2+0x280>
 8007772:	bf00      	nop
 8007774:	41700000 	.word	0x41700000
 8007778:	080086c0 	.word	0x080086c0

0800777c <__ieee754_sqrt>:
 800777c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007780:	ec55 4b10 	vmov	r4, r5, d0
 8007784:	4e56      	ldr	r6, [pc, #344]	; (80078e0 <__ieee754_sqrt+0x164>)
 8007786:	43ae      	bics	r6, r5
 8007788:	ee10 0a10 	vmov	r0, s0
 800778c:	ee10 3a10 	vmov	r3, s0
 8007790:	4629      	mov	r1, r5
 8007792:	462a      	mov	r2, r5
 8007794:	d110      	bne.n	80077b8 <__ieee754_sqrt+0x3c>
 8007796:	ee10 2a10 	vmov	r2, s0
 800779a:	462b      	mov	r3, r5
 800779c:	f7f8 fed0 	bl	8000540 <__aeabi_dmul>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4620      	mov	r0, r4
 80077a6:	4629      	mov	r1, r5
 80077a8:	f7f8 fd14 	bl	80001d4 <__adddf3>
 80077ac:	4604      	mov	r4, r0
 80077ae:	460d      	mov	r5, r1
 80077b0:	ec45 4b10 	vmov	d0, r4, r5
 80077b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077b8:	2d00      	cmp	r5, #0
 80077ba:	dc10      	bgt.n	80077de <__ieee754_sqrt+0x62>
 80077bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80077c0:	4330      	orrs	r0, r6
 80077c2:	d0f5      	beq.n	80077b0 <__ieee754_sqrt+0x34>
 80077c4:	b15d      	cbz	r5, 80077de <__ieee754_sqrt+0x62>
 80077c6:	ee10 2a10 	vmov	r2, s0
 80077ca:	462b      	mov	r3, r5
 80077cc:	ee10 0a10 	vmov	r0, s0
 80077d0:	f7f8 fcfe 	bl	80001d0 <__aeabi_dsub>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	f7f8 ffdc 	bl	8000794 <__aeabi_ddiv>
 80077dc:	e7e6      	b.n	80077ac <__ieee754_sqrt+0x30>
 80077de:	1509      	asrs	r1, r1, #20
 80077e0:	d076      	beq.n	80078d0 <__ieee754_sqrt+0x154>
 80077e2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80077e6:	07ce      	lsls	r6, r1, #31
 80077e8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80077ec:	bf5e      	ittt	pl
 80077ee:	0fda      	lsrpl	r2, r3, #31
 80077f0:	005b      	lslpl	r3, r3, #1
 80077f2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80077f6:	0fda      	lsrs	r2, r3, #31
 80077f8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80077fc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007800:	2000      	movs	r0, #0
 8007802:	106d      	asrs	r5, r5, #1
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	f04f 0e16 	mov.w	lr, #22
 800780a:	4684      	mov	ip, r0
 800780c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007810:	eb0c 0401 	add.w	r4, ip, r1
 8007814:	4294      	cmp	r4, r2
 8007816:	bfde      	ittt	le
 8007818:	1b12      	suble	r2, r2, r4
 800781a:	eb04 0c01 	addle.w	ip, r4, r1
 800781e:	1840      	addle	r0, r0, r1
 8007820:	0052      	lsls	r2, r2, #1
 8007822:	f1be 0e01 	subs.w	lr, lr, #1
 8007826:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800782a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800782e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007832:	d1ed      	bne.n	8007810 <__ieee754_sqrt+0x94>
 8007834:	4671      	mov	r1, lr
 8007836:	2720      	movs	r7, #32
 8007838:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800783c:	4562      	cmp	r2, ip
 800783e:	eb04 060e 	add.w	r6, r4, lr
 8007842:	dc02      	bgt.n	800784a <__ieee754_sqrt+0xce>
 8007844:	d113      	bne.n	800786e <__ieee754_sqrt+0xf2>
 8007846:	429e      	cmp	r6, r3
 8007848:	d811      	bhi.n	800786e <__ieee754_sqrt+0xf2>
 800784a:	2e00      	cmp	r6, #0
 800784c:	eb06 0e04 	add.w	lr, r6, r4
 8007850:	da43      	bge.n	80078da <__ieee754_sqrt+0x15e>
 8007852:	f1be 0f00 	cmp.w	lr, #0
 8007856:	db40      	blt.n	80078da <__ieee754_sqrt+0x15e>
 8007858:	f10c 0801 	add.w	r8, ip, #1
 800785c:	eba2 020c 	sub.w	r2, r2, ip
 8007860:	429e      	cmp	r6, r3
 8007862:	bf88      	it	hi
 8007864:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007868:	1b9b      	subs	r3, r3, r6
 800786a:	4421      	add	r1, r4
 800786c:	46c4      	mov	ip, r8
 800786e:	0052      	lsls	r2, r2, #1
 8007870:	3f01      	subs	r7, #1
 8007872:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007876:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800787a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800787e:	d1dd      	bne.n	800783c <__ieee754_sqrt+0xc0>
 8007880:	4313      	orrs	r3, r2
 8007882:	d006      	beq.n	8007892 <__ieee754_sqrt+0x116>
 8007884:	1c4c      	adds	r4, r1, #1
 8007886:	bf13      	iteet	ne
 8007888:	3101      	addne	r1, #1
 800788a:	3001      	addeq	r0, #1
 800788c:	4639      	moveq	r1, r7
 800788e:	f021 0101 	bicne.w	r1, r1, #1
 8007892:	1043      	asrs	r3, r0, #1
 8007894:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007898:	0849      	lsrs	r1, r1, #1
 800789a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800789e:	07c2      	lsls	r2, r0, #31
 80078a0:	bf48      	it	mi
 80078a2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80078a6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80078aa:	460c      	mov	r4, r1
 80078ac:	463d      	mov	r5, r7
 80078ae:	e77f      	b.n	80077b0 <__ieee754_sqrt+0x34>
 80078b0:	0ada      	lsrs	r2, r3, #11
 80078b2:	3815      	subs	r0, #21
 80078b4:	055b      	lsls	r3, r3, #21
 80078b6:	2a00      	cmp	r2, #0
 80078b8:	d0fa      	beq.n	80078b0 <__ieee754_sqrt+0x134>
 80078ba:	02d7      	lsls	r7, r2, #11
 80078bc:	d50a      	bpl.n	80078d4 <__ieee754_sqrt+0x158>
 80078be:	f1c1 0420 	rsb	r4, r1, #32
 80078c2:	fa23 f404 	lsr.w	r4, r3, r4
 80078c6:	1e4d      	subs	r5, r1, #1
 80078c8:	408b      	lsls	r3, r1
 80078ca:	4322      	orrs	r2, r4
 80078cc:	1b41      	subs	r1, r0, r5
 80078ce:	e788      	b.n	80077e2 <__ieee754_sqrt+0x66>
 80078d0:	4608      	mov	r0, r1
 80078d2:	e7f0      	b.n	80078b6 <__ieee754_sqrt+0x13a>
 80078d4:	0052      	lsls	r2, r2, #1
 80078d6:	3101      	adds	r1, #1
 80078d8:	e7ef      	b.n	80078ba <__ieee754_sqrt+0x13e>
 80078da:	46e0      	mov	r8, ip
 80078dc:	e7be      	b.n	800785c <__ieee754_sqrt+0xe0>
 80078de:	bf00      	nop
 80078e0:	7ff00000 	.word	0x7ff00000
 80078e4:	00000000 	.word	0x00000000

080078e8 <__kernel_cos>:
 80078e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	ec57 6b10 	vmov	r6, r7, d0
 80078f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80078f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80078f8:	ed8d 1b00 	vstr	d1, [sp]
 80078fc:	da07      	bge.n	800790e <__kernel_cos+0x26>
 80078fe:	ee10 0a10 	vmov	r0, s0
 8007902:	4639      	mov	r1, r7
 8007904:	f7f9 f8cc 	bl	8000aa0 <__aeabi_d2iz>
 8007908:	2800      	cmp	r0, #0
 800790a:	f000 8088 	beq.w	8007a1e <__kernel_cos+0x136>
 800790e:	4632      	mov	r2, r6
 8007910:	463b      	mov	r3, r7
 8007912:	4630      	mov	r0, r6
 8007914:	4639      	mov	r1, r7
 8007916:	f7f8 fe13 	bl	8000540 <__aeabi_dmul>
 800791a:	4b51      	ldr	r3, [pc, #324]	; (8007a60 <__kernel_cos+0x178>)
 800791c:	2200      	movs	r2, #0
 800791e:	4604      	mov	r4, r0
 8007920:	460d      	mov	r5, r1
 8007922:	f7f8 fe0d 	bl	8000540 <__aeabi_dmul>
 8007926:	a340      	add	r3, pc, #256	; (adr r3, 8007a28 <__kernel_cos+0x140>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	4682      	mov	sl, r0
 800792e:	468b      	mov	fp, r1
 8007930:	4620      	mov	r0, r4
 8007932:	4629      	mov	r1, r5
 8007934:	f7f8 fe04 	bl	8000540 <__aeabi_dmul>
 8007938:	a33d      	add	r3, pc, #244	; (adr r3, 8007a30 <__kernel_cos+0x148>)
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	f7f8 fc49 	bl	80001d4 <__adddf3>
 8007942:	4622      	mov	r2, r4
 8007944:	462b      	mov	r3, r5
 8007946:	f7f8 fdfb 	bl	8000540 <__aeabi_dmul>
 800794a:	a33b      	add	r3, pc, #236	; (adr r3, 8007a38 <__kernel_cos+0x150>)
 800794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007950:	f7f8 fc3e 	bl	80001d0 <__aeabi_dsub>
 8007954:	4622      	mov	r2, r4
 8007956:	462b      	mov	r3, r5
 8007958:	f7f8 fdf2 	bl	8000540 <__aeabi_dmul>
 800795c:	a338      	add	r3, pc, #224	; (adr r3, 8007a40 <__kernel_cos+0x158>)
 800795e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007962:	f7f8 fc37 	bl	80001d4 <__adddf3>
 8007966:	4622      	mov	r2, r4
 8007968:	462b      	mov	r3, r5
 800796a:	f7f8 fde9 	bl	8000540 <__aeabi_dmul>
 800796e:	a336      	add	r3, pc, #216	; (adr r3, 8007a48 <__kernel_cos+0x160>)
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f7f8 fc2c 	bl	80001d0 <__aeabi_dsub>
 8007978:	4622      	mov	r2, r4
 800797a:	462b      	mov	r3, r5
 800797c:	f7f8 fde0 	bl	8000540 <__aeabi_dmul>
 8007980:	a333      	add	r3, pc, #204	; (adr r3, 8007a50 <__kernel_cos+0x168>)
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f7f8 fc25 	bl	80001d4 <__adddf3>
 800798a:	4622      	mov	r2, r4
 800798c:	462b      	mov	r3, r5
 800798e:	f7f8 fdd7 	bl	8000540 <__aeabi_dmul>
 8007992:	4622      	mov	r2, r4
 8007994:	462b      	mov	r3, r5
 8007996:	f7f8 fdd3 	bl	8000540 <__aeabi_dmul>
 800799a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800799e:	4604      	mov	r4, r0
 80079a0:	460d      	mov	r5, r1
 80079a2:	4630      	mov	r0, r6
 80079a4:	4639      	mov	r1, r7
 80079a6:	f7f8 fdcb 	bl	8000540 <__aeabi_dmul>
 80079aa:	460b      	mov	r3, r1
 80079ac:	4602      	mov	r2, r0
 80079ae:	4629      	mov	r1, r5
 80079b0:	4620      	mov	r0, r4
 80079b2:	f7f8 fc0d 	bl	80001d0 <__aeabi_dsub>
 80079b6:	4b2b      	ldr	r3, [pc, #172]	; (8007a64 <__kernel_cos+0x17c>)
 80079b8:	4598      	cmp	r8, r3
 80079ba:	4606      	mov	r6, r0
 80079bc:	460f      	mov	r7, r1
 80079be:	dc10      	bgt.n	80079e2 <__kernel_cos+0xfa>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4650      	mov	r0, sl
 80079c6:	4659      	mov	r1, fp
 80079c8:	f7f8 fc02 	bl	80001d0 <__aeabi_dsub>
 80079cc:	460b      	mov	r3, r1
 80079ce:	4926      	ldr	r1, [pc, #152]	; (8007a68 <__kernel_cos+0x180>)
 80079d0:	4602      	mov	r2, r0
 80079d2:	2000      	movs	r0, #0
 80079d4:	f7f8 fbfc 	bl	80001d0 <__aeabi_dsub>
 80079d8:	ec41 0b10 	vmov	d0, r0, r1
 80079dc:	b003      	add	sp, #12
 80079de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e2:	4b22      	ldr	r3, [pc, #136]	; (8007a6c <__kernel_cos+0x184>)
 80079e4:	4920      	ldr	r1, [pc, #128]	; (8007a68 <__kernel_cos+0x180>)
 80079e6:	4598      	cmp	r8, r3
 80079e8:	bfcc      	ite	gt
 80079ea:	4d21      	ldrgt	r5, [pc, #132]	; (8007a70 <__kernel_cos+0x188>)
 80079ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80079f0:	2400      	movs	r4, #0
 80079f2:	4622      	mov	r2, r4
 80079f4:	462b      	mov	r3, r5
 80079f6:	2000      	movs	r0, #0
 80079f8:	f7f8 fbea 	bl	80001d0 <__aeabi_dsub>
 80079fc:	4622      	mov	r2, r4
 80079fe:	4680      	mov	r8, r0
 8007a00:	4689      	mov	r9, r1
 8007a02:	462b      	mov	r3, r5
 8007a04:	4650      	mov	r0, sl
 8007a06:	4659      	mov	r1, fp
 8007a08:	f7f8 fbe2 	bl	80001d0 <__aeabi_dsub>
 8007a0c:	4632      	mov	r2, r6
 8007a0e:	463b      	mov	r3, r7
 8007a10:	f7f8 fbde 	bl	80001d0 <__aeabi_dsub>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4640      	mov	r0, r8
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	e7da      	b.n	80079d4 <__kernel_cos+0xec>
 8007a1e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007a58 <__kernel_cos+0x170>
 8007a22:	e7db      	b.n	80079dc <__kernel_cos+0xf4>
 8007a24:	f3af 8000 	nop.w
 8007a28:	be8838d4 	.word	0xbe8838d4
 8007a2c:	bda8fae9 	.word	0xbda8fae9
 8007a30:	bdb4b1c4 	.word	0xbdb4b1c4
 8007a34:	3e21ee9e 	.word	0x3e21ee9e
 8007a38:	809c52ad 	.word	0x809c52ad
 8007a3c:	3e927e4f 	.word	0x3e927e4f
 8007a40:	19cb1590 	.word	0x19cb1590
 8007a44:	3efa01a0 	.word	0x3efa01a0
 8007a48:	16c15177 	.word	0x16c15177
 8007a4c:	3f56c16c 	.word	0x3f56c16c
 8007a50:	5555554c 	.word	0x5555554c
 8007a54:	3fa55555 	.word	0x3fa55555
 8007a58:	00000000 	.word	0x00000000
 8007a5c:	3ff00000 	.word	0x3ff00000
 8007a60:	3fe00000 	.word	0x3fe00000
 8007a64:	3fd33332 	.word	0x3fd33332
 8007a68:	3ff00000 	.word	0x3ff00000
 8007a6c:	3fe90000 	.word	0x3fe90000
 8007a70:	3fd20000 	.word	0x3fd20000
 8007a74:	00000000 	.word	0x00000000

08007a78 <__kernel_rem_pio2>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	ed2d 8b02 	vpush	{d8}
 8007a80:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007a84:	f112 0f14 	cmn.w	r2, #20
 8007a88:	9308      	str	r3, [sp, #32]
 8007a8a:	9101      	str	r1, [sp, #4]
 8007a8c:	4bc6      	ldr	r3, [pc, #792]	; (8007da8 <__kernel_rem_pio2+0x330>)
 8007a8e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007a90:	9009      	str	r0, [sp, #36]	; 0x24
 8007a92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a96:	9304      	str	r3, [sp, #16]
 8007a98:	9b08      	ldr	r3, [sp, #32]
 8007a9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a9e:	bfa8      	it	ge
 8007aa0:	1ed4      	subge	r4, r2, #3
 8007aa2:	9306      	str	r3, [sp, #24]
 8007aa4:	bfb2      	itee	lt
 8007aa6:	2400      	movlt	r4, #0
 8007aa8:	2318      	movge	r3, #24
 8007aaa:	fb94 f4f3 	sdivge	r4, r4, r3
 8007aae:	f06f 0317 	mvn.w	r3, #23
 8007ab2:	fb04 3303 	mla	r3, r4, r3, r3
 8007ab6:	eb03 0a02 	add.w	sl, r3, r2
 8007aba:	9b04      	ldr	r3, [sp, #16]
 8007abc:	9a06      	ldr	r2, [sp, #24]
 8007abe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007d98 <__kernel_rem_pio2+0x320>
 8007ac2:	eb03 0802 	add.w	r8, r3, r2
 8007ac6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007ac8:	1aa7      	subs	r7, r4, r2
 8007aca:	ae20      	add	r6, sp, #128	; 0x80
 8007acc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007ad0:	2500      	movs	r5, #0
 8007ad2:	4545      	cmp	r5, r8
 8007ad4:	dd18      	ble.n	8007b08 <__kernel_rem_pio2+0x90>
 8007ad6:	9b08      	ldr	r3, [sp, #32]
 8007ad8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007adc:	aa20      	add	r2, sp, #128	; 0x80
 8007ade:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007d98 <__kernel_rem_pio2+0x320>
 8007ae2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007ae6:	f1c3 0301 	rsb	r3, r3, #1
 8007aea:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007aee:	9307      	str	r3, [sp, #28]
 8007af0:	9b07      	ldr	r3, [sp, #28]
 8007af2:	9a04      	ldr	r2, [sp, #16]
 8007af4:	4443      	add	r3, r8
 8007af6:	429a      	cmp	r2, r3
 8007af8:	db2f      	blt.n	8007b5a <__kernel_rem_pio2+0xe2>
 8007afa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007afe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007b02:	462f      	mov	r7, r5
 8007b04:	2600      	movs	r6, #0
 8007b06:	e01b      	b.n	8007b40 <__kernel_rem_pio2+0xc8>
 8007b08:	42ef      	cmn	r7, r5
 8007b0a:	d407      	bmi.n	8007b1c <__kernel_rem_pio2+0xa4>
 8007b0c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007b10:	f7f8 fcac 	bl	800046c <__aeabi_i2d>
 8007b14:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007b18:	3501      	adds	r5, #1
 8007b1a:	e7da      	b.n	8007ad2 <__kernel_rem_pio2+0x5a>
 8007b1c:	ec51 0b18 	vmov	r0, r1, d8
 8007b20:	e7f8      	b.n	8007b14 <__kernel_rem_pio2+0x9c>
 8007b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b26:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007b2a:	f7f8 fd09 	bl	8000540 <__aeabi_dmul>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b36:	f7f8 fb4d 	bl	80001d4 <__adddf3>
 8007b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b3e:	3601      	adds	r6, #1
 8007b40:	9b06      	ldr	r3, [sp, #24]
 8007b42:	429e      	cmp	r6, r3
 8007b44:	f1a7 0708 	sub.w	r7, r7, #8
 8007b48:	ddeb      	ble.n	8007b22 <__kernel_rem_pio2+0xaa>
 8007b4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b4e:	3508      	adds	r5, #8
 8007b50:	ecab 7b02 	vstmia	fp!, {d7}
 8007b54:	f108 0801 	add.w	r8, r8, #1
 8007b58:	e7ca      	b.n	8007af0 <__kernel_rem_pio2+0x78>
 8007b5a:	9b04      	ldr	r3, [sp, #16]
 8007b5c:	aa0c      	add	r2, sp, #48	; 0x30
 8007b5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b64:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007b66:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007b6a:	9c04      	ldr	r4, [sp, #16]
 8007b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8007b6e:	ab98      	add	r3, sp, #608	; 0x260
 8007b70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b74:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007b78:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007b7c:	f8cd b008 	str.w	fp, [sp, #8]
 8007b80:	4625      	mov	r5, r4
 8007b82:	2d00      	cmp	r5, #0
 8007b84:	dc78      	bgt.n	8007c78 <__kernel_rem_pio2+0x200>
 8007b86:	ec47 6b10 	vmov	d0, r6, r7
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	f000 fc9c 	bl	80084c8 <scalbn>
 8007b90:	ec57 6b10 	vmov	r6, r7, d0
 8007b94:	2200      	movs	r2, #0
 8007b96:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007b9a:	ee10 0a10 	vmov	r0, s0
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	f7f8 fcce 	bl	8000540 <__aeabi_dmul>
 8007ba4:	ec41 0b10 	vmov	d0, r0, r1
 8007ba8:	f000 fb7a 	bl	80082a0 <floor>
 8007bac:	4b7f      	ldr	r3, [pc, #508]	; (8007dac <__kernel_rem_pio2+0x334>)
 8007bae:	ec51 0b10 	vmov	r0, r1, d0
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f7f8 fcc4 	bl	8000540 <__aeabi_dmul>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f8 fb06 	bl	80001d0 <__aeabi_dsub>
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	f7f8 ff6a 	bl	8000aa0 <__aeabi_d2iz>
 8007bcc:	9007      	str	r0, [sp, #28]
 8007bce:	f7f8 fc4d 	bl	800046c <__aeabi_i2d>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	4639      	mov	r1, r7
 8007bda:	f7f8 faf9 	bl	80001d0 <__aeabi_dsub>
 8007bde:	f1ba 0f00 	cmp.w	sl, #0
 8007be2:	4606      	mov	r6, r0
 8007be4:	460f      	mov	r7, r1
 8007be6:	dd70      	ble.n	8007cca <__kernel_rem_pio2+0x252>
 8007be8:	1e62      	subs	r2, r4, #1
 8007bea:	ab0c      	add	r3, sp, #48	; 0x30
 8007bec:	9d07      	ldr	r5, [sp, #28]
 8007bee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007bf2:	f1ca 0118 	rsb	r1, sl, #24
 8007bf6:	fa40 f301 	asr.w	r3, r0, r1
 8007bfa:	441d      	add	r5, r3
 8007bfc:	408b      	lsls	r3, r1
 8007bfe:	1ac0      	subs	r0, r0, r3
 8007c00:	ab0c      	add	r3, sp, #48	; 0x30
 8007c02:	9507      	str	r5, [sp, #28]
 8007c04:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007c08:	f1ca 0317 	rsb	r3, sl, #23
 8007c0c:	fa40 f303 	asr.w	r3, r0, r3
 8007c10:	9302      	str	r3, [sp, #8]
 8007c12:	9b02      	ldr	r3, [sp, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dd66      	ble.n	8007ce6 <__kernel_rem_pio2+0x26e>
 8007c18:	9b07      	ldr	r3, [sp, #28]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	9307      	str	r3, [sp, #28]
 8007c20:	4615      	mov	r5, r2
 8007c22:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007c26:	4294      	cmp	r4, r2
 8007c28:	f300 8099 	bgt.w	8007d5e <__kernel_rem_pio2+0x2e6>
 8007c2c:	f1ba 0f00 	cmp.w	sl, #0
 8007c30:	dd07      	ble.n	8007c42 <__kernel_rem_pio2+0x1ca>
 8007c32:	f1ba 0f01 	cmp.w	sl, #1
 8007c36:	f000 80a5 	beq.w	8007d84 <__kernel_rem_pio2+0x30c>
 8007c3a:	f1ba 0f02 	cmp.w	sl, #2
 8007c3e:	f000 80c1 	beq.w	8007dc4 <__kernel_rem_pio2+0x34c>
 8007c42:	9b02      	ldr	r3, [sp, #8]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d14e      	bne.n	8007ce6 <__kernel_rem_pio2+0x26e>
 8007c48:	4632      	mov	r2, r6
 8007c4a:	463b      	mov	r3, r7
 8007c4c:	4958      	ldr	r1, [pc, #352]	; (8007db0 <__kernel_rem_pio2+0x338>)
 8007c4e:	2000      	movs	r0, #0
 8007c50:	f7f8 fabe 	bl	80001d0 <__aeabi_dsub>
 8007c54:	4606      	mov	r6, r0
 8007c56:	460f      	mov	r7, r1
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	d044      	beq.n	8007ce6 <__kernel_rem_pio2+0x26e>
 8007c5c:	4650      	mov	r0, sl
 8007c5e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007da0 <__kernel_rem_pio2+0x328>
 8007c62:	f000 fc31 	bl	80084c8 <scalbn>
 8007c66:	4630      	mov	r0, r6
 8007c68:	4639      	mov	r1, r7
 8007c6a:	ec53 2b10 	vmov	r2, r3, d0
 8007c6e:	f7f8 faaf 	bl	80001d0 <__aeabi_dsub>
 8007c72:	4606      	mov	r6, r0
 8007c74:	460f      	mov	r7, r1
 8007c76:	e036      	b.n	8007ce6 <__kernel_rem_pio2+0x26e>
 8007c78:	4b4e      	ldr	r3, [pc, #312]	; (8007db4 <__kernel_rem_pio2+0x33c>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f7f8 fc5e 	bl	8000540 <__aeabi_dmul>
 8007c84:	f7f8 ff0c 	bl	8000aa0 <__aeabi_d2iz>
 8007c88:	f7f8 fbf0 	bl	800046c <__aeabi_i2d>
 8007c8c:	4b4a      	ldr	r3, [pc, #296]	; (8007db8 <__kernel_rem_pio2+0x340>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	4680      	mov	r8, r0
 8007c92:	4689      	mov	r9, r1
 8007c94:	f7f8 fc54 	bl	8000540 <__aeabi_dmul>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	f7f8 fa96 	bl	80001d0 <__aeabi_dsub>
 8007ca4:	f7f8 fefc 	bl	8000aa0 <__aeabi_d2iz>
 8007ca8:	9b02      	ldr	r3, [sp, #8]
 8007caa:	f843 0b04 	str.w	r0, [r3], #4
 8007cae:	3d01      	subs	r5, #1
 8007cb0:	9302      	str	r3, [sp, #8]
 8007cb2:	ab70      	add	r3, sp, #448	; 0x1c0
 8007cb4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	f7f8 fa88 	bl	80001d4 <__adddf3>
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	460f      	mov	r7, r1
 8007cc8:	e75b      	b.n	8007b82 <__kernel_rem_pio2+0x10a>
 8007cca:	d105      	bne.n	8007cd8 <__kernel_rem_pio2+0x260>
 8007ccc:	1e63      	subs	r3, r4, #1
 8007cce:	aa0c      	add	r2, sp, #48	; 0x30
 8007cd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007cd4:	15c3      	asrs	r3, r0, #23
 8007cd6:	e79b      	b.n	8007c10 <__kernel_rem_pio2+0x198>
 8007cd8:	4b38      	ldr	r3, [pc, #224]	; (8007dbc <__kernel_rem_pio2+0x344>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f7f8 feb6 	bl	8000a4c <__aeabi_dcmpge>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d139      	bne.n	8007d58 <__kernel_rem_pio2+0x2e0>
 8007ce4:	9002      	str	r0, [sp, #8]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	4630      	mov	r0, r6
 8007cec:	4639      	mov	r1, r7
 8007cee:	f7f8 fe8f 	bl	8000a10 <__aeabi_dcmpeq>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	f000 80b4 	beq.w	8007e60 <__kernel_rem_pio2+0x3e8>
 8007cf8:	f104 3bff 	add.w	fp, r4, #4294967295
 8007cfc:	465b      	mov	r3, fp
 8007cfe:	2200      	movs	r2, #0
 8007d00:	9904      	ldr	r1, [sp, #16]
 8007d02:	428b      	cmp	r3, r1
 8007d04:	da65      	bge.n	8007dd2 <__kernel_rem_pio2+0x35a>
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	d07b      	beq.n	8007e02 <__kernel_rem_pio2+0x38a>
 8007d0a:	ab0c      	add	r3, sp, #48	; 0x30
 8007d0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007d10:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 80a0 	beq.w	8007e5a <__kernel_rem_pio2+0x3e2>
 8007d1a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007da0 <__kernel_rem_pio2+0x328>
 8007d1e:	4650      	mov	r0, sl
 8007d20:	f000 fbd2 	bl	80084c8 <scalbn>
 8007d24:	4f23      	ldr	r7, [pc, #140]	; (8007db4 <__kernel_rem_pio2+0x33c>)
 8007d26:	ec55 4b10 	vmov	r4, r5, d0
 8007d2a:	46d8      	mov	r8, fp
 8007d2c:	2600      	movs	r6, #0
 8007d2e:	f1b8 0f00 	cmp.w	r8, #0
 8007d32:	f280 80cf 	bge.w	8007ed4 <__kernel_rem_pio2+0x45c>
 8007d36:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007d98 <__kernel_rem_pio2+0x320>
 8007d3a:	465f      	mov	r7, fp
 8007d3c:	f04f 0800 	mov.w	r8, #0
 8007d40:	2f00      	cmp	r7, #0
 8007d42:	f2c0 80fd 	blt.w	8007f40 <__kernel_rem_pio2+0x4c8>
 8007d46:	ab70      	add	r3, sp, #448	; 0x1c0
 8007d48:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007dc0 <__kernel_rem_pio2+0x348>
 8007d4c:	ec55 4b18 	vmov	r4, r5, d8
 8007d50:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007d54:	2600      	movs	r6, #0
 8007d56:	e0e5      	b.n	8007f24 <__kernel_rem_pio2+0x4ac>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	9302      	str	r3, [sp, #8]
 8007d5c:	e75c      	b.n	8007c18 <__kernel_rem_pio2+0x1a0>
 8007d5e:	f8db 3000 	ldr.w	r3, [fp]
 8007d62:	b955      	cbnz	r5, 8007d7a <__kernel_rem_pio2+0x302>
 8007d64:	b123      	cbz	r3, 8007d70 <__kernel_rem_pio2+0x2f8>
 8007d66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007d6a:	f8cb 3000 	str.w	r3, [fp]
 8007d6e:	2301      	movs	r3, #1
 8007d70:	3201      	adds	r2, #1
 8007d72:	f10b 0b04 	add.w	fp, fp, #4
 8007d76:	461d      	mov	r5, r3
 8007d78:	e755      	b.n	8007c26 <__kernel_rem_pio2+0x1ae>
 8007d7a:	1acb      	subs	r3, r1, r3
 8007d7c:	f8cb 3000 	str.w	r3, [fp]
 8007d80:	462b      	mov	r3, r5
 8007d82:	e7f5      	b.n	8007d70 <__kernel_rem_pio2+0x2f8>
 8007d84:	1e62      	subs	r2, r4, #1
 8007d86:	ab0c      	add	r3, sp, #48	; 0x30
 8007d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007d90:	a90c      	add	r1, sp, #48	; 0x30
 8007d92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007d96:	e754      	b.n	8007c42 <__kernel_rem_pio2+0x1ca>
	...
 8007da4:	3ff00000 	.word	0x3ff00000
 8007da8:	08008808 	.word	0x08008808
 8007dac:	40200000 	.word	0x40200000
 8007db0:	3ff00000 	.word	0x3ff00000
 8007db4:	3e700000 	.word	0x3e700000
 8007db8:	41700000 	.word	0x41700000
 8007dbc:	3fe00000 	.word	0x3fe00000
 8007dc0:	080087c8 	.word	0x080087c8
 8007dc4:	1e62      	subs	r2, r4, #1
 8007dc6:	ab0c      	add	r3, sp, #48	; 0x30
 8007dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dcc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007dd0:	e7de      	b.n	8007d90 <__kernel_rem_pio2+0x318>
 8007dd2:	a90c      	add	r1, sp, #48	; 0x30
 8007dd4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	e790      	b.n	8007d00 <__kernel_rem_pio2+0x288>
 8007dde:	3301      	adds	r3, #1
 8007de0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007de4:	2900      	cmp	r1, #0
 8007de6:	d0fa      	beq.n	8007dde <__kernel_rem_pio2+0x366>
 8007de8:	9a08      	ldr	r2, [sp, #32]
 8007dea:	18e3      	adds	r3, r4, r3
 8007dec:	18a6      	adds	r6, r4, r2
 8007dee:	aa20      	add	r2, sp, #128	; 0x80
 8007df0:	1c65      	adds	r5, r4, #1
 8007df2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007df6:	9302      	str	r3, [sp, #8]
 8007df8:	9b02      	ldr	r3, [sp, #8]
 8007dfa:	42ab      	cmp	r3, r5
 8007dfc:	da04      	bge.n	8007e08 <__kernel_rem_pio2+0x390>
 8007dfe:	461c      	mov	r4, r3
 8007e00:	e6b5      	b.n	8007b6e <__kernel_rem_pio2+0xf6>
 8007e02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e04:	2301      	movs	r3, #1
 8007e06:	e7eb      	b.n	8007de0 <__kernel_rem_pio2+0x368>
 8007e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e0e:	f7f8 fb2d 	bl	800046c <__aeabi_i2d>
 8007e12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e18:	46b3      	mov	fp, r6
 8007e1a:	461c      	mov	r4, r3
 8007e1c:	2700      	movs	r7, #0
 8007e1e:	f04f 0800 	mov.w	r8, #0
 8007e22:	f04f 0900 	mov.w	r9, #0
 8007e26:	9b06      	ldr	r3, [sp, #24]
 8007e28:	429f      	cmp	r7, r3
 8007e2a:	dd06      	ble.n	8007e3a <__kernel_rem_pio2+0x3c2>
 8007e2c:	ab70      	add	r3, sp, #448	; 0x1c0
 8007e2e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007e32:	e9c3 8900 	strd	r8, r9, [r3]
 8007e36:	3501      	adds	r5, #1
 8007e38:	e7de      	b.n	8007df8 <__kernel_rem_pio2+0x380>
 8007e3a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007e3e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007e42:	f7f8 fb7d 	bl	8000540 <__aeabi_dmul>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	f7f8 f9c1 	bl	80001d4 <__adddf3>
 8007e52:	3701      	adds	r7, #1
 8007e54:	4680      	mov	r8, r0
 8007e56:	4689      	mov	r9, r1
 8007e58:	e7e5      	b.n	8007e26 <__kernel_rem_pio2+0x3ae>
 8007e5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e5e:	e754      	b.n	8007d0a <__kernel_rem_pio2+0x292>
 8007e60:	ec47 6b10 	vmov	d0, r6, r7
 8007e64:	f1ca 0000 	rsb	r0, sl, #0
 8007e68:	f000 fb2e 	bl	80084c8 <scalbn>
 8007e6c:	ec57 6b10 	vmov	r6, r7, d0
 8007e70:	4b9f      	ldr	r3, [pc, #636]	; (80080f0 <__kernel_rem_pio2+0x678>)
 8007e72:	ee10 0a10 	vmov	r0, s0
 8007e76:	2200      	movs	r2, #0
 8007e78:	4639      	mov	r1, r7
 8007e7a:	f7f8 fde7 	bl	8000a4c <__aeabi_dcmpge>
 8007e7e:	b300      	cbz	r0, 8007ec2 <__kernel_rem_pio2+0x44a>
 8007e80:	4b9c      	ldr	r3, [pc, #624]	; (80080f4 <__kernel_rem_pio2+0x67c>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	4630      	mov	r0, r6
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 fb5a 	bl	8000540 <__aeabi_dmul>
 8007e8c:	f7f8 fe08 	bl	8000aa0 <__aeabi_d2iz>
 8007e90:	4605      	mov	r5, r0
 8007e92:	f7f8 faeb 	bl	800046c <__aeabi_i2d>
 8007e96:	4b96      	ldr	r3, [pc, #600]	; (80080f0 <__kernel_rem_pio2+0x678>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f7f8 fb51 	bl	8000540 <__aeabi_dmul>
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f7f8 f993 	bl	80001d0 <__aeabi_dsub>
 8007eaa:	f7f8 fdf9 	bl	8000aa0 <__aeabi_d2iz>
 8007eae:	f104 0b01 	add.w	fp, r4, #1
 8007eb2:	ab0c      	add	r3, sp, #48	; 0x30
 8007eb4:	f10a 0a18 	add.w	sl, sl, #24
 8007eb8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007ebc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007ec0:	e72b      	b.n	8007d1a <__kernel_rem_pio2+0x2a2>
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	f7f8 fdeb 	bl	8000aa0 <__aeabi_d2iz>
 8007eca:	ab0c      	add	r3, sp, #48	; 0x30
 8007ecc:	46a3      	mov	fp, r4
 8007ece:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007ed2:	e722      	b.n	8007d1a <__kernel_rem_pio2+0x2a2>
 8007ed4:	ab70      	add	r3, sp, #448	; 0x1c0
 8007ed6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007eda:	ab0c      	add	r3, sp, #48	; 0x30
 8007edc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007ee0:	f7f8 fac4 	bl	800046c <__aeabi_i2d>
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	462b      	mov	r3, r5
 8007ee8:	f7f8 fb2a 	bl	8000540 <__aeabi_dmul>
 8007eec:	4632      	mov	r2, r6
 8007eee:	e9c9 0100 	strd	r0, r1, [r9]
 8007ef2:	463b      	mov	r3, r7
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	f7f8 fb22 	bl	8000540 <__aeabi_dmul>
 8007efc:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f00:	4604      	mov	r4, r0
 8007f02:	460d      	mov	r5, r1
 8007f04:	e713      	b.n	8007d2e <__kernel_rem_pio2+0x2b6>
 8007f06:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007f0a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007f0e:	f7f8 fb17 	bl	8000540 <__aeabi_dmul>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4620      	mov	r0, r4
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f7f8 f95b 	bl	80001d4 <__adddf3>
 8007f1e:	3601      	adds	r6, #1
 8007f20:	4604      	mov	r4, r0
 8007f22:	460d      	mov	r5, r1
 8007f24:	9b04      	ldr	r3, [sp, #16]
 8007f26:	429e      	cmp	r6, r3
 8007f28:	dc01      	bgt.n	8007f2e <__kernel_rem_pio2+0x4b6>
 8007f2a:	45b0      	cmp	r8, r6
 8007f2c:	daeb      	bge.n	8007f06 <__kernel_rem_pio2+0x48e>
 8007f2e:	ab48      	add	r3, sp, #288	; 0x120
 8007f30:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007f34:	e9c3 4500 	strd	r4, r5, [r3]
 8007f38:	3f01      	subs	r7, #1
 8007f3a:	f108 0801 	add.w	r8, r8, #1
 8007f3e:	e6ff      	b.n	8007d40 <__kernel_rem_pio2+0x2c8>
 8007f40:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	dc0b      	bgt.n	8007f5e <__kernel_rem_pio2+0x4e6>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	dc6e      	bgt.n	8008028 <__kernel_rem_pio2+0x5b0>
 8007f4a:	d045      	beq.n	8007fd8 <__kernel_rem_pio2+0x560>
 8007f4c:	9b07      	ldr	r3, [sp, #28]
 8007f4e:	f003 0007 	and.w	r0, r3, #7
 8007f52:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007f56:	ecbd 8b02 	vpop	{d8}
 8007f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d1f3      	bne.n	8007f4c <__kernel_rem_pio2+0x4d4>
 8007f64:	ab48      	add	r3, sp, #288	; 0x120
 8007f66:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007f6a:	46d0      	mov	r8, sl
 8007f6c:	46d9      	mov	r9, fp
 8007f6e:	f1b9 0f00 	cmp.w	r9, #0
 8007f72:	f1a8 0808 	sub.w	r8, r8, #8
 8007f76:	dc64      	bgt.n	8008042 <__kernel_rem_pio2+0x5ca>
 8007f78:	465c      	mov	r4, fp
 8007f7a:	2c01      	cmp	r4, #1
 8007f7c:	f1aa 0a08 	sub.w	sl, sl, #8
 8007f80:	dc7e      	bgt.n	8008080 <__kernel_rem_pio2+0x608>
 8007f82:	2000      	movs	r0, #0
 8007f84:	2100      	movs	r1, #0
 8007f86:	f1bb 0f01 	cmp.w	fp, #1
 8007f8a:	f300 8097 	bgt.w	80080bc <__kernel_rem_pio2+0x644>
 8007f8e:	9b02      	ldr	r3, [sp, #8]
 8007f90:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007f94:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f040 8099 	bne.w	80080d0 <__kernel_rem_pio2+0x658>
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	e9c3 5600 	strd	r5, r6, [r3]
 8007fa4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007fa8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007fac:	e7ce      	b.n	8007f4c <__kernel_rem_pio2+0x4d4>
 8007fae:	ab48      	add	r3, sp, #288	; 0x120
 8007fb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f7f8 f90c 	bl	80001d4 <__adddf3>
 8007fbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fc0:	f1bb 0f00 	cmp.w	fp, #0
 8007fc4:	daf3      	bge.n	8007fae <__kernel_rem_pio2+0x536>
 8007fc6:	9b02      	ldr	r3, [sp, #8]
 8007fc8:	b113      	cbz	r3, 8007fd0 <__kernel_rem_pio2+0x558>
 8007fca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fce:	4619      	mov	r1, r3
 8007fd0:	9b01      	ldr	r3, [sp, #4]
 8007fd2:	e9c3 0100 	strd	r0, r1, [r3]
 8007fd6:	e7b9      	b.n	8007f4c <__kernel_rem_pio2+0x4d4>
 8007fd8:	2000      	movs	r0, #0
 8007fda:	2100      	movs	r1, #0
 8007fdc:	e7f0      	b.n	8007fc0 <__kernel_rem_pio2+0x548>
 8007fde:	ab48      	add	r3, sp, #288	; 0x120
 8007fe0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f7f8 f8f4 	bl	80001d4 <__adddf3>
 8007fec:	3c01      	subs	r4, #1
 8007fee:	2c00      	cmp	r4, #0
 8007ff0:	daf5      	bge.n	8007fde <__kernel_rem_pio2+0x566>
 8007ff2:	9b02      	ldr	r3, [sp, #8]
 8007ff4:	b1e3      	cbz	r3, 8008030 <__kernel_rem_pio2+0x5b8>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ffc:	9c01      	ldr	r4, [sp, #4]
 8007ffe:	e9c4 2300 	strd	r2, r3, [r4]
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800800a:	f7f8 f8e1 	bl	80001d0 <__aeabi_dsub>
 800800e:	ad4a      	add	r5, sp, #296	; 0x128
 8008010:	2401      	movs	r4, #1
 8008012:	45a3      	cmp	fp, r4
 8008014:	da0f      	bge.n	8008036 <__kernel_rem_pio2+0x5be>
 8008016:	9b02      	ldr	r3, [sp, #8]
 8008018:	b113      	cbz	r3, 8008020 <__kernel_rem_pio2+0x5a8>
 800801a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800801e:	4619      	mov	r1, r3
 8008020:	9b01      	ldr	r3, [sp, #4]
 8008022:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008026:	e791      	b.n	8007f4c <__kernel_rem_pio2+0x4d4>
 8008028:	465c      	mov	r4, fp
 800802a:	2000      	movs	r0, #0
 800802c:	2100      	movs	r1, #0
 800802e:	e7de      	b.n	8007fee <__kernel_rem_pio2+0x576>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	e7e2      	b.n	8007ffc <__kernel_rem_pio2+0x584>
 8008036:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800803a:	f7f8 f8cb 	bl	80001d4 <__adddf3>
 800803e:	3401      	adds	r4, #1
 8008040:	e7e7      	b.n	8008012 <__kernel_rem_pio2+0x59a>
 8008042:	e9d8 4500 	ldrd	r4, r5, [r8]
 8008046:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800804a:	4620      	mov	r0, r4
 800804c:	4632      	mov	r2, r6
 800804e:	463b      	mov	r3, r7
 8008050:	4629      	mov	r1, r5
 8008052:	f7f8 f8bf 	bl	80001d4 <__adddf3>
 8008056:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 f8b5 	bl	80001d0 <__aeabi_dsub>
 8008066:	4632      	mov	r2, r6
 8008068:	463b      	mov	r3, r7
 800806a:	f7f8 f8b3 	bl	80001d4 <__adddf3>
 800806e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008072:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8008076:	ed88 7b00 	vstr	d7, [r8]
 800807a:	f109 39ff 	add.w	r9, r9, #4294967295
 800807e:	e776      	b.n	8007f6e <__kernel_rem_pio2+0x4f6>
 8008080:	e9da 8900 	ldrd	r8, r9, [sl]
 8008084:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008088:	4640      	mov	r0, r8
 800808a:	4632      	mov	r2, r6
 800808c:	463b      	mov	r3, r7
 800808e:	4649      	mov	r1, r9
 8008090:	f7f8 f8a0 	bl	80001d4 <__adddf3>
 8008094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4640      	mov	r0, r8
 800809e:	4649      	mov	r1, r9
 80080a0:	f7f8 f896 	bl	80001d0 <__aeabi_dsub>
 80080a4:	4632      	mov	r2, r6
 80080a6:	463b      	mov	r3, r7
 80080a8:	f7f8 f894 	bl	80001d4 <__adddf3>
 80080ac:	ed9d 7b04 	vldr	d7, [sp, #16]
 80080b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80080b4:	ed8a 7b00 	vstr	d7, [sl]
 80080b8:	3c01      	subs	r4, #1
 80080ba:	e75e      	b.n	8007f7a <__kernel_rem_pio2+0x502>
 80080bc:	ab48      	add	r3, sp, #288	; 0x120
 80080be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	f7f8 f885 	bl	80001d4 <__adddf3>
 80080ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080ce:	e75a      	b.n	8007f86 <__kernel_rem_pio2+0x50e>
 80080d0:	9b01      	ldr	r3, [sp, #4]
 80080d2:	9a01      	ldr	r2, [sp, #4]
 80080d4:	601d      	str	r5, [r3, #0]
 80080d6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80080da:	605c      	str	r4, [r3, #4]
 80080dc:	609f      	str	r7, [r3, #8]
 80080de:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80080e2:	60d3      	str	r3, [r2, #12]
 80080e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080e8:	6110      	str	r0, [r2, #16]
 80080ea:	6153      	str	r3, [r2, #20]
 80080ec:	e72e      	b.n	8007f4c <__kernel_rem_pio2+0x4d4>
 80080ee:	bf00      	nop
 80080f0:	41700000 	.word	0x41700000
 80080f4:	3e700000 	.word	0x3e700000

080080f8 <__kernel_sin>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	ed2d 8b04 	vpush	{d8-d9}
 8008100:	eeb0 8a41 	vmov.f32	s16, s2
 8008104:	eef0 8a61 	vmov.f32	s17, s3
 8008108:	ec55 4b10 	vmov	r4, r5, d0
 800810c:	b083      	sub	sp, #12
 800810e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008112:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008116:	9001      	str	r0, [sp, #4]
 8008118:	da06      	bge.n	8008128 <__kernel_sin+0x30>
 800811a:	ee10 0a10 	vmov	r0, s0
 800811e:	4629      	mov	r1, r5
 8008120:	f7f8 fcbe 	bl	8000aa0 <__aeabi_d2iz>
 8008124:	2800      	cmp	r0, #0
 8008126:	d051      	beq.n	80081cc <__kernel_sin+0xd4>
 8008128:	4622      	mov	r2, r4
 800812a:	462b      	mov	r3, r5
 800812c:	4620      	mov	r0, r4
 800812e:	4629      	mov	r1, r5
 8008130:	f7f8 fa06 	bl	8000540 <__aeabi_dmul>
 8008134:	4682      	mov	sl, r0
 8008136:	468b      	mov	fp, r1
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4620      	mov	r0, r4
 800813e:	4629      	mov	r1, r5
 8008140:	f7f8 f9fe 	bl	8000540 <__aeabi_dmul>
 8008144:	a341      	add	r3, pc, #260	; (adr r3, 800824c <__kernel_sin+0x154>)
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	4680      	mov	r8, r0
 800814c:	4689      	mov	r9, r1
 800814e:	4650      	mov	r0, sl
 8008150:	4659      	mov	r1, fp
 8008152:	f7f8 f9f5 	bl	8000540 <__aeabi_dmul>
 8008156:	a33f      	add	r3, pc, #252	; (adr r3, 8008254 <__kernel_sin+0x15c>)
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f7f8 f838 	bl	80001d0 <__aeabi_dsub>
 8008160:	4652      	mov	r2, sl
 8008162:	465b      	mov	r3, fp
 8008164:	f7f8 f9ec 	bl	8000540 <__aeabi_dmul>
 8008168:	a33c      	add	r3, pc, #240	; (adr r3, 800825c <__kernel_sin+0x164>)
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	f7f8 f831 	bl	80001d4 <__adddf3>
 8008172:	4652      	mov	r2, sl
 8008174:	465b      	mov	r3, fp
 8008176:	f7f8 f9e3 	bl	8000540 <__aeabi_dmul>
 800817a:	a33a      	add	r3, pc, #232	; (adr r3, 8008264 <__kernel_sin+0x16c>)
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	f7f8 f826 	bl	80001d0 <__aeabi_dsub>
 8008184:	4652      	mov	r2, sl
 8008186:	465b      	mov	r3, fp
 8008188:	f7f8 f9da 	bl	8000540 <__aeabi_dmul>
 800818c:	a337      	add	r3, pc, #220	; (adr r3, 800826c <__kernel_sin+0x174>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 f81f 	bl	80001d4 <__adddf3>
 8008196:	9b01      	ldr	r3, [sp, #4]
 8008198:	4606      	mov	r6, r0
 800819a:	460f      	mov	r7, r1
 800819c:	b9eb      	cbnz	r3, 80081da <__kernel_sin+0xe2>
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	4650      	mov	r0, sl
 80081a4:	4659      	mov	r1, fp
 80081a6:	f7f8 f9cb 	bl	8000540 <__aeabi_dmul>
 80081aa:	a325      	add	r3, pc, #148	; (adr r3, 8008240 <__kernel_sin+0x148>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f7f8 f80e 	bl	80001d0 <__aeabi_dsub>
 80081b4:	4642      	mov	r2, r8
 80081b6:	464b      	mov	r3, r9
 80081b8:	f7f8 f9c2 	bl	8000540 <__aeabi_dmul>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4620      	mov	r0, r4
 80081c2:	4629      	mov	r1, r5
 80081c4:	f7f8 f806 	bl	80001d4 <__adddf3>
 80081c8:	4604      	mov	r4, r0
 80081ca:	460d      	mov	r5, r1
 80081cc:	ec45 4b10 	vmov	d0, r4, r5
 80081d0:	b003      	add	sp, #12
 80081d2:	ecbd 8b04 	vpop	{d8-d9}
 80081d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081da:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <__kernel_sin+0x150>)
 80081dc:	ec51 0b18 	vmov	r0, r1, d8
 80081e0:	2200      	movs	r2, #0
 80081e2:	f7f8 f9ad 	bl	8000540 <__aeabi_dmul>
 80081e6:	4632      	mov	r2, r6
 80081e8:	ec41 0b19 	vmov	d9, r0, r1
 80081ec:	463b      	mov	r3, r7
 80081ee:	4640      	mov	r0, r8
 80081f0:	4649      	mov	r1, r9
 80081f2:	f7f8 f9a5 	bl	8000540 <__aeabi_dmul>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	ec51 0b19 	vmov	r0, r1, d9
 80081fe:	f7f7 ffe7 	bl	80001d0 <__aeabi_dsub>
 8008202:	4652      	mov	r2, sl
 8008204:	465b      	mov	r3, fp
 8008206:	f7f8 f99b 	bl	8000540 <__aeabi_dmul>
 800820a:	ec53 2b18 	vmov	r2, r3, d8
 800820e:	f7f7 ffdf 	bl	80001d0 <__aeabi_dsub>
 8008212:	a30b      	add	r3, pc, #44	; (adr r3, 8008240 <__kernel_sin+0x148>)
 8008214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008218:	4606      	mov	r6, r0
 800821a:	460f      	mov	r7, r1
 800821c:	4640      	mov	r0, r8
 800821e:	4649      	mov	r1, r9
 8008220:	f7f8 f98e 	bl	8000540 <__aeabi_dmul>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4630      	mov	r0, r6
 800822a:	4639      	mov	r1, r7
 800822c:	f7f7 ffd2 	bl	80001d4 <__adddf3>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4620      	mov	r0, r4
 8008236:	4629      	mov	r1, r5
 8008238:	f7f7 ffca 	bl	80001d0 <__aeabi_dsub>
 800823c:	e7c4      	b.n	80081c8 <__kernel_sin+0xd0>
 800823e:	bf00      	nop
 8008240:	55555549 	.word	0x55555549
 8008244:	3fc55555 	.word	0x3fc55555
 8008248:	3fe00000 	.word	0x3fe00000
 800824c:	5acfd57c 	.word	0x5acfd57c
 8008250:	3de5d93a 	.word	0x3de5d93a
 8008254:	8a2b9ceb 	.word	0x8a2b9ceb
 8008258:	3e5ae5e6 	.word	0x3e5ae5e6
 800825c:	57b1fe7d 	.word	0x57b1fe7d
 8008260:	3ec71de3 	.word	0x3ec71de3
 8008264:	19c161d5 	.word	0x19c161d5
 8008268:	3f2a01a0 	.word	0x3f2a01a0
 800826c:	1110f8a6 	.word	0x1110f8a6
 8008270:	3f811111 	.word	0x3f811111

08008274 <fabs>:
 8008274:	ec51 0b10 	vmov	r0, r1, d0
 8008278:	ee10 2a10 	vmov	r2, s0
 800827c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008280:	ec43 2b10 	vmov	d0, r2, r3
 8008284:	4770      	bx	lr

08008286 <finite>:
 8008286:	b082      	sub	sp, #8
 8008288:	ed8d 0b00 	vstr	d0, [sp]
 800828c:	9801      	ldr	r0, [sp, #4]
 800828e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008292:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008296:	0fc0      	lsrs	r0, r0, #31
 8008298:	b002      	add	sp, #8
 800829a:	4770      	bx	lr
 800829c:	0000      	movs	r0, r0
	...

080082a0 <floor>:
 80082a0:	ec51 0b10 	vmov	r0, r1, d0
 80082a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80082ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80082b0:	2e13      	cmp	r6, #19
 80082b2:	ee10 5a10 	vmov	r5, s0
 80082b6:	ee10 8a10 	vmov	r8, s0
 80082ba:	460c      	mov	r4, r1
 80082bc:	dc32      	bgt.n	8008324 <floor+0x84>
 80082be:	2e00      	cmp	r6, #0
 80082c0:	da14      	bge.n	80082ec <floor+0x4c>
 80082c2:	a333      	add	r3, pc, #204	; (adr r3, 8008390 <floor+0xf0>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	f7f7 ff84 	bl	80001d4 <__adddf3>
 80082cc:	2200      	movs	r2, #0
 80082ce:	2300      	movs	r3, #0
 80082d0:	f7f8 fbc6 	bl	8000a60 <__aeabi_dcmpgt>
 80082d4:	b138      	cbz	r0, 80082e6 <floor+0x46>
 80082d6:	2c00      	cmp	r4, #0
 80082d8:	da57      	bge.n	800838a <floor+0xea>
 80082da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80082de:	431d      	orrs	r5, r3
 80082e0:	d001      	beq.n	80082e6 <floor+0x46>
 80082e2:	4c2d      	ldr	r4, [pc, #180]	; (8008398 <floor+0xf8>)
 80082e4:	2500      	movs	r5, #0
 80082e6:	4621      	mov	r1, r4
 80082e8:	4628      	mov	r0, r5
 80082ea:	e025      	b.n	8008338 <floor+0x98>
 80082ec:	4f2b      	ldr	r7, [pc, #172]	; (800839c <floor+0xfc>)
 80082ee:	4137      	asrs	r7, r6
 80082f0:	ea01 0307 	and.w	r3, r1, r7
 80082f4:	4303      	orrs	r3, r0
 80082f6:	d01f      	beq.n	8008338 <floor+0x98>
 80082f8:	a325      	add	r3, pc, #148	; (adr r3, 8008390 <floor+0xf0>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f7f7 ff69 	bl	80001d4 <__adddf3>
 8008302:	2200      	movs	r2, #0
 8008304:	2300      	movs	r3, #0
 8008306:	f7f8 fbab 	bl	8000a60 <__aeabi_dcmpgt>
 800830a:	2800      	cmp	r0, #0
 800830c:	d0eb      	beq.n	80082e6 <floor+0x46>
 800830e:	2c00      	cmp	r4, #0
 8008310:	bfbe      	ittt	lt
 8008312:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008316:	fa43 f606 	asrlt.w	r6, r3, r6
 800831a:	19a4      	addlt	r4, r4, r6
 800831c:	ea24 0407 	bic.w	r4, r4, r7
 8008320:	2500      	movs	r5, #0
 8008322:	e7e0      	b.n	80082e6 <floor+0x46>
 8008324:	2e33      	cmp	r6, #51	; 0x33
 8008326:	dd0b      	ble.n	8008340 <floor+0xa0>
 8008328:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800832c:	d104      	bne.n	8008338 <floor+0x98>
 800832e:	ee10 2a10 	vmov	r2, s0
 8008332:	460b      	mov	r3, r1
 8008334:	f7f7 ff4e 	bl	80001d4 <__adddf3>
 8008338:	ec41 0b10 	vmov	d0, r0, r1
 800833c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008340:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008344:	f04f 33ff 	mov.w	r3, #4294967295
 8008348:	fa23 f707 	lsr.w	r7, r3, r7
 800834c:	4207      	tst	r7, r0
 800834e:	d0f3      	beq.n	8008338 <floor+0x98>
 8008350:	a30f      	add	r3, pc, #60	; (adr r3, 8008390 <floor+0xf0>)
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	f7f7 ff3d 	bl	80001d4 <__adddf3>
 800835a:	2200      	movs	r2, #0
 800835c:	2300      	movs	r3, #0
 800835e:	f7f8 fb7f 	bl	8000a60 <__aeabi_dcmpgt>
 8008362:	2800      	cmp	r0, #0
 8008364:	d0bf      	beq.n	80082e6 <floor+0x46>
 8008366:	2c00      	cmp	r4, #0
 8008368:	da02      	bge.n	8008370 <floor+0xd0>
 800836a:	2e14      	cmp	r6, #20
 800836c:	d103      	bne.n	8008376 <floor+0xd6>
 800836e:	3401      	adds	r4, #1
 8008370:	ea25 0507 	bic.w	r5, r5, r7
 8008374:	e7b7      	b.n	80082e6 <floor+0x46>
 8008376:	2301      	movs	r3, #1
 8008378:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800837c:	fa03 f606 	lsl.w	r6, r3, r6
 8008380:	4435      	add	r5, r6
 8008382:	4545      	cmp	r5, r8
 8008384:	bf38      	it	cc
 8008386:	18e4      	addcc	r4, r4, r3
 8008388:	e7f2      	b.n	8008370 <floor+0xd0>
 800838a:	2500      	movs	r5, #0
 800838c:	462c      	mov	r4, r5
 800838e:	e7aa      	b.n	80082e6 <floor+0x46>
 8008390:	8800759c 	.word	0x8800759c
 8008394:	7e37e43c 	.word	0x7e37e43c
 8008398:	bff00000 	.word	0xbff00000
 800839c:	000fffff 	.word	0x000fffff

080083a0 <nan>:
 80083a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80083a8 <nan+0x8>
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	00000000 	.word	0x00000000
 80083ac:	7ff80000 	.word	0x7ff80000

080083b0 <rint>:
 80083b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083b2:	ec51 0b10 	vmov	r0, r1, d0
 80083b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80083ba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80083be:	2e13      	cmp	r6, #19
 80083c0:	ee10 4a10 	vmov	r4, s0
 80083c4:	460b      	mov	r3, r1
 80083c6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80083ca:	dc58      	bgt.n	800847e <rint+0xce>
 80083cc:	2e00      	cmp	r6, #0
 80083ce:	da2b      	bge.n	8008428 <rint+0x78>
 80083d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80083d4:	4302      	orrs	r2, r0
 80083d6:	d023      	beq.n	8008420 <rint+0x70>
 80083d8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80083dc:	4302      	orrs	r2, r0
 80083de:	4254      	negs	r4, r2
 80083e0:	4314      	orrs	r4, r2
 80083e2:	0c4b      	lsrs	r3, r1, #17
 80083e4:	0b24      	lsrs	r4, r4, #12
 80083e6:	045b      	lsls	r3, r3, #17
 80083e8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80083ec:	ea44 0103 	orr.w	r1, r4, r3
 80083f0:	4b32      	ldr	r3, [pc, #200]	; (80084bc <rint+0x10c>)
 80083f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80083f6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4630      	mov	r0, r6
 8008400:	4639      	mov	r1, r7
 8008402:	f7f7 fee7 	bl	80001d4 <__adddf3>
 8008406:	e9cd 0100 	strd	r0, r1, [sp]
 800840a:	463b      	mov	r3, r7
 800840c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008410:	4632      	mov	r2, r6
 8008412:	f7f7 fedd 	bl	80001d0 <__aeabi_dsub>
 8008416:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800841a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800841e:	4639      	mov	r1, r7
 8008420:	ec41 0b10 	vmov	d0, r0, r1
 8008424:	b003      	add	sp, #12
 8008426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008428:	4a25      	ldr	r2, [pc, #148]	; (80084c0 <rint+0x110>)
 800842a:	4132      	asrs	r2, r6
 800842c:	ea01 0702 	and.w	r7, r1, r2
 8008430:	4307      	orrs	r7, r0
 8008432:	d0f5      	beq.n	8008420 <rint+0x70>
 8008434:	0851      	lsrs	r1, r2, #1
 8008436:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800843a:	4314      	orrs	r4, r2
 800843c:	d00c      	beq.n	8008458 <rint+0xa8>
 800843e:	ea23 0201 	bic.w	r2, r3, r1
 8008442:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008446:	2e13      	cmp	r6, #19
 8008448:	fa43 f606 	asr.w	r6, r3, r6
 800844c:	bf0c      	ite	eq
 800844e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008452:	2400      	movne	r4, #0
 8008454:	ea42 0306 	orr.w	r3, r2, r6
 8008458:	4918      	ldr	r1, [pc, #96]	; (80084bc <rint+0x10c>)
 800845a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800845e:	4622      	mov	r2, r4
 8008460:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008464:	4620      	mov	r0, r4
 8008466:	4629      	mov	r1, r5
 8008468:	f7f7 feb4 	bl	80001d4 <__adddf3>
 800846c:	e9cd 0100 	strd	r0, r1, [sp]
 8008470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008474:	4622      	mov	r2, r4
 8008476:	462b      	mov	r3, r5
 8008478:	f7f7 feaa 	bl	80001d0 <__aeabi_dsub>
 800847c:	e7d0      	b.n	8008420 <rint+0x70>
 800847e:	2e33      	cmp	r6, #51	; 0x33
 8008480:	dd07      	ble.n	8008492 <rint+0xe2>
 8008482:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008486:	d1cb      	bne.n	8008420 <rint+0x70>
 8008488:	ee10 2a10 	vmov	r2, s0
 800848c:	f7f7 fea2 	bl	80001d4 <__adddf3>
 8008490:	e7c6      	b.n	8008420 <rint+0x70>
 8008492:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008496:	f04f 36ff 	mov.w	r6, #4294967295
 800849a:	40d6      	lsrs	r6, r2
 800849c:	4230      	tst	r0, r6
 800849e:	d0bf      	beq.n	8008420 <rint+0x70>
 80084a0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80084a4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80084a8:	bf1f      	itttt	ne
 80084aa:	ea24 0101 	bicne.w	r1, r4, r1
 80084ae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80084b2:	fa44 f202 	asrne.w	r2, r4, r2
 80084b6:	ea41 0402 	orrne.w	r4, r1, r2
 80084ba:	e7cd      	b.n	8008458 <rint+0xa8>
 80084bc:	08008818 	.word	0x08008818
 80084c0:	000fffff 	.word	0x000fffff
 80084c4:	00000000 	.word	0x00000000

080084c8 <scalbn>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	ec55 4b10 	vmov	r4, r5, d0
 80084ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80084d2:	4606      	mov	r6, r0
 80084d4:	462b      	mov	r3, r5
 80084d6:	b99a      	cbnz	r2, 8008500 <scalbn+0x38>
 80084d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80084dc:	4323      	orrs	r3, r4
 80084de:	d036      	beq.n	800854e <scalbn+0x86>
 80084e0:	4b39      	ldr	r3, [pc, #228]	; (80085c8 <scalbn+0x100>)
 80084e2:	4629      	mov	r1, r5
 80084e4:	ee10 0a10 	vmov	r0, s0
 80084e8:	2200      	movs	r2, #0
 80084ea:	f7f8 f829 	bl	8000540 <__aeabi_dmul>
 80084ee:	4b37      	ldr	r3, [pc, #220]	; (80085cc <scalbn+0x104>)
 80084f0:	429e      	cmp	r6, r3
 80084f2:	4604      	mov	r4, r0
 80084f4:	460d      	mov	r5, r1
 80084f6:	da10      	bge.n	800851a <scalbn+0x52>
 80084f8:	a32b      	add	r3, pc, #172	; (adr r3, 80085a8 <scalbn+0xe0>)
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	e03a      	b.n	8008576 <scalbn+0xae>
 8008500:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008504:	428a      	cmp	r2, r1
 8008506:	d10c      	bne.n	8008522 <scalbn+0x5a>
 8008508:	ee10 2a10 	vmov	r2, s0
 800850c:	4620      	mov	r0, r4
 800850e:	4629      	mov	r1, r5
 8008510:	f7f7 fe60 	bl	80001d4 <__adddf3>
 8008514:	4604      	mov	r4, r0
 8008516:	460d      	mov	r5, r1
 8008518:	e019      	b.n	800854e <scalbn+0x86>
 800851a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800851e:	460b      	mov	r3, r1
 8008520:	3a36      	subs	r2, #54	; 0x36
 8008522:	4432      	add	r2, r6
 8008524:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008528:	428a      	cmp	r2, r1
 800852a:	dd08      	ble.n	800853e <scalbn+0x76>
 800852c:	2d00      	cmp	r5, #0
 800852e:	a120      	add	r1, pc, #128	; (adr r1, 80085b0 <scalbn+0xe8>)
 8008530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008534:	da1c      	bge.n	8008570 <scalbn+0xa8>
 8008536:	a120      	add	r1, pc, #128	; (adr r1, 80085b8 <scalbn+0xf0>)
 8008538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800853c:	e018      	b.n	8008570 <scalbn+0xa8>
 800853e:	2a00      	cmp	r2, #0
 8008540:	dd08      	ble.n	8008554 <scalbn+0x8c>
 8008542:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008546:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800854a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800854e:	ec45 4b10 	vmov	d0, r4, r5
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008558:	da19      	bge.n	800858e <scalbn+0xc6>
 800855a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800855e:	429e      	cmp	r6, r3
 8008560:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008564:	dd0a      	ble.n	800857c <scalbn+0xb4>
 8008566:	a112      	add	r1, pc, #72	; (adr r1, 80085b0 <scalbn+0xe8>)
 8008568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1e2      	bne.n	8008536 <scalbn+0x6e>
 8008570:	a30f      	add	r3, pc, #60	; (adr r3, 80085b0 <scalbn+0xe8>)
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	f7f7 ffe3 	bl	8000540 <__aeabi_dmul>
 800857a:	e7cb      	b.n	8008514 <scalbn+0x4c>
 800857c:	a10a      	add	r1, pc, #40	; (adr r1, 80085a8 <scalbn+0xe0>)
 800857e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0b8      	beq.n	80084f8 <scalbn+0x30>
 8008586:	a10e      	add	r1, pc, #56	; (adr r1, 80085c0 <scalbn+0xf8>)
 8008588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800858c:	e7b4      	b.n	80084f8 <scalbn+0x30>
 800858e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008592:	3236      	adds	r2, #54	; 0x36
 8008594:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008598:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800859c:	4620      	mov	r0, r4
 800859e:	4b0c      	ldr	r3, [pc, #48]	; (80085d0 <scalbn+0x108>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	e7e8      	b.n	8008576 <scalbn+0xae>
 80085a4:	f3af 8000 	nop.w
 80085a8:	c2f8f359 	.word	0xc2f8f359
 80085ac:	01a56e1f 	.word	0x01a56e1f
 80085b0:	8800759c 	.word	0x8800759c
 80085b4:	7e37e43c 	.word	0x7e37e43c
 80085b8:	8800759c 	.word	0x8800759c
 80085bc:	fe37e43c 	.word	0xfe37e43c
 80085c0:	c2f8f359 	.word	0xc2f8f359
 80085c4:	81a56e1f 	.word	0x81a56e1f
 80085c8:	43500000 	.word	0x43500000
 80085cc:	ffff3cb0 	.word	0xffff3cb0
 80085d0:	3c900000 	.word	0x3c900000

080085d4 <_init>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	bf00      	nop
 80085d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085da:	bc08      	pop	{r3}
 80085dc:	469e      	mov	lr, r3
 80085de:	4770      	bx	lr

080085e0 <_fini>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr
