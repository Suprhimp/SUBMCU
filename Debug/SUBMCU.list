
SUBMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005664  08005664  00015664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800567c  0800567c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005684  08005684  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800568c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000014  080056a0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  080056a0  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013931  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f4a  00000000  00000000  00033975  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  000368c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d88  00000000  00000000  000377e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ee7  00000000  00000000  00038568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f303  00000000  00000000  0005a44f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5dfb  00000000  00000000  00069752  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f54d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c20  00000000  00000000  0012f5c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800564c 	.word	0x0800564c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800564c 	.word	0x0800564c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <GAS_Can_txSetting>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan);
//void GAS_Can_recieveMessage(CAN_HandleTypeDef *hcan);

void GAS_Can_txSetting(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	/*
	 * CAN tx set function
	 * set ID, IDE, DLC
	 */
	canTxHeader.ExtId = STM32_ID;
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <GAS_Can_txSetting+0x28>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <GAS_Can_txSetting+0x2c>)
 80004d2:	6053      	str	r3, [r2, #4]
	canTxHeader.IDE	= CAN_ID_EXT;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <GAS_Can_txSetting+0x2c>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	609a      	str	r2, [r3, #8]
	canTxHeader.RTR	= CAN_RTR_DATA;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <GAS_Can_txSetting+0x2c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]
	canTxHeader.DLC	=	8;
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <GAS_Can_txSetting+0x2c>)
 80004e2:	2208      	movs	r2, #8
 80004e4:	611a      	str	r2, [r3, #16]


}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	20000000 	.word	0x20000000
 80004f4:	2000005c 	.word	0x2000005c

080004f8 <GAS_Can_rxSetting>:

void GAS_Can_rxSetting(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	 * CAN rx set function
	 * IdHigh, IdLow for each 16bit in 29bit ID
	 * Set different FIFO and FilterBank
	 *
	 */
	sFilterConfig.FilterIdHigh = (STM32_ID2<<3)>>16;				/*first 2byte in 29bit (shift need to IED,RTR,0)*/
 80004fc:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <GAS_Can_rxSetting+0xbc>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	0c1b      	lsrs	r3, r3, #16
 8000504:	4a2c      	ldr	r2, [pc, #176]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000506:	6013      	str	r3, [r2, #0]
	sFilterConfig.FilterIdLow = (0xffff & (STM32_ID2 << 3)) | (1<<2);	/*second 2byte in 29bit + IDE (shift need to IED,RTR,0/)*/
 8000508:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <GAS_Can_rxSetting+0xbc>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	00db      	lsls	r3, r3, #3
 800050e:	b29b      	uxth	r3, r3
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	4a28      	ldr	r2, [pc, #160]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000516:	6053      	str	r3, [r2, #4]
	sFilterConfig.FilterMaskIdHigh = (0x0fffffff<<3)>>16;
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 800051a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800051e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow =(0xffff & (0x0FFFFFFF << 3)) | (1<<2);
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000522:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8000526:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000528:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank = 0;
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000530:	2200      	movs	r2, #0
 8000532:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800053a:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 800053c:	2201      	movs	r2, #1
 800053e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000540:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000542:	2201      	movs	r2, #1
 8000544:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 8000548:	220e      	movs	r2, #14
 800054a:	625a      	str	r2, [r3, #36]	; 0x24

	 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 800054c:	491a      	ldr	r1, [pc, #104]	; (80005b8 <GAS_Can_rxSetting+0xc0>)
 800054e:	481b      	ldr	r0, [pc, #108]	; (80005bc <GAS_Can_rxSetting+0xc4>)
 8000550:	f002 f89a 	bl	8002688 <HAL_CAN_ConfigFilter>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <GAS_Can_rxSetting+0x66>
	  {
	    /* Filter configuration Error */
	    Error_Handler();
 800055a:	f000 ffcb 	bl	80014f4 <Error_Handler>
	  }

	 sFilterConfig2.FilterIdHigh = 0x0000;
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
	 sFilterConfig2.FilterIdLow = (0xffff & (0x0237 << 3)) | (1<<2);
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000566:	f241 12bc 	movw	r2, #4540	; 0x11bc
 800056a:	605a      	str	r2, [r3, #4]
	 sFilterConfig2.FilterMaskIdHigh = 0x0000;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
 	 sFilterConfig2.FilterMaskIdLow = (0xffff & (0x0237 << 3)) | (1<<2);
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000574:	f241 12bc 	movw	r2, #4540	; 0x11bc
 8000578:	60da      	str	r2, [r3, #12]
	 sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO1;
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 800057c:	2201      	movs	r2, #1
 800057e:	611a      	str	r2, [r3, #16]
	 sFilterConfig2.FilterBank = 1;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000582:	2201      	movs	r2, #1
 8000584:	615a      	str	r2, [r3, #20]
	 sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
	 sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 800058e:	2201      	movs	r2, #1
 8000590:	61da      	str	r2, [r3, #28]
	 sFilterConfig2.FilterActivation = ENABLE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 8000594:	2201      	movs	r2, #1
 8000596:	621a      	str	r2, [r3, #32]
	 sFilterConfig2.SlaveStartFilterBank = 15;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 800059a:	220f      	movs	r2, #15
 800059c:	625a      	str	r2, [r3, #36]	; 0x24

	 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 800059e:	4908      	ldr	r1, [pc, #32]	; (80005c0 <GAS_Can_rxSetting+0xc8>)
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <GAS_Can_rxSetting+0xc4>)
 80005a2:	f002 f871 	bl	8002688 <HAL_CAN_ConfigFilter>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <GAS_Can_rxSetting+0xb8>
	 {
	     /* Filter configuration Error */
	     Error_Handler();
 80005ac:	f000 ffa2 	bl	80014f4 <Error_Handler>
	 }
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000004 	.word	0x20000004
 80005b8:	20000034 	.word	0x20000034
 80005bc:	20000274 	.word	0x20000274
 80005c0:	200000b4 	.word	0x200000b4

080005c4 <GAS_Can_init>:

void GAS_Can_init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	/*
	 * GAS_CAN_init
	 * ActiveNotification for Rx message pending
	 */
	GAS_Can_txSetting();
 80005c8:	f7ff ff7e 	bl	80004c8 <GAS_Can_txSetting>
	GAS_Can_rxSetting();
 80005cc:	f7ff ff94 	bl	80004f8 <GAS_Can_rxSetting>
	HAL_CAN_Start(&hcan2);
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <GAS_Can_init+0x3c>)
 80005d2:	f002 f939 	bl	8002848 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005d6:	2102      	movs	r1, #2
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <GAS_Can_init+0x3c>)
 80005da:	f002 fb9b 	bl	8002d14 <HAL_CAN_ActivateNotification>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <GAS_Can_init+0x24>
	{
	  Error_Handler();
 80005e4:	f000 ff86 	bl	80014f4 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80005e8:	2110      	movs	r1, #16
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <GAS_Can_init+0x3c>)
 80005ec:	f002 fb92 	bl	8002d14 <HAL_CAN_ActivateNotification>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <GAS_Can_init+0x36>
	{
	  Error_Handler();
 80005f6:	f000 ff7d 	bl	80014f4 <Error_Handler>
	}


}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000274 	.word	0x20000274

08000604 <GAS_Can_sendMessage>:

void GAS_Can_sendMessage(uint16_t Encoder1, uint16_t Encoder2)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	460a      	mov	r2, r1
 800060e:	80fb      	strh	r3, [r7, #6]
 8000610:	4613      	mov	r3, r2
 8000612:	80bb      	strh	r3, [r7, #4]
	/*
	 * CAN send message function
	 * send Message data with sendData[8]
	 */
//	memmove(sendData, stm32_1.TxData, sizeof(uint8_t) * 8);
	stm32_1.B.sensor0 = Encoder1;
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <GAS_Can_sendMessage+0x88>)
 800061e:	b2d1      	uxtb	r1, r2
 8000620:	2000      	movs	r0, #0
 8000622:	4301      	orrs	r1, r0
 8000624:	7019      	strb	r1, [r3, #0]
 8000626:	0a12      	lsrs	r2, r2, #8
 8000628:	b292      	uxth	r2, r2
 800062a:	f002 020f 	and.w	r2, r2, #15
 800062e:	f002 000f 	and.w	r0, r2, #15
 8000632:	785a      	ldrb	r2, [r3, #1]
 8000634:	f022 020f 	bic.w	r2, r2, #15
 8000638:	4611      	mov	r1, r2
 800063a:	4602      	mov	r2, r0
 800063c:	430a      	orrs	r2, r1
 800063e:	705a      	strb	r2, [r3, #1]
	stm32_1.B.sensor1 = Encoder2;
 8000640:	88bb      	ldrh	r3, [r7, #4]
 8000642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <GAS_Can_sendMessage+0x88>)
 800064a:	f002 010f 	and.w	r1, r2, #15
 800064e:	010c      	lsls	r4, r1, #4
 8000650:	7859      	ldrb	r1, [r3, #1]
 8000652:	f001 010f 	and.w	r1, r1, #15
 8000656:	4608      	mov	r0, r1
 8000658:	4621      	mov	r1, r4
 800065a:	4301      	orrs	r1, r0
 800065c:	7059      	strb	r1, [r3, #1]
 800065e:	0912      	lsrs	r2, r2, #4
 8000660:	b292      	uxth	r2, r2
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	2100      	movs	r1, #0
 8000666:	430a      	orrs	r2, r1
 8000668:	709a      	strb	r2, [r3, #2]
	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 800066a:	4809      	ldr	r0, [pc, #36]	; (8000690 <GAS_Can_sendMessage+0x8c>)
 800066c:	f002 fa0b 	bl	8002a86 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000670:	4602      	mov	r2, r0
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <GAS_Can_sendMessage+0x90>)
 8000674:	601a      	str	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, &stm32_1.TxData[0], &TxMailBox);
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <GAS_Can_sendMessage+0x90>)
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <GAS_Can_sendMessage+0x88>)
 800067a:	4907      	ldr	r1, [pc, #28]	; (8000698 <GAS_Can_sendMessage+0x94>)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <GAS_Can_sendMessage+0x8c>)
 800067e:	f002 f927 	bl	80028d0 <HAL_CAN_AddTxMessage>
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bd90      	pop	{r4, r7, pc}
 800068a:	bf00      	nop
 800068c:	20000074 	.word	0x20000074
 8000690:	20000274 	.word	0x20000274
 8000694:	20000084 	.word	0x20000084
 8000698:	2000005c 	.word	0x2000005c

0800069c <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	/*
	 * CAN recieve data interrupt function
	 * Check Instance then recieve data in stm32_2.RxData
	 */
	if(hcan->Instance == CAN2)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d105      	bne.n	80006ba <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, stm32_2.RxData);
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f002 fa1b 	bl	8002af0 <HAL_CAN_GetRxMessage>

	}
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40006800 	.word	0x40006800
 80006c8:	200000ac 	.word	0x200000ac
 80006cc:	20000090 	.word	0x20000090

080006d0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	/*
	* CAN recieve data interrupt function
	* Check Instance then recieve data in stm32_2.RxData
	*/
	if(hcan->Instance == CAN2)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d105      	bne.n	80006ee <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &canRxHeader, TC237.RxData);
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 80006e6:	2101      	movs	r1, #1
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f002 fa01 	bl	8002af0 <HAL_CAN_GetRxMessage>

	}
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40006800 	.word	0x40006800
 80006fc:	2000007c 	.word	0x2000007c
 8000700:	20000090 	.word	0x20000090

08000704 <GAS_PWM_inputInit>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);
void GAS_PWM_changeOutput_ch1(uint16_t input);
void GAS_PWM_Check(TIM_HandleTypeDef *htim, pwmIn_t *pwmIn);

void GAS_PWM_inputInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 8000708:	2100      	movs	r1, #0
 800070a:	480c      	ldr	r0, [pc, #48]	; (800073c <GAS_PWM_inputInit+0x38>)
 800070c:	f004 f860 	bl	80047d0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8000710:	2104      	movs	r1, #4
 8000712:	480a      	ldr	r0, [pc, #40]	; (800073c <GAS_PWM_inputInit+0x38>)
 8000714:	f004 f85c 	bl	80047d0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000718:	2100      	movs	r1, #0
 800071a:	4809      	ldr	r0, [pc, #36]	; (8000740 <GAS_PWM_inputInit+0x3c>)
 800071c:	f004 f858 	bl	80047d0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000720:	2104      	movs	r1, #4
 8000722:	4807      	ldr	r0, [pc, #28]	; (8000740 <GAS_PWM_inputInit+0x3c>)
 8000724:	f004 f854 	bl	80047d0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000728:	2100      	movs	r1, #0
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <GAS_PWM_inputInit+0x40>)
 800072c:	f004 f850 	bl	80047d0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000730:	2104      	movs	r1, #4
 8000732:	4804      	ldr	r0, [pc, #16]	; (8000744 <GAS_PWM_inputInit+0x40>)
 8000734:	f004 f84c 	bl	80047d0 <HAL_TIM_IC_Start_IT>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200002b8 	.word	0x200002b8
 8000740:	20000378 	.word	0x20000378
 8000744:	200002f8 	.word	0x200002f8

08000748 <HAL_TIM_IC_CaptureCallback>:
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);

}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	 * For PWM input function
	 * One PWM input per one htim channel(because of TIM counter)
	 * Period, width, duty cycle, frequency can be calculated.
	 */

	if(htim ->Instance == TIM8)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d106      	bne.n	8000768 <HAL_TIM_IC_CaptureCallback+0x20>
	{
		GAS_PWM_Check(htim, &pwmIn1);
 800075a:	4912      	ldr	r1, [pc, #72]	; (80007a4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f82d 	bl	80007bc <GAS_PWM_Check>
		pwmChangeFlag = 1;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
	}
	if(htim ->Instance == TIM1){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0f      	ldr	r2, [pc, #60]	; (80007ac <HAL_TIM_IC_CaptureCallback+0x64>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d106      	bne.n	8000780 <HAL_TIM_IC_CaptureCallback+0x38>
		GAS_PWM_Check(htim, &pwmIn2);
 8000772:	490f      	ldr	r1, [pc, #60]	; (80007b0 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 f821 	bl	80007bc <GAS_PWM_Check>
		pwmChangeFlag = 1;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
	}
	if(htim ->Instance == TIM4){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <HAL_TIM_IC_CaptureCallback+0x50>
		GAS_PWM_Check2(htim, &pwmIn3);
 800078a:	490b      	ldr	r1, [pc, #44]	; (80007b8 <HAL_TIM_IC_CaptureCallback+0x70>)
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 f85d 	bl	800084c <GAS_PWM_Check2>
		pwmChangeFlag = 1;
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
	}
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40010400 	.word	0x40010400
 80007a4:	200000dc 	.word	0x200000dc
 80007a8:	20000030 	.word	0x20000030
 80007ac:	40010000 	.word	0x40010000
 80007b0:	20000114 	.word	0x20000114
 80007b4:	40000800 	.word	0x40000800
 80007b8:	200000f8 	.word	0x200000f8

080007bc <GAS_PWM_Check>:
	 * Change duty cycle by changing register CCR directly
	 */
	TIM1->CCR1=input/10;
}

void GAS_PWM_Check(TIM_HandleTypeDef *htim, pwmIn_t *pwmIn){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]

			if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	7f1b      	ldrb	r3, [r3, #28]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d10e      	bne.n	80007ec <GAS_PWM_Check+0x30>
			{
				pwmIn->RisingEdgeValue = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 80007ce:	2100      	movs	r1, #0
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f004 fb03 	bl	8004ddc <HAL_TIM_ReadCapturedValue>
 80007d6:	4602      	mov	r2, r0
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	601a      	str	r2, [r3, #0]
				TIM1->CNT = 0;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <GAS_PWM_Check+0x88>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
				pwmIn->Period=pwmIn->RisingEdgeValue;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	609a      	str	r2, [r3, #8]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime)/(SeraMaxWidth-SeraRisingTime));
				if(pwmIn->angle>=3600)pwmIn->angle=0;

			}

}
 80007ea:	e026      	b.n	800083a <GAS_PWM_Check+0x7e>
			else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7f1b      	ldrb	r3, [r3, #28]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d122      	bne.n	800083a <GAS_PWM_Check+0x7e>
				pwmIn->FallingEdgeValue=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80007f4:	2104      	movs	r1, #4
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f004 faf0 	bl	8004ddc <HAL_TIM_ReadCapturedValue>
 80007fc:	4602      	mov	r2, r0
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	605a      	str	r2, [r3, #4]
				pwmIn->Width=pwmIn->FallingEdgeValue;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	60da      	str	r2, [r3, #12]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime)/(SeraMaxWidth-SeraRisingTime));
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000812:	fb02 f303 	mul.w	r3, r2, r3
 8000816:	f5a3 2368 	sub.w	r3, r3, #950272	; 0xe8000
 800081a:	f5a3 6369 	sub.w	r3, r3, #3728	; 0xe90
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <GAS_PWM_Check+0x8c>)
 8000820:	fba2 2303 	umull	r2, r3, r2, r3
 8000824:	09da      	lsrs	r2, r3, #7
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	619a      	str	r2, [r3, #24]
				if(pwmIn->angle>=3600)pwmIn->angle=0;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000832:	d302      	bcc.n	800083a <GAS_PWM_Check+0x7e>
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010000 	.word	0x40010000
 8000848:	04101fff 	.word	0x04101fff

0800084c <GAS_PWM_Check2>:

void GAS_PWM_Check2(TIM_HandleTypeDef *htim, pwmIn_t *pwmIn){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]

			if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	7f1b      	ldrb	r3, [r3, #28]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d10e      	bne.n	800087c <GAS_PWM_Check2+0x30>
			{
				pwmIn->RisingEdgeValue = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 800085e:	2100      	movs	r1, #0
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f004 fabb 	bl	8004ddc <HAL_TIM_ReadCapturedValue>
 8000866:	4602      	mov	r2, r0
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	601a      	str	r2, [r3, #0]
				TIM1->CNT = 0;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <GAS_PWM_Check2+0x8c>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
				pwmIn->Period=pwmIn->RisingEdgeValue;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	609a      	str	r2, [r3, #8]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime2)/(SeraMaxWidth2-SeraRisingTime2));
				if(pwmIn->angle>=3600)pwmIn->angle=0;

			}

}
 800087a:	e029      	b.n	80008d0 <GAS_PWM_Check2+0x84>
			else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7f1b      	ldrb	r3, [r3, #28]
 8000880:	2b02      	cmp	r3, #2
 8000882:	d125      	bne.n	80008d0 <GAS_PWM_Check2+0x84>
				pwmIn->FallingEdgeValue=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000884:	2104      	movs	r1, #4
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f004 faa8 	bl	8004ddc <HAL_TIM_ReadCapturedValue>
 800088c:	4602      	mov	r2, r0
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	605a      	str	r2, [r3, #4]
				pwmIn->Width=pwmIn->FallingEdgeValue;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	60da      	str	r2, [r3, #12]
				pwmIn->angle = (3600*(pwmIn->Width-SeraRisingTime2)/(SeraMaxWidth2-SeraRisingTime2));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	f5a3 23e9 	sub.w	r3, r3, #477184	; 0x74800
 80008aa:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <GAS_PWM_Check2+0x90>)
 80008b0:	fba2 1203 	umull	r1, r2, r2, r3
 80008b4:	1a9b      	subs	r3, r3, r2
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	0ada      	lsrs	r2, r3, #11
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	619a      	str	r2, [r3, #24]
				if(pwmIn->angle>=3600)pwmIn->angle=0;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80008c8:	d302      	bcc.n	80008d0 <GAS_PWM_Check2+0x84>
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40010000 	.word	0x40010000
 80008dc:	0420c521 	.word	0x0420c521

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000944:	d301      	bcc.n	800094a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000946:	2301      	movs	r3, #1
 8000948:	e00f      	b.n	800096a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <SysTick_Config+0x40>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000952:	210f      	movs	r1, #15
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f7ff ffc2 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <SysTick_Config+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <SysTick_Config+0x40>)
 8000964:	2207      	movs	r2, #7
 8000966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	e000e010 	.word	0xe000e010

08000978 <GAS_Scheduler_init>:
void GAS_Scheduler_taskCounter_1000ms(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void GAS_Schduler(void);

void GAS_Scheduler_init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <GAS_Scheduler_init+0x34>)
 800097e:	f003 fecd 	bl	800471c <HAL_TIM_Base_Start_IT>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <GAS_Scheduler_init+0x14>
	  {
		  Error_Handler();
 8000988:	f000 fdb4 	bl	80014f4 <Error_Handler>
	  }
	SysTick_Config(SystemCoreClock/1000);
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <GAS_Scheduler_init+0x38>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <GAS_Scheduler_init+0x3c>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	099b      	lsrs	r3, r3, #6
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ffcb 	bl	8000934 <SysTick_Config>

//********CAN initialization********
	GAS_Can_init();
 800099e:	f7ff fe11 	bl	80005c4 <GAS_Can_init>

//********PWM initialization********
	GAS_PWM_inputInit();
 80009a2:	f7ff feaf 	bl	8000704 <GAS_PWM_inputInit>
//	GAS_PWM_outputInit();

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000338 	.word	0x20000338
 80009b0:	20000008 	.word	0x20000008
 80009b4:	10624dd3 	.word	0x10624dd3

080009b8 <GAS_Scheduler_taskCounter_1ms>:



void GAS_Scheduler_taskCounter_1ms(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
//	GAS_Vadc_dmaIn();
//	GAS_Vadc_getValue();


//	GAS_PWM_changeOutput_ch1(ValueOfADC[0]);
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <GAS_Scheduler_taskCounter_10ms>:

void GAS_Scheduler_taskCounter_10ms(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
//	GAS_Can_sendMessage();
	if (pwmChangeFlag){
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <GAS_Scheduler_taskCounter_10ms+0x2c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d00c      	beq.n	80009f0 <GAS_Scheduler_taskCounter_10ms+0x28>
		GAS_Can_sendMessage(pwmIn1.angle,pwmIn2.angle);
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <GAS_Scheduler_taskCounter_10ms+0x30>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <GAS_Scheduler_taskCounter_10ms+0x34>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	4619      	mov	r1, r3
 80009e4:	4610      	mov	r0, r2
 80009e6:	f7ff fe0d 	bl	8000604 <GAS_Can_sendMessage>
		pwmChangeFlag = False;
 80009ea:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <GAS_Scheduler_taskCounter_10ms+0x2c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
	}
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000030 	.word	0x20000030
 80009f8:	200000dc 	.word	0x200000dc
 80009fc:	20000114 	.word	0x20000114

08000a00 <GAS_Scheduler_taskCounter_100ms>:

void GAS_Scheduler_taskCounter_100ms(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <GAS_Scheduler_taskCounter_1000ms>:
void GAS_Scheduler_taskCounter_1000ms(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
	gTimerCnt++;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <HAL_SYSTICK_Callback+0x7c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <HAL_SYSTICK_Callback+0x7c>)
 8000a28:	6013      	str	r3, [r2, #0]
			gTask.flag_1ms=True;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <HAL_SYSTICK_Callback+0x80>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
			if(gTimerCnt % 10 == 0)
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <HAL_SYSTICK_Callback+0x7c>)
 8000a32:	6819      	ldr	r1, [r3, #0]
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <HAL_SYSTICK_Callback+0x84>)
 8000a36:	fb83 2301 	smull	r2, r3, r3, r1
 8000a3a:	109a      	asrs	r2, r3, #2
 8000a3c:	17cb      	asrs	r3, r1, #31
 8000a3e:	1ad2      	subs	r2, r2, r3
 8000a40:	4613      	mov	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	1aca      	subs	r2, r1, r3
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	d102      	bne.n	8000a54 <HAL_SYSTICK_Callback+0x38>
			{
				gTask.flag_10ms=True;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <HAL_SYSTICK_Callback+0x80>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	705a      	strb	r2, [r3, #1]
			}
			if(gTimerCnt % 100 == 0)
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_SYSTICK_Callback+0x7c>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_SYSTICK_Callback+0x88>)
 8000a5a:	fb83 1302 	smull	r1, r3, r3, r2
 8000a5e:	1159      	asrs	r1, r3, #5
 8000a60:	17d3      	asrs	r3, r2, #31
 8000a62:	1acb      	subs	r3, r1, r3
 8000a64:	2164      	movs	r1, #100	; 0x64
 8000a66:	fb01 f303 	mul.w	r3, r1, r3
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <HAL_SYSTICK_Callback+0x5a>
			{
				gTask.flag_100ms=True;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_SYSTICK_Callback+0x80>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	709a      	strb	r2, [r3, #2]
			}

			if(gTimerCnt == 1000)
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_SYSTICK_Callback+0x7c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a7e:	d105      	bne.n	8000a8c <HAL_SYSTICK_Callback+0x70>
			{
				gTask.flag_1000ms=True;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_SYSTICK_Callback+0x80>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	70da      	strb	r2, [r3, #3]
				gTimerCnt = 0;
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <HAL_SYSTICK_Callback+0x7c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
			}
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000138 	.word	0x20000138
 8000a9c:	20000130 	.word	0x20000130
 8000aa0:	66666667 	.word	0x66666667
 8000aa4:	51eb851f 	.word	0x51eb851f

08000aa8 <GAS_Scheduler>:
//		gTimerCnt = 0;
//	}
//}

void GAS_Scheduler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0


	if(gTask.flag_1ms == True)
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <GAS_Scheduler+0x58>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d104      	bne.n	8000ac0 <GAS_Scheduler+0x18>
	{
		gTask.flag_1ms = False;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <GAS_Scheduler+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
		GAS_Scheduler_taskCounter_1ms();
 8000abc:	f7ff ff7c 	bl	80009b8 <GAS_Scheduler_taskCounter_1ms>
	}

	if(gTask.flag_10ms == True)
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <GAS_Scheduler+0x58>)
 8000ac2:	785b      	ldrb	r3, [r3, #1]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d104      	bne.n	8000ad4 <GAS_Scheduler+0x2c>
	{
		gTask.flag_10ms = False;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <GAS_Scheduler+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	705a      	strb	r2, [r3, #1]
		GAS_Scheduler_taskCounter_10ms();
 8000ad0:	f7ff ff7a 	bl	80009c8 <GAS_Scheduler_taskCounter_10ms>
	}

	if(gTask.flag_100ms == True)
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <GAS_Scheduler+0x58>)
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d104      	bne.n	8000ae8 <GAS_Scheduler+0x40>
	{
		gTask.flag_100ms = False;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <GAS_Scheduler+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	709a      	strb	r2, [r3, #2]
		GAS_Scheduler_taskCounter_100ms();
 8000ae4:	f7ff ff8c 	bl	8000a00 <GAS_Scheduler_taskCounter_100ms>
	}

	if(gTask.flag_1000ms == True)
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <GAS_Scheduler+0x58>)
 8000aea:	78db      	ldrb	r3, [r3, #3]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d104      	bne.n	8000afc <GAS_Scheduler+0x54>
	{
		gTask.flag_1000ms = False;
 8000af2:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <GAS_Scheduler+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	70da      	strb	r2, [r3, #3]
		GAS_Scheduler_taskCounter_1000ms();
 8000af8:	f7ff ff89 	bl	8000a0e <GAS_Scheduler_taskCounter_1000ms>
	}

//	GAS_Can_recieveMessage(&hcan);
//	HAL_CAN_IRQHandler(&hcan);
//	  pin_state=HAL_GPIO_ReadPin(GPIO_PIN_8);
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000130 	.word	0x20000130

08000b04 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b18:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <MX_ADC1_Init+0x9c>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <MX_ADC1_Init+0xa0>)
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b66:	f001 fa31 	bl	8001fcc <HAL_ADC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b70:	f000 fcc0 	bl	80014f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_ADC1_Init+0x98>)
 8000b86:	f001 fa65 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b90:	f000 fcb0 	bl	80014f4 <Error_Handler>
  }

}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000184 	.word	0x20000184
 8000ba0:	40012000 	.word	0x40012000
 8000ba4:	0f000001 	.word	0x0f000001

08000ba8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bbc:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <MX_ADC2_Init+0x9c>)
 8000bbe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bc6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bea:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <MX_ADC2_Init+0xa0>)
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000c0a:	f001 f9df 	bl	8001fcc <HAL_ADC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000c14:	f000 fc6e 	bl	80014f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c18:	2305      	movs	r3, #5
 8000c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c24:	463b      	mov	r3, r7
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000c2a:	f001 fa13 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000c34:	f000 fc5e 	bl	80014f4 <Error_Handler>
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000013c 	.word	0x2000013c
 8000c44:	40012100 	.word	0x40012100
 8000c48:	0f000001 	.word	0x0f000001

08000c4c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <MX_ADC3_Init+0x9c>)
 8000c62:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000c66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c6a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <MX_ADC3_Init+0xa0>)
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000cae:	f001 f98d 	bl	8001fcc <HAL_ADC_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000cb8:	f000 fc1c 	bl	80014f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_ADC3_Init+0x98>)
 8000cce:	f001 f9c1 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000cd8:	f000 fc0c 	bl	80014f4 <Error_Handler>
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200001cc 	.word	0x200001cc
 8000ce8:	40012200 	.word	0x40012200
 8000cec:	0f000001 	.word	0x0f000001

08000cf0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b092      	sub	sp, #72	; 0x48
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a91      	ldr	r2, [pc, #580]	; (8000f54 <HAL_ADC_MspInit+0x264>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	f040 808d 	bne.w	8000e2e <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
 8000d18:	4b8f      	ldr	r3, [pc, #572]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1c:	4a8e      	ldr	r2, [pc, #568]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6453      	str	r3, [r2, #68]	; 0x44
 8000d24:	4b8c      	ldr	r3, [pc, #560]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8000d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d34:	4b88      	ldr	r3, [pc, #544]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a87      	ldr	r2, [pc, #540]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b85      	ldr	r3, [pc, #532]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d50:	4b81      	ldr	r3, [pc, #516]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a80      	ldr	r2, [pc, #512]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5c:	4b7e      	ldr	r3, [pc, #504]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6c:	4b7a      	ldr	r3, [pc, #488]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a79      	ldr	r2, [pc, #484]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b77      	ldr	r3, [pc, #476]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d84:	233f      	movs	r3, #63	; 0x3f
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d94:	4619      	mov	r1, r3
 8000d96:	4871      	ldr	r0, [pc, #452]	; (8000f5c <HAL_ADC_MspInit+0x26c>)
 8000d98:	f002 fe8c 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000d9c:	23fe      	movs	r3, #254	; 0xfe
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da0:	2303      	movs	r3, #3
 8000da2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dac:	4619      	mov	r1, r3
 8000dae:	486c      	ldr	r0, [pc, #432]	; (8000f60 <HAL_ADC_MspInit+0x270>)
 8000db0:	f002 fe80 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000db4:	2302      	movs	r3, #2
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db8:	2303      	movs	r3, #3
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4867      	ldr	r0, [pc, #412]	; (8000f64 <HAL_ADC_MspInit+0x274>)
 8000dc8:	f002 fe74 	bl	8003ab4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dcc:	4b66      	ldr	r3, [pc, #408]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000dce:	4a67      	ldr	r2, [pc, #412]	; (8000f6c <HAL_ADC_MspInit+0x27c>)
 8000dd0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dd2:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dd8:	4b63      	ldr	r3, [pc, #396]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dde:	4b62      	ldr	r3, [pc, #392]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000de4:	4b60      	ldr	r3, [pc, #384]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000de6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dec:	4b5e      	ldr	r3, [pc, #376]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000dee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000df2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000df4:	4b5c      	ldr	r3, [pc, #368]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dfa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dfc:	4b5a      	ldr	r3, [pc, #360]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e02:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e04:	4b58      	ldr	r3, [pc, #352]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e0a:	4b57      	ldr	r3, [pc, #348]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e10:	4855      	ldr	r0, [pc, #340]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000e12:	f002 fb67 	bl	80034e4 <HAL_DMA_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000e1c:	f000 fb6a 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a51      	ldr	r2, [pc, #324]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000e24:	639a      	str	r2, [r3, #56]	; 0x38
 8000e26:	4a50      	ldr	r2, [pc, #320]	; (8000f68 <HAL_ADC_MspInit+0x278>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000e2c:	e08e      	b.n	8000f4c <HAL_ADC_MspInit+0x25c>
  else if(adcHandle->Instance==ADC2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a4f      	ldr	r2, [pc, #316]	; (8000f70 <HAL_ADC_MspInit+0x280>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d142      	bne.n	8000ebe <HAL_ADC_MspInit+0x1ce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	4b46      	ldr	r3, [pc, #280]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	4a45      	ldr	r2, [pc, #276]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e46:	6453      	str	r3, [r2, #68]	; 0x44
 8000e48:	4b43      	ldr	r3, [pc, #268]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e50:	623b      	str	r3, [r7, #32]
 8000e52:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a3e      	ldr	r2, [pc, #248]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	4b38      	ldr	r3, [pc, #224]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a37      	ldr	r2, [pc, #220]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e90:	2303      	movs	r3, #3
 8000e92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	482f      	ldr	r0, [pc, #188]	; (8000f5c <HAL_ADC_MspInit+0x26c>)
 8000ea0:	f002 fe08 	bl	8003ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000ea4:	233e      	movs	r3, #62	; 0x3e
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	482a      	ldr	r0, [pc, #168]	; (8000f60 <HAL_ADC_MspInit+0x270>)
 8000eb8:	f002 fdfc 	bl	8003ab4 <HAL_GPIO_Init>
}
 8000ebc:	e046      	b.n	8000f4c <HAL_ADC_MspInit+0x25c>
  else if(adcHandle->Instance==ADC3)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a2c      	ldr	r2, [pc, #176]	; (8000f74 <HAL_ADC_MspInit+0x284>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d141      	bne.n	8000f4c <HAL_ADC_MspInit+0x25c>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed0:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	4a1a      	ldr	r2, [pc, #104]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_ADC_MspInit+0x268>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f20:	2303      	movs	r3, #3
 8000f22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <HAL_ADC_MspInit+0x26c>)
 8000f30:	f002 fdc0 	bl	8003ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f34:	230e      	movs	r3, #14
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f44:	4619      	mov	r1, r3
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <HAL_ADC_MspInit+0x270>)
 8000f48:	f002 fdb4 	bl	8003ab4 <HAL_GPIO_Init>
}
 8000f4c:	bf00      	nop
 8000f4e:	3748      	adds	r7, #72	; 0x48
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40012000 	.word	0x40012000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	20000214 	.word	0x20000214
 8000f6c:	40026410 	.word	0x40026410
 8000f70:	40012100 	.word	0x40012100
 8000f74:	40012200 	.word	0x40012200

08000f78 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000f7e:	4a18      	ldr	r2, [pc, #96]	; (8000fe0 <MX_CAN2_Init+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000f96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f9a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000f9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fa2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_CAN2_Init+0x64>)
 8000fca:	f001 fa61 	bl	8002490 <HAL_CAN_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000fd4:	f000 fa8e 	bl	80014f4 <Error_Handler>
  }

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000274 	.word	0x20000274
 8000fe0:	40006800 	.word	0x40006800

08000fe4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <HAL_CAN_MspInit+0xc0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d14a      	bne.n	800109c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <HAL_CAN_MspInit+0xc4>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <HAL_CAN_MspInit+0xc4>)
 8001010:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <HAL_CAN_MspInit+0xc4>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <HAL_CAN_MspInit+0xc4>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <HAL_CAN_MspInit+0xc4>)
 800102c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_CAN_MspInit+0xc4>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_CAN_MspInit+0xc4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <HAL_CAN_MspInit+0xc4>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_CAN_MspInit+0xc4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800105a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800106c:	2309      	movs	r3, #9
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <HAL_CAN_MspInit+0xc8>)
 8001078:	f002 fd1c 	bl	8003ab4 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2040      	movs	r0, #64	; 0x40
 8001082:	f002 f968 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001086:	2040      	movs	r0, #64	; 0x40
 8001088:	f002 f981 	bl	800338e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	2041      	movs	r0, #65	; 0x41
 8001092:	f002 f960 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001096:	2041      	movs	r0, #65	; 0x41
 8001098:	f002 f979 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40006800 	.word	0x40006800
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400

080010b0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_CRC_Init+0x20>)
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <MX_CRC_Init+0x24>)
 80010b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_CRC_Init+0x20>)
 80010bc:	f002 f987 	bl	80033ce <HAL_CRC_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80010c6:	f000 fa15 	bl	80014f4 <Error_Handler>
  }

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000029c 	.word	0x2000029c
 80010d4:	40023000 	.word	0x40023000

080010d8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_CRC_MspInit+0x3c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10d      	bne.n	8001106 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_CRC_MspInit+0x40>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <HAL_CRC_MspInit+0x40>)
 80010f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <HAL_CRC_MspInit+0x40>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023000 	.word	0x40023000
 8001118:	40023800 	.word	0x40023800

0800111c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_DAC_Init+0x4c>)
 800112c:	4a0f      	ldr	r2, [pc, #60]	; (800116c <MX_DAC_Init+0x50>)
 800112e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_DAC_Init+0x4c>)
 8001132:	f002 f968 	bl	8003406 <HAL_DAC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800113c:	f000 f9da 	bl	80014f4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_DAC_Init+0x4c>)
 8001150:	f002 f97b 	bl	800344a <HAL_DAC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800115a:	f000 f9cb 	bl	80014f4 <Error_Handler>
  }

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200002a4 	.word	0x200002a4
 800116c:	40007400 	.word	0x40007400

08001170 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_DAC_MspInit+0x7c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d127      	bne.n	80011e2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 800119c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011ca:	2310      	movs	r3, #16
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ce:	2303      	movs	r3, #3
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_DAC_MspInit+0x84>)
 80011de:	f002 fc69 	bl	8003ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40007400 	.word	0x40007400
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020000 	.word	0x40020000

080011f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_DMA_Init+0x3c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <MX_DMA_Init+0x3c>)
 8001208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_DMA_Init+0x3c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2038      	movs	r0, #56	; 0x38
 8001220:	f002 f899 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001224:	2038      	movs	r0, #56	; 0x38
 8001226:	f002 f8b2 	bl	800338e <HAL_NVIC_EnableIRQ>

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <MX_GPIO_Init>:
     PC12   ------> SPI3_MOSI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <MX_GPIO_Init+0x184>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a59      	ldr	r2, [pc, #356]	; (80013bc <MX_GPIO_Init+0x184>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b57      	ldr	r3, [pc, #348]	; (80013bc <MX_GPIO_Init+0x184>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b53      	ldr	r3, [pc, #332]	; (80013bc <MX_GPIO_Init+0x184>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a52      	ldr	r2, [pc, #328]	; (80013bc <MX_GPIO_Init+0x184>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b50      	ldr	r3, [pc, #320]	; (80013bc <MX_GPIO_Init+0x184>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <MX_GPIO_Init+0x184>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a4b      	ldr	r2, [pc, #300]	; (80013bc <MX_GPIO_Init+0x184>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b49      	ldr	r3, [pc, #292]	; (80013bc <MX_GPIO_Init+0x184>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b45      	ldr	r3, [pc, #276]	; (80013bc <MX_GPIO_Init+0x184>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a44      	ldr	r2, [pc, #272]	; (80013bc <MX_GPIO_Init+0x184>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b42      	ldr	r3, [pc, #264]	; (80013bc <MX_GPIO_Init+0x184>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <MX_GPIO_Init+0x184>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a3d      	ldr	r2, [pc, #244]	; (80013bc <MX_GPIO_Init+0x184>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <MX_GPIO_Init+0x184>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e0:	4837      	ldr	r0, [pc, #220]	; (80013c0 <MX_GPIO_Init+0x188>)
 80012e2:	f002 fd81 	bl	8003de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2104      	movs	r1, #4
 80012ea:	4836      	ldr	r0, [pc, #216]	; (80013c4 <MX_GPIO_Init+0x18c>)
 80012ec:	f002 fd7c 	bl	8003de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	482d      	ldr	r0, [pc, #180]	; (80013c0 <MX_GPIO_Init+0x188>)
 800130a:	f002 fbd3 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800130e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001320:	2301      	movs	r3, #1
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4825      	ldr	r0, [pc, #148]	; (80013c0 <MX_GPIO_Init+0x188>)
 800132c:	f002 fbc2 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001342:	2306      	movs	r3, #6
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	481e      	ldr	r0, [pc, #120]	; (80013c8 <MX_GPIO_Init+0x190>)
 800134e:	f002 fbb1 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001352:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001364:	2306      	movs	r3, #6
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4817      	ldr	r0, [pc, #92]	; (80013cc <MX_GPIO_Init+0x194>)
 8001370:	f002 fba0 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001374:	2304      	movs	r3, #4
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	480e      	ldr	r0, [pc, #56]	; (80013c4 <MX_GPIO_Init+0x18c>)
 800138c:	f002 fb92 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001390:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001396:	2312      	movs	r3, #18
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139a:	2301      	movs	r3, #1
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013a2:	2304      	movs	r3, #4
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_GPIO_Init+0x188>)
 80013ae:	f002 fb81 	bl	8003ab4 <HAL_GPIO_Init>

}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020800 	.word	0x40020800

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d4:	f000 fd88 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d8:	f000 f820 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013dc:	f7ff ff2c 	bl	8001238 <MX_GPIO_Init>
  MX_DMA_Init();
 80013e0:	f7ff ff0a 	bl	80011f8 <MX_DMA_Init>
  MX_ADC1_Init();
 80013e4:	f7ff fb8e 	bl	8000b04 <MX_ADC1_Init>
  MX_ADC2_Init();
 80013e8:	f7ff fbde 	bl	8000ba8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80013ec:	f7ff fc2e 	bl	8000c4c <MX_ADC3_Init>
  MX_CAN2_Init();
 80013f0:	f7ff fdc2 	bl	8000f78 <MX_CAN2_Init>
  MX_DAC_Init();
 80013f4:	f7ff fe92 	bl	800111c <MX_DAC_Init>
  MX_CRC_Init();
 80013f8:	f7ff fe5a 	bl	80010b0 <MX_CRC_Init>
  MX_TIM1_Init();
 80013fc:	f000 f926 	bl	800164c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001400:	f000 f9c4 	bl	800178c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001404:	f000 fae8 	bl	80019d8 <MX_TIM8_Init>
  MX_TIM4_Init();
 8001408:	f000 fa4a 	bl	80018a0 <MX_TIM4_Init>
  MX_TIM12_Init();
 800140c:	f000 fb84 	bl	8001b18 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  GAS_Scheduler_init();
 8001410:	f7ff fab2 	bl	8000978 <GAS_Scheduler_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 GAS_Scheduler();
 8001414:	f7ff fb48 	bl	8000aa8 <GAS_Scheduler>
  {
 8001418:	e7fc      	b.n	8001414 <main+0x44>
	...

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	; 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2230      	movs	r2, #48	; 0x30
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f004 f906 	bl	800563c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <SystemClock_Config+0xd0>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	4a28      	ldr	r2, [pc, #160]	; (80014ec <SystemClock_Config+0xd0>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	; 0x40
 8001450:	4b26      	ldr	r3, [pc, #152]	; (80014ec <SystemClock_Config+0xd0>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <SystemClock_Config+0xd4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a22      	ldr	r2, [pc, #136]	; (80014f0 <SystemClock_Config+0xd4>)
 8001466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <SystemClock_Config+0xd4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001478:	2301      	movs	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800147c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001482:	2302      	movs	r3, #2
 8001484:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001486:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800148a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800148c:	2304      	movs	r3, #4
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001490:	23a8      	movs	r3, #168	; 0xa8
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001498:	2307      	movs	r3, #7
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fcbb 	bl	8003e1c <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014ac:	f000 f822 	bl	80014f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	230f      	movs	r3, #15
 80014b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b4:	2302      	movs	r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2105      	movs	r1, #5
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 ff14 	bl	80042fc <HAL_RCC_ClockConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014da:	f000 f80b 	bl	80014f4 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80014de:	f002 fff3 	bl	80044c8 <HAL_RCC_EnableCSS>
}
 80014e2:	bf00      	nop
 80014e4:	3750      	adds	r7, #80	; 0x50
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40007000 	.word	0x40007000

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fa:	e7fe      	b.n	80014fa <Error_Handler+0x6>

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <HAL_MspInit+0x4c>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <HAL_MspInit+0x4c>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001550:	f003 f89e 	bl	8004690 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <NMI_Handler+0x8>

08001556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <MemManage_Handler+0x4>

08001562 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <BusFault_Handler+0x4>

08001568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <UsageFault_Handler+0x4>

0800156e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159c:	f000 fcf6 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80015a0:	f001 ff0f 	bl	80033c2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <TIM1_CC_IRQHandler+0x10>)
 80015ae:	f003 f977 	bl	80048a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000378 	.word	0x20000378

080015bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <TIM4_IRQHandler+0x10>)
 80015c2:	f003 f96d 	bl	80048a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200002f8 	.word	0x200002f8

080015d0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <TIM8_CC_IRQHandler+0x10>)
 80015d6:	f003 f963 	bl	80048a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002b8 	.word	0x200002b8

080015e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <DMA2_Stream0_IRQHandler+0x10>)
 80015ea:	f002 f829 	bl	8003640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000214 	.word	0x20000214

080015f8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <CAN2_RX0_IRQHandler+0x10>)
 80015fe:	f001 fbaf 	bl	8002d60 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000274 	.word	0x20000274

0800160c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <CAN2_RX1_IRQHandler+0x10>)
 8001612:	f001 fba5 	bl	8002d60 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000274 	.word	0x20000274

08001620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <SystemInit+0x28>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	4a07      	ldr	r2, [pc, #28]	; (8001648 <SystemInit+0x28>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SystemInit+0x28>)
 8001636:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800163a:	609a      	str	r2, [r3, #8]
#endif
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b090      	sub	sp, #64	; 0x40
 8001650:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 8001686:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <MX_TIM1_Init+0x138>)
 8001688:	4a3f      	ldr	r2, [pc, #252]	; (8001788 <MX_TIM1_Init+0x13c>)
 800168a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800168c:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <MX_TIM1_Init+0x138>)
 800168e:	22a7      	movs	r2, #167	; 0xa7
 8001690:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <MX_TIM1_Init+0x138>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001698:	4b3a      	ldr	r3, [pc, #232]	; (8001784 <MX_TIM1_Init+0x138>)
 800169a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800169e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b38      	ldr	r3, [pc, #224]	; (8001784 <MX_TIM1_Init+0x138>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016a6:	4b37      	ldr	r3, [pc, #220]	; (8001784 <MX_TIM1_Init+0x138>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ac:	4b35      	ldr	r3, [pc, #212]	; (8001784 <MX_TIM1_Init+0x138>)
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016b2:	4834      	ldr	r0, [pc, #208]	; (8001784 <MX_TIM1_Init+0x138>)
 80016b4:	f003 f807 	bl	80046c6 <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80016be:	f7ff ff19 	bl	80014f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016cc:	4619      	mov	r1, r3
 80016ce:	482d      	ldr	r0, [pc, #180]	; (8001784 <MX_TIM1_Init+0x138>)
 80016d0:	f003 fa8a 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80016da:	f7ff ff0b 	bl	80014f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80016de:	4829      	ldr	r0, [pc, #164]	; (8001784 <MX_TIM1_Init+0x138>)
 80016e0:	f003 f840 	bl	8004764 <HAL_TIM_IC_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80016ea:	f7ff ff03 	bl	80014f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80016ee:	2304      	movs	r3, #4
 80016f0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80016f2:	2350      	movs	r3, #80	; 0x50
 80016f4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4619      	mov	r1, r3
 8001704:	481f      	ldr	r0, [pc, #124]	; (8001784 <MX_TIM1_Init+0x138>)
 8001706:	f003 fb26 	bl	8004d56 <HAL_TIM_SlaveConfigSynchro>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001710:	f7ff fef0 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4818      	ldr	r0, [pc, #96]	; (8001784 <MX_TIM1_Init+0x138>)
 8001724:	f003 fed6 	bl	80054d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 800172e:	f7ff fee1 	bl	80014f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001736:	2301      	movs	r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 800173e:	230f      	movs	r3, #15
 8001740:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	4619      	mov	r1, r3
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <MX_TIM1_Init+0x138>)
 800174a:	f003 f9b1 	bl	8004ab0 <HAL_TIM_IC_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001754:	f7ff fece 	bl	80014f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001758:	2302      	movs	r3, #2
 800175a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800175c:	2302      	movs	r3, #2
 800175e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2204      	movs	r2, #4
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <MX_TIM1_Init+0x138>)
 800176c:	f003 f9a0 	bl	8004ab0 <HAL_TIM_IC_ConfigChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001776:	f7ff febd 	bl	80014f4 <Error_Handler>
  }

}
 800177a:	bf00      	nop
 800177c:	3740      	adds	r7, #64	; 0x40
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000378 	.word	0x20000378
 8001788:	40010000 	.word	0x40010000

0800178c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b090      	sub	sp, #64	; 0x40
 8001790:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <MX_TIM3_Init+0x10c>)
 80017c8:	4a34      	ldr	r2, [pc, #208]	; (800189c <MX_TIM3_Init+0x110>)
 80017ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017cc:	4b32      	ldr	r3, [pc, #200]	; (8001898 <MX_TIM3_Init+0x10c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d2:	4b31      	ldr	r3, [pc, #196]	; (8001898 <MX_TIM3_Init+0x10c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017d8:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <MX_TIM3_Init+0x10c>)
 80017da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e0:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <MX_TIM3_Init+0x10c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <MX_TIM3_Init+0x10c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017ec:	482a      	ldr	r0, [pc, #168]	; (8001898 <MX_TIM3_Init+0x10c>)
 80017ee:	f002 ff6a 	bl	80046c6 <HAL_TIM_Base_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017f8:	f7ff fe7c 	bl	80014f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001806:	4619      	mov	r1, r3
 8001808:	4823      	ldr	r0, [pc, #140]	; (8001898 <MX_TIM3_Init+0x10c>)
 800180a:	f003 f9ed 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001814:	f7ff fe6e 	bl	80014f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001818:	481f      	ldr	r0, [pc, #124]	; (8001898 <MX_TIM3_Init+0x10c>)
 800181a:	f002 ffa3 	bl	8004764 <HAL_TIM_IC_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001824:	f7ff fe66 	bl	80014f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800182c:	2340      	movs	r3, #64	; 0x40
 800182e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	4817      	ldr	r0, [pc, #92]	; (8001898 <MX_TIM3_Init+0x10c>)
 800183c:	f003 fa8b 	bl	8004d56 <HAL_TIM_SlaveConfigSynchro>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8001846:	f7ff fe55 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	480f      	ldr	r0, [pc, #60]	; (8001898 <MX_TIM3_Init+0x10c>)
 800185a:	f003 fe3b 	bl	80054d4 <HAL_TIMEx_MasterConfigSynchronization>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001864:	f7ff fe46 	bl	80014f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 800186c:	2303      	movs	r3, #3
 800186e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	4619      	mov	r1, r3
 800187e:	4806      	ldr	r0, [pc, #24]	; (8001898 <MX_TIM3_Init+0x10c>)
 8001880:	f003 f916 	bl	8004ab0 <HAL_TIM_IC_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800188a:	f7ff fe33 	bl	80014f4 <Error_Handler>
  }

}
 800188e:	bf00      	nop
 8001890:	3740      	adds	r7, #64	; 0x40
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000338 	.word	0x20000338
 800189c:	40000400 	.word	0x40000400

080018a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b090      	sub	sp, #64	; 0x40
 80018a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <MX_TIM4_Init+0x130>)
 80018dc:	4a3d      	ldr	r2, [pc, #244]	; (80019d4 <MX_TIM4_Init+0x134>)
 80018de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 80018e0:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <MX_TIM4_Init+0x130>)
 80018e2:	22a7      	movs	r2, #167	; 0xa7
 80018e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e6:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <MX_TIM4_Init+0x130>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018ec:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <MX_TIM4_Init+0x130>)
 80018ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <MX_TIM4_Init+0x130>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b35      	ldr	r3, [pc, #212]	; (80019d0 <MX_TIM4_Init+0x130>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001900:	4833      	ldr	r0, [pc, #204]	; (80019d0 <MX_TIM4_Init+0x130>)
 8001902:	f002 fee0 	bl	80046c6 <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800190c:	f7ff fdf2 	bl	80014f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800191a:	4619      	mov	r1, r3
 800191c:	482c      	ldr	r0, [pc, #176]	; (80019d0 <MX_TIM4_Init+0x130>)
 800191e:	f003 f963 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001928:	f7ff fde4 	bl	80014f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800192c:	4828      	ldr	r0, [pc, #160]	; (80019d0 <MX_TIM4_Init+0x130>)
 800192e:	f002 ff19 	bl	8004764 <HAL_TIM_IC_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001938:	f7ff fddc 	bl	80014f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800193c:	2304      	movs	r3, #4
 800193e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001940:	2350      	movs	r3, #80	; 0x50
 8001942:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	481f      	ldr	r0, [pc, #124]	; (80019d0 <MX_TIM4_Init+0x130>)
 8001954:	f003 f9ff 	bl	8004d56 <HAL_TIM_SlaveConfigSynchro>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 800195e:	f7ff fdc9 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4817      	ldr	r0, [pc, #92]	; (80019d0 <MX_TIM4_Init+0x130>)
 8001972:	f003 fdaf 	bl	80054d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800197c:	f7ff fdba 	bl	80014f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001984:	2301      	movs	r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 800198c:	230f      	movs	r3, #15
 800198e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2200      	movs	r2, #0
 8001994:	4619      	mov	r1, r3
 8001996:	480e      	ldr	r0, [pc, #56]	; (80019d0 <MX_TIM4_Init+0x130>)
 8001998:	f003 f88a 	bl	8004ab0 <HAL_TIM_IC_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 80019a2:	f7ff fda7 	bl	80014f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80019a6:	2302      	movs	r3, #2
 80019a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80019aa:	2302      	movs	r3, #2
 80019ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2204      	movs	r2, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_TIM4_Init+0x130>)
 80019ba:	f003 f879 	bl	8004ab0 <HAL_TIM_IC_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM4_Init+0x128>
  {
    Error_Handler();
 80019c4:	f7ff fd96 	bl	80014f4 <Error_Handler>
  }

}
 80019c8:	bf00      	nop
 80019ca:	3740      	adds	r7, #64	; 0x40
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200002f8 	.word	0x200002f8
 80019d4:	40000800 	.word	0x40000800

080019d8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b090      	sub	sp, #64	; 0x40
 80019dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]

  htim8.Instance = TIM8;
 8001a12:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001a14:	4a3f      	ldr	r2, [pc, #252]	; (8001b14 <MX_TIM8_Init+0x13c>)
 8001a16:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8001a18:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001a1a:	22a7      	movs	r2, #167	; 0xa7
 8001a1c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1e:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a24:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2c:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a38:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a3e:	4834      	ldr	r0, [pc, #208]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001a40:	f002 fe41 	bl	80046c6 <HAL_TIM_Base_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001a4a:	f7ff fd53 	bl	80014f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a58:	4619      	mov	r1, r3
 8001a5a:	482d      	ldr	r0, [pc, #180]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001a5c:	f003 f8c4 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8001a66:	f7ff fd45 	bl	80014f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001a6a:	4829      	ldr	r0, [pc, #164]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001a6c:	f002 fe7a 	bl	8004764 <HAL_TIM_IC_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8001a76:	f7ff fd3d 	bl	80014f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a7e:	2350      	movs	r3, #80	; 0x50
 8001a80:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	481f      	ldr	r0, [pc, #124]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001a92:	f003 f960 	bl	8004d56 <HAL_TIM_SlaveConfigSynchro>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001a9c:	f7ff fd2a 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	4818      	ldr	r0, [pc, #96]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001ab0:	f003 fd10 	bl	80054d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8001aba:	f7ff fd1b 	bl	80014f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8001aca:	230f      	movs	r3, #15
 8001acc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480e      	ldr	r0, [pc, #56]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001ad6:	f002 ffeb 	bl	8004ab0 <HAL_TIM_IC_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8001ae0:	f7ff fd08 	bl	80014f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2204      	movs	r2, #4
 8001af4:	4619      	mov	r1, r3
 8001af6:	4806      	ldr	r0, [pc, #24]	; (8001b10 <MX_TIM8_Init+0x138>)
 8001af8:	f002 ffda 	bl	8004ab0 <HAL_TIM_IC_ConfigChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8001b02:	f7ff fcf7 	bl	80014f4 <Error_Handler>
  }

}
 8001b06:	bf00      	nop
 8001b08:	3740      	adds	r7, #64	; 0x40
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200002b8 	.word	0x200002b8
 8001b14:	40010400 	.word	0x40010400

08001b18 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08e      	sub	sp, #56	; 0x38
 8001b1c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 8001b48:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <MX_TIM12_Init+0x108>)
 8001b4a:	4a36      	ldr	r2, [pc, #216]	; (8001c24 <MX_TIM12_Init+0x10c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 167;
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <MX_TIM12_Init+0x108>)
 8001b50:	22a7      	movs	r2, #167	; 0xa7
 8001b52:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <MX_TIM12_Init+0x108>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001b5a:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <MX_TIM12_Init+0x108>)
 8001b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b60:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <MX_TIM12_Init+0x108>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <MX_TIM12_Init+0x108>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001b6e:	482c      	ldr	r0, [pc, #176]	; (8001c20 <MX_TIM12_Init+0x108>)
 8001b70:	f002 fda9 	bl	80046c6 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8001b7a:	f7ff fcbb 	bl	80014f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001b84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4825      	ldr	r0, [pc, #148]	; (8001c20 <MX_TIM12_Init+0x108>)
 8001b8c:	f003 f82c 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8001b96:	f7ff fcad 	bl	80014f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8001b9a:	4821      	ldr	r0, [pc, #132]	; (8001c20 <MX_TIM12_Init+0x108>)
 8001b9c:	f002 fde2 	bl	8004764 <HAL_TIM_IC_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 8001ba6:	f7ff fca5 	bl	80014f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001baa:	2304      	movs	r3, #4
 8001bac:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001bae:	2350      	movs	r3, #80	; 0x50
 8001bb0:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerFilter = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4817      	ldr	r0, [pc, #92]	; (8001c20 <MX_TIM12_Init+0x108>)
 8001bc2:	f003 f8c8 	bl	8004d56 <HAL_TIM_SlaveConfigSynchro>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM12_Init+0xb8>
  {
    Error_Handler();
 8001bcc:	f7ff fc92 	bl	80014f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8001bdc:	230f      	movs	r3, #15
 8001bde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	4619      	mov	r1, r3
 8001be6:	480e      	ldr	r0, [pc, #56]	; (8001c20 <MX_TIM12_Init+0x108>)
 8001be8:	f002 ff62 	bl	8004ab0 <HAL_TIM_IC_ConfigChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM12_Init+0xde>
  {
    Error_Handler();
 8001bf2:	f7ff fc7f 	bl	80014f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2204      	movs	r2, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_TIM12_Init+0x108>)
 8001c0a:	f002 ff51 	bl	8004ab0 <HAL_TIM_IC_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 8001c14:	f7ff fc6e 	bl	80014f4 <Error_Handler>
  }

}
 8001c18:	bf00      	nop
 8001c1a:	3738      	adds	r7, #56	; 0x38
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200003b8 	.word	0x200003b8
 8001c24:	40001800 	.word	0x40001800

08001c28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b092      	sub	sp, #72	; 0x48
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a8a      	ldr	r2, [pc, #552]	; (8001e70 <HAL_TIM_Base_MspInit+0x248>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d135      	bne.n	8001cb6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c4e:	4b89      	ldr	r3, [pc, #548]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	4a88      	ldr	r2, [pc, #544]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5a:	4b86      	ldr	r3, [pc, #536]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
 8001c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c6a:	4b82      	ldr	r3, [pc, #520]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a81      	ldr	r2, [pc, #516]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b7f      	ldr	r3, [pc, #508]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001c82:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4876      	ldr	r0, [pc, #472]	; (8001e78 <HAL_TIM_Base_MspInit+0x250>)
 8001ca0:	f001 ff08 	bl	8003ab4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	201b      	movs	r0, #27
 8001caa:	f001 fb54 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cae:	201b      	movs	r0, #27
 8001cb0:	f001 fb6d 	bl	800338e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001cb4:	e0d8      	b.n	8001e68 <HAL_TIM_Base_MspInit+0x240>
  else if(tim_baseHandle->Instance==TIM3)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a70      	ldr	r2, [pc, #448]	; (8001e7c <HAL_TIM_Base_MspInit+0x254>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d12c      	bne.n	8001d1a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc4:	4b6b      	ldr	r3, [pc, #428]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	4a6a      	ldr	r2, [pc, #424]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001cca:	f043 0302 	orr.w	r3, r3, #2
 8001cce:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd0:	4b68      	ldr	r3, [pc, #416]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce0:	4b64      	ldr	r3, [pc, #400]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	4a63      	ldr	r2, [pc, #396]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	6313      	str	r3, [r2, #48]	; 0x30
 8001cec:	4b61      	ldr	r3, [pc, #388]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cf8:	2310      	movs	r3, #16
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d10:	4619      	mov	r1, r3
 8001d12:	485b      	ldr	r0, [pc, #364]	; (8001e80 <HAL_TIM_Base_MspInit+0x258>)
 8001d14:	f001 fece 	bl	8003ab4 <HAL_GPIO_Init>
}
 8001d18:	e0a6      	b.n	8001e68 <HAL_TIM_Base_MspInit+0x240>
  else if(tim_baseHandle->Instance==TIM4)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a59      	ldr	r2, [pc, #356]	; (8001e84 <HAL_TIM_Base_MspInit+0x25c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d134      	bne.n	8001d8e <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	4b52      	ldr	r3, [pc, #328]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	4a51      	ldr	r2, [pc, #324]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6413      	str	r3, [r2, #64]	; 0x40
 8001d34:	4b4f      	ldr	r3, [pc, #316]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	623b      	str	r3, [r7, #32]
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	4b4b      	ldr	r3, [pc, #300]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a4a      	ldr	r2, [pc, #296]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d50:	4b48      	ldr	r3, [pc, #288]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d5c:	2340      	movs	r3, #64	; 0x40
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d74:	4619      	mov	r1, r3
 8001d76:	4842      	ldr	r0, [pc, #264]	; (8001e80 <HAL_TIM_Base_MspInit+0x258>)
 8001d78:	f001 fe9c 	bl	8003ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	201e      	movs	r0, #30
 8001d82:	f001 fae8 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d86:	201e      	movs	r0, #30
 8001d88:	f001 fb01 	bl	800338e <HAL_NVIC_EnableIRQ>
}
 8001d8c:	e06c      	b.n	8001e68 <HAL_TIM_Base_MspInit+0x240>
  else if(tim_baseHandle->Instance==TIM8)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a3d      	ldr	r2, [pc, #244]	; (8001e88 <HAL_TIM_Base_MspInit+0x260>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d135      	bne.n	8001e04 <HAL_TIM_Base_MspInit+0x1dc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	4b35      	ldr	r3, [pc, #212]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	4a34      	ldr	r2, [pc, #208]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	6453      	str	r3, [r2, #68]	; 0x44
 8001da8:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4a2d      	ldr	r2, [pc, #180]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc4:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001dd0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001de2:	2303      	movs	r3, #3
 8001de4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dea:	4619      	mov	r1, r3
 8001dec:	4827      	ldr	r0, [pc, #156]	; (8001e8c <HAL_TIM_Base_MspInit+0x264>)
 8001dee:	f001 fe61 	bl	8003ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	202e      	movs	r0, #46	; 0x2e
 8001df8:	f001 faad 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001dfc:	202e      	movs	r0, #46	; 0x2e
 8001dfe:	f001 fac6 	bl	800338e <HAL_NVIC_EnableIRQ>
}
 8001e02:	e031      	b.n	8001e68 <HAL_TIM_Base_MspInit+0x240>
  else if(tim_baseHandle->Instance==TIM12)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a21      	ldr	r2, [pc, #132]	; (8001e90 <HAL_TIM_Base_MspInit+0x268>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d12c      	bne.n	8001e68 <HAL_TIM_Base_MspInit+0x240>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_TIM_Base_MspInit+0x24c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001e58:	2309      	movs	r3, #9
 8001e5a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	; (8001e80 <HAL_TIM_Base_MspInit+0x258>)
 8001e64:	f001 fe26 	bl	8003ab4 <HAL_GPIO_Init>
}
 8001e68:	bf00      	nop
 8001e6a:	3748      	adds	r7, #72	; 0x48
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40020400 	.word	0x40020400
 8001e84:	40000800 	.word	0x40000800
 8001e88:	40010400 	.word	0x40010400
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40001800 	.word	0x40001800

08001e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ecc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e9a:	e003      	b.n	8001ea4 <LoopCopyDataInit>

08001e9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ea0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ea2:	3104      	adds	r1, #4

08001ea4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ea4:	480b      	ldr	r0, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ea8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001eaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001eac:	d3f6      	bcc.n	8001e9c <CopyDataInit>
  ldr  r2, =_sbss
 8001eae:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001eb0:	e002      	b.n	8001eb8 <LoopFillZerobss>

08001eb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001eb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001eb4:	f842 3b04 	str.w	r3, [r2], #4

08001eb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ebc:	d3f9      	bcc.n	8001eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ebe:	f7ff fbaf 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ec2:	f003 fb97 	bl	80055f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ec6:	f7ff fa83 	bl	80013d0 <main>
  bx  lr    
 8001eca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ecc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ed0:	0800568c 	.word	0x0800568c
  ldr  r0, =_sdata
 8001ed4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ed8:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001edc:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001ee0:	200003fc 	.word	0x200003fc

08001ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee4:	e7fe      	b.n	8001ee4 <ADC_IRQHandler>
	...

08001ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <HAL_Init+0x40>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <HAL_Init+0x40>)
 8001efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <HAL_Init+0x40>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f001 fa15 	bl	8003340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f000 f808 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1c:	f7ff faee 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023c00 	.word	0x40023c00

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_InitTick+0x54>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_InitTick+0x58>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 fa2d 	bl	80033aa <HAL_SYSTICK_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00e      	b.n	8001f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d80a      	bhi.n	8001f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f60:	2200      	movs	r2, #0
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f001 f9f5 	bl	8003356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f6c:	4a06      	ldr	r2, [pc, #24]	; (8001f88 <HAL_InitTick+0x5c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000010 	.word	0x20000010
 8001f88:	2000000c 	.word	0x2000000c

08001f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_IncTick+0x20>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_IncTick+0x24>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <HAL_IncTick+0x24>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000010 	.word	0x20000010
 8001fb0:	200003f8 	.word	0x200003f8

08001fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <HAL_GetTick+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	200003f8 	.word	0x200003f8

08001fcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e033      	b.n	800204a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe fe80 	bl	8000cf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d118      	bne.n	800203c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002012:	f023 0302 	bic.w	r3, r3, #2
 8002016:	f043 0202 	orr.w	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f93a 	bl	8002298 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
 800203a:	e001      	b.n	8002040 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1c>
 800206c:	2302      	movs	r3, #2
 800206e:	e105      	b.n	800227c <HAL_ADC_ConfigChannel+0x228>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b09      	cmp	r3, #9
 800207e:	d925      	bls.n	80020cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68d9      	ldr	r1, [r3, #12]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	3b1e      	subs	r3, #30
 8002096:	2207      	movs	r2, #7
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43da      	mvns	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	400a      	ands	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68d9      	ldr	r1, [r3, #12]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	4603      	mov	r3, r0
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4403      	add	r3, r0
 80020be:	3b1e      	subs	r3, #30
 80020c0:	409a      	lsls	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	e022      	b.n	8002112 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6919      	ldr	r1, [r3, #16]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	2207      	movs	r2, #7
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	400a      	ands	r2, r1
 80020ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6919      	ldr	r1, [r3, #16]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4618      	mov	r0, r3
 8002102:	4603      	mov	r3, r0
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4403      	add	r3, r0
 8002108:	409a      	lsls	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b06      	cmp	r3, #6
 8002118:	d824      	bhi.n	8002164 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3b05      	subs	r3, #5
 800212c:	221f      	movs	r2, #31
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	400a      	ands	r2, r1
 800213a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	4618      	mov	r0, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b05      	subs	r3, #5
 8002156:	fa00 f203 	lsl.w	r2, r0, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	635a      	str	r2, [r3, #52]	; 0x34
 8002162:	e04c      	b.n	80021fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b0c      	cmp	r3, #12
 800216a:	d824      	bhi.n	80021b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3b23      	subs	r3, #35	; 0x23
 800217e:	221f      	movs	r2, #31
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43da      	mvns	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	400a      	ands	r2, r1
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b23      	subs	r3, #35	; 0x23
 80021a8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
 80021b4:	e023      	b.n	80021fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b41      	subs	r3, #65	; 0x41
 80021c8:	221f      	movs	r2, #31
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b41      	subs	r3, #65	; 0x41
 80021f2:	fa00 f203 	lsl.w	r2, r0, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021fe:	4b22      	ldr	r3, [pc, #136]	; (8002288 <HAL_ADC_ConfigChannel+0x234>)
 8002200:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a21      	ldr	r2, [pc, #132]	; (800228c <HAL_ADC_ConfigChannel+0x238>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d109      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x1cc>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b12      	cmp	r3, #18
 8002212:	d105      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a19      	ldr	r2, [pc, #100]	; (800228c <HAL_ADC_ConfigChannel+0x238>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d123      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x21e>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b10      	cmp	r3, #16
 8002230:	d003      	beq.n	800223a <HAL_ADC_ConfigChannel+0x1e6>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b11      	cmp	r3, #17
 8002238:	d11b      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b10      	cmp	r3, #16
 800224c:	d111      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_ADC_ConfigChannel+0x23c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a10      	ldr	r2, [pc, #64]	; (8002294 <HAL_ADC_ConfigChannel+0x240>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	0c9a      	lsrs	r2, r3, #18
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002264:	e002      	b.n	800226c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3b01      	subs	r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f9      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40012300 	.word	0x40012300
 800228c:	40012000 	.word	0x40012000
 8002290:	20000008 	.word	0x20000008
 8002294:	431bde83 	.word	0x431bde83

08002298 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a0:	4b79      	ldr	r3, [pc, #484]	; (8002488 <ADC_Init+0x1f0>)
 80022a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	021a      	lsls	r2, r3, #8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	4a58      	ldr	r2, [pc, #352]	; (800248c <ADC_Init+0x1f4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d022      	beq.n	8002376 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800233e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6899      	ldr	r1, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6899      	ldr	r1, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	e00f      	b.n	8002396 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002384:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002394:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0202 	bic.w	r2, r2, #2
 80023a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6899      	ldr	r1, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7e1b      	ldrb	r3, [r3, #24]
 80023b0:	005a      	lsls	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01b      	beq.n	80023fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	3b01      	subs	r3, #1
 80023f0:	035a      	lsls	r2, r3, #13
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	e007      	b.n	800240c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800240a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	3b01      	subs	r3, #1
 8002428:	051a      	lsls	r2, r3, #20
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6899      	ldr	r1, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800244e:	025a      	lsls	r2, r3, #9
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6899      	ldr	r1, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	029a      	lsls	r2, r3, #10
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	609a      	str	r2, [r3, #8]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40012300 	.word	0x40012300
 800248c:	0f000001 	.word	0x0f000001

08002490 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0ed      	b.n	800267e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fd98 	bl	8000fe4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0202 	bic.w	r2, r2, #2
 80024c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c4:	f7ff fd76 	bl	8001fb4 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024ca:	e012      	b.n	80024f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024cc:	f7ff fd72 	bl	8001fb4 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b0a      	cmp	r3, #10
 80024d8:	d90b      	bls.n	80024f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2205      	movs	r2, #5
 80024ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0c5      	b.n	800267e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e5      	bne.n	80024cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002510:	f7ff fd50 	bl	8001fb4 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002516:	e012      	b.n	800253e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002518:	f7ff fd4c 	bl	8001fb4 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b0a      	cmp	r3, #10
 8002524:	d90b      	bls.n	800253e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2205      	movs	r2, #5
 8002536:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e09f      	b.n	800267e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0e5      	beq.n	8002518 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	7e1b      	ldrb	r3, [r3, #24]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d108      	bne.n	8002566 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e007      	b.n	8002576 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	7e5b      	ldrb	r3, [r3, #25]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d108      	bne.n	8002590 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e007      	b.n	80025a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800259e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7e9b      	ldrb	r3, [r3, #26]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d108      	bne.n	80025ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0220 	orr.w	r2, r2, #32
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e007      	b.n	80025ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0220 	bic.w	r2, r2, #32
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7edb      	ldrb	r3, [r3, #27]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d108      	bne.n	80025e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0210 	bic.w	r2, r2, #16
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e007      	b.n	80025f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0210 	orr.w	r2, r2, #16
 80025f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7f1b      	ldrb	r3, [r3, #28]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d108      	bne.n	800260e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0208 	orr.w	r2, r2, #8
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e007      	b.n	800261e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0208 	bic.w	r2, r2, #8
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7f5b      	ldrb	r3, [r3, #29]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d108      	bne.n	8002638 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0204 	orr.w	r2, r2, #4
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e007      	b.n	8002648 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0204 	bic.w	r2, r2, #4
 8002646:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	ea42 0103 	orr.w	r1, r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	1e5a      	subs	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d003      	beq.n	80026ae <HAL_CAN_ConfigFilter+0x26>
 80026a6:	7cfb      	ldrb	r3, [r7, #19]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	f040 80be 	bne.w	800282a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80026ae:	4b65      	ldr	r3, [pc, #404]	; (8002844 <HAL_CAN_ConfigFilter+0x1bc>)
 80026b0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	431a      	orrs	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	2201      	movs	r2, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	43db      	mvns	r3, r3
 8002700:	401a      	ands	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d123      	bne.n	8002758 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	43db      	mvns	r3, r3
 800271a:	401a      	ands	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002732:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3248      	adds	r2, #72	; 0x48
 8002738:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800274c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800274e:	6979      	ldr	r1, [r7, #20]
 8002750:	3348      	adds	r3, #72	; 0x48
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d122      	bne.n	80027a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	431a      	orrs	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002780:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3248      	adds	r2, #72	; 0x48
 8002786:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800279a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800279c:	6979      	ldr	r1, [r7, #20]
 800279e:	3348      	adds	r3, #72	; 0x48
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	401a      	ands	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80027c0:	e007      	b.n	80027d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	401a      	ands	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027ec:	e007      	b.n	80027fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	431a      	orrs	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800281c:	f023 0201 	bic.w	r2, r3, #1
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e006      	b.n	8002838 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
  }
}
 8002838:	4618      	mov	r0, r3
 800283a:	371c      	adds	r7, #28
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	40006400 	.word	0x40006400

08002848 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d12e      	bne.n	80028ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002874:	f7ff fb9e 	bl	8001fb4 <HAL_GetTick>
 8002878:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800287a:	e012      	b.n	80028a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800287c:	f7ff fb9a 	bl	8001fb4 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b0a      	cmp	r3, #10
 8002888:	d90b      	bls.n	80028a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2205      	movs	r2, #5
 800289a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e012      	b.n	80028c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e5      	bne.n	800287c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e006      	b.n	80028c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
  }
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028ee:	7ffb      	ldrb	r3, [r7, #31]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d003      	beq.n	80028fc <HAL_CAN_AddTxMessage+0x2c>
 80028f4:	7ffb      	ldrb	r3, [r7, #31]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	f040 80b8 	bne.w	8002a6c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800290c:	2b00      	cmp	r3, #0
 800290e:	d105      	bne.n	800291c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80a0 	beq.w	8002a5c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	0e1b      	lsrs	r3, r3, #24
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d907      	bls.n	800293c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e09e      	b.n	8002a7a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800293c:	2201      	movs	r2, #1
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	409a      	lsls	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10d      	bne.n	800296a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002958:	68f9      	ldr	r1, [r7, #12]
 800295a:	6809      	ldr	r1, [r1, #0]
 800295c:	431a      	orrs	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3318      	adds	r3, #24
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	440b      	add	r3, r1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e00f      	b.n	800298a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002974:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800297a:	68f9      	ldr	r1, [r7, #12]
 800297c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800297e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	3318      	adds	r3, #24
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	440b      	add	r3, r1
 8002988:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6819      	ldr	r1, [r3, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3318      	adds	r3, #24
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	440b      	add	r3, r1
 800299a:	3304      	adds	r3, #4
 800299c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	7d1b      	ldrb	r3, [r3, #20]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d111      	bne.n	80029ca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	3318      	adds	r3, #24
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	4413      	add	r3, r2
 80029b2:	3304      	adds	r3, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	6811      	ldr	r1, [r2, #0]
 80029ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3318      	adds	r3, #24
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	440b      	add	r3, r1
 80029c6:	3304      	adds	r3, #4
 80029c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3307      	adds	r3, #7
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	061a      	lsls	r2, r3, #24
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3306      	adds	r3, #6
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3305      	adds	r3, #5
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	4313      	orrs	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	3204      	adds	r2, #4
 80029ea:	7812      	ldrb	r2, [r2, #0]
 80029ec:	4610      	mov	r0, r2
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	6811      	ldr	r1, [r2, #0]
 80029f2:	ea43 0200 	orr.w	r2, r3, r0
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3303      	adds	r3, #3
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	061a      	lsls	r2, r3, #24
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3301      	adds	r3, #1
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	021b      	lsls	r3, r3, #8
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	7812      	ldrb	r2, [r2, #0]
 8002a22:	4610      	mov	r0, r2
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	6811      	ldr	r1, [r2, #0]
 8002a28:	ea43 0200 	orr.w	r2, r3, r0
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	440b      	add	r3, r1
 8002a32:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002a36:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3318      	adds	r3, #24
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	4413      	add	r3, r2
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	6811      	ldr	r1, [r2, #0]
 8002a4a:	f043 0201 	orr.w	r2, r3, #1
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3318      	adds	r3, #24
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	440b      	add	r3, r1
 8002a56:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e00e      	b.n	8002a7a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e006      	b.n	8002a7a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a98:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a9a:	7afb      	ldrb	r3, [r7, #11]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d002      	beq.n	8002aa6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002aa0:	7afb      	ldrb	r3, [r7, #11]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d11d      	bne.n	8002ae2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3301      	adds	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d003      	beq.n	8002b14 <HAL_CAN_GetRxMessage+0x24>
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	f040 80f3 	bne.w	8002cfa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10e      	bne.n	8002b38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d116      	bne.n	8002b56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0e7      	b.n	8002d08 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d107      	bne.n	8002b56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0d8      	b.n	8002d08 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	331b      	adds	r3, #27
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	4413      	add	r3, r2
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0204 	and.w	r2, r3, #4
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10c      	bne.n	8002b8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	331b      	adds	r3, #27
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	4413      	add	r3, r2
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0d5b      	lsrs	r3, r3, #21
 8002b84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e00b      	b.n	8002ba6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	331b      	adds	r3, #27
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	4413      	add	r3, r2
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	08db      	lsrs	r3, r3, #3
 8002b9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	331b      	adds	r3, #27
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	4413      	add	r3, r2
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0202 	and.w	r2, r3, #2
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	331b      	adds	r3, #27
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 020f 	and.w	r2, r3, #15
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	331b      	adds	r3, #27
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	4413      	add	r3, r2
 8002be0:	3304      	adds	r3, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	331b      	adds	r3, #27
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0a1a      	lsrs	r2, r3, #8
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0c1a      	lsrs	r2, r3, #16
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	3302      	adds	r3, #2
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0e1a      	lsrs	r2, r3, #24
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	3303      	adds	r3, #3
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0a1a      	lsrs	r2, r3, #8
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	3305      	adds	r3, #5
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	0c1a      	lsrs	r2, r3, #16
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	3306      	adds	r3, #6
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0e1a      	lsrs	r2, r3, #24
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	3307      	adds	r3, #7
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d108      	bne.n	8002ce6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0220 	orr.w	r2, r2, #32
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	e007      	b.n	8002cf6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0220 	orr.w	r2, r2, #32
 8002cf4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e006      	b.n	8002d08 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d24:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d002      	beq.n	8002d32 <HAL_CAN_ActivateNotification+0x1e>
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d109      	bne.n	8002d46 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6959      	ldr	r1, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e006      	b.n	8002d54 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
  }
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d07c      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d023      	beq.n	8002df8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2201      	movs	r2, #1
 8002db6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f97d 	bl	80030c2 <HAL_CAN_TxMailbox0CompleteCallback>
 8002dc8:	e016      	b.n	8002df8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
 8002ddc:	e00c      	b.n	8002df8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
 8002df0:	e002      	b.n	8002df8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f983 	bl	80030fe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d024      	beq.n	8002e4c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f95d 	bl	80030d6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e1c:	e016      	b.n	8002e4c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e30:	e00c      	b.n	8002e4c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	e002      	b.n	8002e4c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f963 	bl	8003112 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d024      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f93d 	bl	80030ea <HAL_CAN_TxMailbox2CompleteCallback>
 8002e70:	e016      	b.n	8002ea0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
 8002e84:	e00c      	b.n	8002ea0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
 8002e98:	e002      	b.n	8002ea0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f943 	bl	8003126 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d006      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2208      	movs	r2, #8
 8002ede:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f92a 	bl	800313a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d009      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd fbcc 	bl	800069c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00c      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2210      	movs	r2, #16
 8002f26:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2208      	movs	r2, #8
 8002f42:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f902 	bl	800314e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd fbb4 	bl	80006d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d006      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2210      	movs	r2, #16
 8002f82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f8ec 	bl	8003162 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8e5 	bl	8003176 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d075      	beq.n	80030a2 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d06c      	beq.n	800309a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	f043 0302 	orr.w	r3, r3, #2
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301a:	2b00      	cmp	r3, #0
 800301c:	d03d      	beq.n	800309a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003024:	2b00      	cmp	r3, #0
 8003026:	d038      	beq.n	800309a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800302e:	2b30      	cmp	r3, #48	; 0x30
 8003030:	d017      	beq.n	8003062 <HAL_CAN_IRQHandler+0x302>
 8003032:	2b30      	cmp	r3, #48	; 0x30
 8003034:	d804      	bhi.n	8003040 <HAL_CAN_IRQHandler+0x2e0>
 8003036:	2b10      	cmp	r3, #16
 8003038:	d009      	beq.n	800304e <HAL_CAN_IRQHandler+0x2ee>
 800303a:	2b20      	cmp	r3, #32
 800303c:	d00c      	beq.n	8003058 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800303e:	e024      	b.n	800308a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003040:	2b50      	cmp	r3, #80	; 0x50
 8003042:	d018      	beq.n	8003076 <HAL_CAN_IRQHandler+0x316>
 8003044:	2b60      	cmp	r3, #96	; 0x60
 8003046:	d01b      	beq.n	8003080 <HAL_CAN_IRQHandler+0x320>
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d00f      	beq.n	800306c <HAL_CAN_IRQHandler+0x30c>
            break;
 800304c:	e01d      	b.n	800308a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003056:	e018      	b.n	800308a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	f043 0310 	orr.w	r3, r3, #16
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003060:	e013      	b.n	800308a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	f043 0320 	orr.w	r3, r3, #32
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800306a:	e00e      	b.n	800308a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003074:	e009      	b.n	800308a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800307e:	e004      	b.n	800308a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003088:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003098:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2204      	movs	r2, #4
 80030a0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f868 	bl	800318a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030ba:	bf00      	nop
 80030bc:	3728      	adds	r7, #40	; 0x28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <__NVIC_SetPriorityGrouping>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031bc:	4013      	ands	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	60d3      	str	r3, [r2, #12]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_GetPriorityGrouping>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <__NVIC_GetPriorityGrouping+0x18>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 0307 	and.w	r3, r3, #7
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <__NVIC_EnableIRQ>:
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	2b00      	cmp	r3, #0
 8003214:	db0b      	blt.n	800322e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4907      	ldr	r1, [pc, #28]	; (800323c <__NVIC_EnableIRQ+0x38>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2001      	movs	r0, #1
 8003226:	fa00 f202 	lsl.w	r2, r0, r2
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000e100 	.word	0xe000e100

08003240 <__NVIC_SetPriority>:
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db0a      	blt.n	800326a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	490c      	ldr	r1, [pc, #48]	; (800328c <__NVIC_SetPriority+0x4c>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	440b      	add	r3, r1
 8003264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003268:	e00a      	b.n	8003280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4908      	ldr	r1, [pc, #32]	; (8003290 <__NVIC_SetPriority+0x50>)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3b04      	subs	r3, #4
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	440b      	add	r3, r1
 800327e:	761a      	strb	r2, [r3, #24]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000e100 	.word	0xe000e100
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <NVIC_EncodePriority>:
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f1c3 0307 	rsb	r3, r3, #7
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	bf28      	it	cs
 80032b2:	2304      	movcs	r3, #4
 80032b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d902      	bls.n	80032c4 <NVIC_EncodePriority+0x30>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3b03      	subs	r3, #3
 80032c2:	e000      	b.n	80032c6 <NVIC_EncodePriority+0x32>
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	401a      	ands	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032dc:	f04f 31ff 	mov.w	r1, #4294967295
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43d9      	mvns	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	4313      	orrs	r3, r2
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	; 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <SysTick_Config>:
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800330c:	d301      	bcc.n	8003312 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800330e:	2301      	movs	r3, #1
 8003310:	e00f      	b.n	8003332 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <SysTick_Config+0x40>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331a:	210f      	movs	r1, #15
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f7ff ff8e 	bl	8003240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <SysTick_Config+0x40>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <SysTick_Config+0x40>)
 800332c:	2207      	movs	r2, #7
 800332e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	e000e010 	.word	0xe000e010

08003340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff29 	bl	80031a0 <__NVIC_SetPriorityGrouping>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003368:	f7ff ff3e 	bl	80031e8 <__NVIC_GetPriorityGrouping>
 800336c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7ff ff8e 	bl	8003294 <NVIC_EncodePriority>
 8003378:	4602      	mov	r2, r0
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff5d 	bl	8003240 <__NVIC_SetPriority>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff31 	bl	8003204 <__NVIC_EnableIRQ>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffa2 	bl	80032fc <SysTick_Config>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80033c6:	f7fd fb29 	bl	8000a1c <HAL_SYSTICK_Callback>
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e00e      	b.n	80033fe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	795b      	ldrb	r3, [r3, #5]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d105      	bne.n	80033f6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fd fe71 	bl	80010d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e014      	b.n	8003442 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	791b      	ldrb	r3, [r3, #4]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fd fea1 	bl	8001170 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800344a:	b480      	push	{r7}
 800344c:	b087      	sub	sp, #28
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	795b      	ldrb	r3, [r3, #5]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_DAC_ConfigChannel+0x20>
 8003466:	2302      	movs	r3, #2
 8003468:	e036      	b.n	80034d8 <HAL_DAC_ConfigChannel+0x8e>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2202      	movs	r2, #2
 8003474:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800347e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4013      	ands	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	22c0      	movs	r2, #192	; 0xc0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43da      	mvns	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	400a      	ands	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034f0:	f7fe fd60 	bl	8001fb4 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e099      	b.n	8003634 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003520:	e00f      	b.n	8003542 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003522:	f7fe fd47 	bl	8001fb4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b05      	cmp	r3, #5
 800352e:	d908      	bls.n	8003542 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2203      	movs	r2, #3
 800353a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e078      	b.n	8003634 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e8      	bne.n	8003522 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4b38      	ldr	r3, [pc, #224]	; (800363c <HAL_DMA_Init+0x158>)
 800355c:	4013      	ands	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800356e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	2b04      	cmp	r3, #4
 800359a:	d107      	bne.n	80035ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	4313      	orrs	r3, r2
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f023 0307 	bic.w	r3, r3, #7
 80035c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d117      	bne.n	8003606 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f9e9 	bl	80039c0 <DMA_CheckFifoParam>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2240      	movs	r2, #64	; 0x40
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003602:	2301      	movs	r3, #1
 8003604:	e016      	b.n	8003634 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f9a0 	bl	8003954 <DMA_CalcBaseAndBitshift>
 8003614:	4603      	mov	r3, r0
 8003616:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	223f      	movs	r2, #63	; 0x3f
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	f010803f 	.word	0xf010803f

08003640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800364c:	4b92      	ldr	r3, [pc, #584]	; (8003898 <HAL_DMA_IRQHandler+0x258>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a92      	ldr	r2, [pc, #584]	; (800389c <HAL_DMA_IRQHandler+0x25c>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0a9b      	lsrs	r3, r3, #10
 8003658:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	2208      	movs	r2, #8
 800366c:	409a      	lsls	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01a      	beq.n	80036ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d013      	beq.n	80036ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0204 	bic.w	r2, r2, #4
 8003692:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	2208      	movs	r2, #8
 800369a:	409a      	lsls	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	2201      	movs	r2, #1
 80036b2:	409a      	lsls	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d012      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	2201      	movs	r2, #1
 80036d0:	409a      	lsls	r2, r3
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f043 0202 	orr.w	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e6:	2204      	movs	r2, #4
 80036e8:	409a      	lsls	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d012      	beq.n	8003718 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	2204      	movs	r2, #4
 8003706:	409a      	lsls	r2, r3
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003710:	f043 0204 	orr.w	r2, r3, #4
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	2210      	movs	r2, #16
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d043      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d03c      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	2210      	movs	r2, #16
 800373c:	409a      	lsls	r2, r3
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d018      	beq.n	8003782 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d024      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
 800376e:	e01f      	b.n	80037b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
 8003780:	e016      	b.n	80037b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0208 	bic.w	r2, r2, #8
 800379e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b4:	2220      	movs	r2, #32
 80037b6:	409a      	lsls	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 808e 	beq.w	80038de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 8086 	beq.w	80038de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	2220      	movs	r2, #32
 80037d8:	409a      	lsls	r2, r3
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d136      	bne.n	8003858 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0216 	bic.w	r2, r2, #22
 80037f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003808:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d103      	bne.n	800381a <HAL_DMA_IRQHandler+0x1da>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0208 	bic.w	r2, r2, #8
 8003828:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	223f      	movs	r2, #63	; 0x3f
 8003830:	409a      	lsls	r2, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384a:	2b00      	cmp	r3, #0
 800384c:	d07d      	beq.n	800394a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	4798      	blx	r3
        }
        return;
 8003856:	e078      	b.n	800394a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01c      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d108      	bne.n	8003886 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	2b00      	cmp	r3, #0
 800387a:	d030      	beq.n	80038de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
 8003884:	e02b      	b.n	80038de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d027      	beq.n	80038de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
 8003896:	e022      	b.n	80038de <HAL_DMA_IRQHandler+0x29e>
 8003898:	20000008 	.word	0x20000008
 800389c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0210 	bic.w	r2, r2, #16
 80038bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d032      	beq.n	800394c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d022      	beq.n	8003938 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2205      	movs	r2, #5
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3301      	adds	r3, #1
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	429a      	cmp	r2, r3
 8003914:	d307      	bcc.n	8003926 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f2      	bne.n	800390a <HAL_DMA_IRQHandler+0x2ca>
 8003924:	e000      	b.n	8003928 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003926:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4798      	blx	r3
 8003948:	e000      	b.n	800394c <HAL_DMA_IRQHandler+0x30c>
        return;
 800394a:	bf00      	nop
    }
  }
}
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop

08003954 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	3b10      	subs	r3, #16
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800396e:	4a13      	ldr	r2, [pc, #76]	; (80039bc <DMA_CalcBaseAndBitshift+0x68>)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b03      	cmp	r3, #3
 8003980:	d909      	bls.n	8003996 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	1d1a      	adds	r2, r3, #4
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	659a      	str	r2, [r3, #88]	; 0x58
 8003994:	e007      	b.n	80039a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800399e:	f023 0303 	bic.w	r3, r3, #3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	aaaaaaab 	.word	0xaaaaaaab
 80039bc:	08005674 	.word	0x08005674

080039c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d11f      	bne.n	8003a1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d855      	bhi.n	8003a8c <DMA_CheckFifoParam+0xcc>
 80039e0:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <DMA_CheckFifoParam+0x28>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	080039f9 	.word	0x080039f9
 80039ec:	08003a0b 	.word	0x08003a0b
 80039f0:	080039f9 	.word	0x080039f9
 80039f4:	08003a8d 	.word	0x08003a8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d045      	beq.n	8003a90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a08:	e042      	b.n	8003a90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a12:	d13f      	bne.n	8003a94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a18:	e03c      	b.n	8003a94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a22:	d121      	bne.n	8003a68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d836      	bhi.n	8003a98 <DMA_CheckFifoParam+0xd8>
 8003a2a:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <DMA_CheckFifoParam+0x70>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a47 	.word	0x08003a47
 8003a38:	08003a41 	.word	0x08003a41
 8003a3c:	08003a59 	.word	0x08003a59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      break;
 8003a44:	e02f      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d024      	beq.n	8003a9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a56:	e021      	b.n	8003a9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a60:	d11e      	bne.n	8003aa0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a66:	e01b      	b.n	8003aa0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d902      	bls.n	8003a74 <DMA_CheckFifoParam+0xb4>
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d003      	beq.n	8003a7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a72:	e018      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      break;
 8003a78:	e015      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00e      	beq.n	8003aa4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8a:	e00b      	b.n	8003aa4 <DMA_CheckFifoParam+0xe4>
      break;
 8003a8c:	bf00      	nop
 8003a8e:	e00a      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a90:	bf00      	nop
 8003a92:	e008      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a94:	bf00      	nop
 8003a96:	e006      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a98:	bf00      	nop
 8003a9a:	e004      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a9c:	bf00      	nop
 8003a9e:	e002      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      break;   
 8003aa0:	bf00      	nop
 8003aa2:	e000      	b.n	8003aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003aa4:	bf00      	nop
    }
  } 
  
  return status; 
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b089      	sub	sp, #36	; 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	e16b      	b.n	8003da8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	f040 815a 	bne.w	8003da2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d00b      	beq.n	8003b0e <HAL_GPIO_Init+0x5a>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d007      	beq.n	8003b0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b02:	2b11      	cmp	r3, #17
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b12      	cmp	r3, #18
 8003b0c:	d130      	bne.n	8003b70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	2203      	movs	r2, #3
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b44:	2201      	movs	r2, #1
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 0201 	and.w	r2, r3, #1
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0xfc>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b12      	cmp	r3, #18
 8003bae:	d123      	bne.n	8003bf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	08da      	lsrs	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3208      	adds	r2, #8
 8003bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	220f      	movs	r2, #15
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	08da      	lsrs	r2, r3, #3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3208      	adds	r2, #8
 8003bf2:	69b9      	ldr	r1, [r7, #24]
 8003bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0203 	and.w	r2, r3, #3
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80b4 	beq.w	8003da2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	4b5f      	ldr	r3, [pc, #380]	; (8003dbc <HAL_GPIO_Init+0x308>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	4a5e      	ldr	r2, [pc, #376]	; (8003dbc <HAL_GPIO_Init+0x308>)
 8003c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c48:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4a:	4b5c      	ldr	r3, [pc, #368]	; (8003dbc <HAL_GPIO_Init+0x308>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c56:	4a5a      	ldr	r2, [pc, #360]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a51      	ldr	r2, [pc, #324]	; (8003dc4 <HAL_GPIO_Init+0x310>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d02b      	beq.n	8003cda <HAL_GPIO_Init+0x226>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a50      	ldr	r2, [pc, #320]	; (8003dc8 <HAL_GPIO_Init+0x314>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d025      	beq.n	8003cd6 <HAL_GPIO_Init+0x222>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a4f      	ldr	r2, [pc, #316]	; (8003dcc <HAL_GPIO_Init+0x318>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d01f      	beq.n	8003cd2 <HAL_GPIO_Init+0x21e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4e      	ldr	r2, [pc, #312]	; (8003dd0 <HAL_GPIO_Init+0x31c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d019      	beq.n	8003cce <HAL_GPIO_Init+0x21a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a4d      	ldr	r2, [pc, #308]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d013      	beq.n	8003cca <HAL_GPIO_Init+0x216>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4c      	ldr	r2, [pc, #304]	; (8003dd8 <HAL_GPIO_Init+0x324>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00d      	beq.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4b      	ldr	r2, [pc, #300]	; (8003ddc <HAL_GPIO_Init+0x328>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <HAL_GPIO_Init+0x20e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4a      	ldr	r2, [pc, #296]	; (8003de0 <HAL_GPIO_Init+0x32c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d101      	bne.n	8003cbe <HAL_GPIO_Init+0x20a>
 8003cba:	2307      	movs	r3, #7
 8003cbc:	e00e      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	e00c      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cc2:	2306      	movs	r3, #6
 8003cc4:	e00a      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cc6:	2305      	movs	r3, #5
 8003cc8:	e008      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cca:	2304      	movs	r3, #4
 8003ccc:	e006      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e004      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e002      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	f002 0203 	and.w	r2, r2, #3
 8003ce2:	0092      	lsls	r2, r2, #2
 8003ce4:	4093      	lsls	r3, r2
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cec:	4934      	ldr	r1, [pc, #208]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cfa:	4b3a      	ldr	r3, [pc, #232]	; (8003de4 <HAL_GPIO_Init+0x330>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d1e:	4a31      	ldr	r2, [pc, #196]	; (8003de4 <HAL_GPIO_Init+0x330>)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d24:	4b2f      	ldr	r3, [pc, #188]	; (8003de4 <HAL_GPIO_Init+0x330>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d48:	4a26      	ldr	r2, [pc, #152]	; (8003de4 <HAL_GPIO_Init+0x330>)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d4e:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_GPIO_Init+0x330>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d72:	4a1c      	ldr	r2, [pc, #112]	; (8003de4 <HAL_GPIO_Init+0x330>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d78:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <HAL_GPIO_Init+0x330>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d9c:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <HAL_GPIO_Init+0x330>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3301      	adds	r3, #1
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2b0f      	cmp	r3, #15
 8003dac:	f67f ae90 	bls.w	8003ad0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003db0:	bf00      	nop
 8003db2:	3724      	adds	r7, #36	; 0x24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40013800 	.word	0x40013800
 8003dc4:	40020000 	.word	0x40020000
 8003dc8:	40020400 	.word	0x40020400
 8003dcc:	40020800 	.word	0x40020800
 8003dd0:	40020c00 	.word	0x40020c00
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40021400 	.word	0x40021400
 8003ddc:	40021800 	.word	0x40021800
 8003de0:	40021c00 	.word	0x40021c00
 8003de4:	40013c00 	.word	0x40013c00

08003de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	807b      	strh	r3, [r7, #2]
 8003df4:	4613      	mov	r3, r2
 8003df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003df8:	787b      	ldrb	r3, [r7, #1]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dfe:	887a      	ldrh	r2, [r7, #2]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e04:	e003      	b.n	8003e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e06:	887b      	ldrh	r3, [r7, #2]
 8003e08:	041a      	lsls	r2, r3, #16
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	619a      	str	r2, [r3, #24]
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e25b      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d075      	beq.n	8003f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e3a:	4ba3      	ldr	r3, [pc, #652]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d00c      	beq.n	8003e60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e46:	4ba0      	ldr	r3, [pc, #640]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d112      	bne.n	8003e78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e52:	4b9d      	ldr	r3, [pc, #628]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e5e:	d10b      	bne.n	8003e78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e60:	4b99      	ldr	r3, [pc, #612]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d05b      	beq.n	8003f24 <HAL_RCC_OscConfig+0x108>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d157      	bne.n	8003f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e236      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d106      	bne.n	8003e90 <HAL_RCC_OscConfig+0x74>
 8003e82:	4b91      	ldr	r3, [pc, #580]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a90      	ldr	r2, [pc, #576]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	e01d      	b.n	8003ecc <HAL_RCC_OscConfig+0xb0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x98>
 8003e9a:	4b8b      	ldr	r3, [pc, #556]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a8a      	ldr	r2, [pc, #552]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b88      	ldr	r3, [pc, #544]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a87      	ldr	r2, [pc, #540]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e00b      	b.n	8003ecc <HAL_RCC_OscConfig+0xb0>
 8003eb4:	4b84      	ldr	r3, [pc, #528]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a83      	ldr	r2, [pc, #524]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b81      	ldr	r3, [pc, #516]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a80      	ldr	r2, [pc, #512]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d013      	beq.n	8003efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fe f86e 	bl	8001fb4 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fe f86a 	bl	8001fb4 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e1fb      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b76      	ldr	r3, [pc, #472]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0xc0>
 8003efa:	e014      	b.n	8003f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efc:	f7fe f85a 	bl	8001fb4 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fe f856 	bl	8001fb4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e1e7      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f16:	4b6c      	ldr	r3, [pc, #432]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0xe8>
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d063      	beq.n	8003ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f32:	4b65      	ldr	r3, [pc, #404]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f3e:	4b62      	ldr	r3, [pc, #392]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d11c      	bne.n	8003f84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f4a:	4b5f      	ldr	r3, [pc, #380]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d116      	bne.n	8003f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f56:	4b5c      	ldr	r3, [pc, #368]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_RCC_OscConfig+0x152>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d001      	beq.n	8003f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e1bb      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6e:	4b56      	ldr	r3, [pc, #344]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4952      	ldr	r1, [pc, #328]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f82:	e03a      	b.n	8003ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d020      	beq.n	8003fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f8c:	4b4f      	ldr	r3, [pc, #316]	; (80040cc <HAL_RCC_OscConfig+0x2b0>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7fe f80f 	bl	8001fb4 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f9a:	f7fe f80b 	bl	8001fb4 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e19c      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fac:	4b46      	ldr	r3, [pc, #280]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb8:	4b43      	ldr	r3, [pc, #268]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4940      	ldr	r1, [pc, #256]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]
 8003fcc:	e015      	b.n	8003ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fce:	4b3f      	ldr	r3, [pc, #252]	; (80040cc <HAL_RCC_OscConfig+0x2b0>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fd ffee 	bl	8001fb4 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fdc:	f7fd ffea 	bl	8001fb4 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e17b      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fee:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d030      	beq.n	8004068 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d016      	beq.n	800403c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400e:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <HAL_RCC_OscConfig+0x2b4>)
 8004010:	2201      	movs	r2, #1
 8004012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fd ffce 	bl	8001fb4 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800401c:	f7fd ffca 	bl	8001fb4 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e15b      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402e:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0x200>
 800403a:	e015      	b.n	8004068 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800403c:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <HAL_RCC_OscConfig+0x2b4>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004042:	f7fd ffb7 	bl	8001fb4 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800404a:	f7fd ffb3 	bl	8001fb4 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e144      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405c:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 800405e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80a0 	beq.w	80041b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004076:	2300      	movs	r3, #0
 8004078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800407a:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10f      	bne.n	80040a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	4a0e      	ldr	r2, [pc, #56]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8004090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004094:	6413      	str	r3, [r2, #64]	; 0x40
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a2:	2301      	movs	r3, #1
 80040a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCC_OscConfig+0x2b8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d121      	bne.n	80040f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040b2:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <HAL_RCC_OscConfig+0x2b8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a07      	ldr	r2, [pc, #28]	; (80040d4 <HAL_RCC_OscConfig+0x2b8>)
 80040b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040be:	f7fd ff79 	bl	8001fb4 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c4:	e011      	b.n	80040ea <HAL_RCC_OscConfig+0x2ce>
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800
 80040cc:	42470000 	.word	0x42470000
 80040d0:	42470e80 	.word	0x42470e80
 80040d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d8:	f7fd ff6c 	bl	8001fb4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e0fd      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ea:	4b81      	ldr	r3, [pc, #516]	; (80042f0 <HAL_RCC_OscConfig+0x4d4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d106      	bne.n	800410c <HAL_RCC_OscConfig+0x2f0>
 80040fe:	4b7d      	ldr	r3, [pc, #500]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	4a7c      	ldr	r2, [pc, #496]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6713      	str	r3, [r2, #112]	; 0x70
 800410a:	e01c      	b.n	8004146 <HAL_RCC_OscConfig+0x32a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b05      	cmp	r3, #5
 8004112:	d10c      	bne.n	800412e <HAL_RCC_OscConfig+0x312>
 8004114:	4b77      	ldr	r3, [pc, #476]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	4a76      	ldr	r2, [pc, #472]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 800411a:	f043 0304 	orr.w	r3, r3, #4
 800411e:	6713      	str	r3, [r2, #112]	; 0x70
 8004120:	4b74      	ldr	r3, [pc, #464]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	4a73      	ldr	r2, [pc, #460]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6713      	str	r3, [r2, #112]	; 0x70
 800412c:	e00b      	b.n	8004146 <HAL_RCC_OscConfig+0x32a>
 800412e:	4b71      	ldr	r3, [pc, #452]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	4a70      	ldr	r2, [pc, #448]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	6713      	str	r3, [r2, #112]	; 0x70
 800413a:	4b6e      	ldr	r3, [pc, #440]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	4a6d      	ldr	r2, [pc, #436]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 8004140:	f023 0304 	bic.w	r3, r3, #4
 8004144:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d015      	beq.n	800417a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414e:	f7fd ff31 	bl	8001fb4 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004154:	e00a      	b.n	800416c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004156:	f7fd ff2d 	bl	8001fb4 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	f241 3288 	movw	r2, #5000	; 0x1388
 8004164:	4293      	cmp	r3, r2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e0bc      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416c:	4b61      	ldr	r3, [pc, #388]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0ee      	beq.n	8004156 <HAL_RCC_OscConfig+0x33a>
 8004178:	e014      	b.n	80041a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417a:	f7fd ff1b 	bl	8001fb4 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004180:	e00a      	b.n	8004198 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fd ff17 	bl	8001fb4 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e0a6      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004198:	4b56      	ldr	r3, [pc, #344]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ee      	bne.n	8004182 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d105      	bne.n	80041b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041aa:	4b52      	ldr	r3, [pc, #328]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	4a51      	ldr	r2, [pc, #324]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 80041b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8092 	beq.w	80042e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041c0:	4b4c      	ldr	r3, [pc, #304]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d05c      	beq.n	8004286 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d141      	bne.n	8004258 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d4:	4b48      	ldr	r3, [pc, #288]	; (80042f8 <HAL_RCC_OscConfig+0x4dc>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7fd feeb 	bl	8001fb4 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e2:	f7fd fee7 	bl	8001fb4 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e078      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f4:	4b3f      	ldr	r3, [pc, #252]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	019b      	lsls	r3, r3, #6
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	3b01      	subs	r3, #1
 800421a:	041b      	lsls	r3, r3, #16
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	061b      	lsls	r3, r3, #24
 8004224:	4933      	ldr	r1, [pc, #204]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 8004226:	4313      	orrs	r3, r2
 8004228:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800422a:	4b33      	ldr	r3, [pc, #204]	; (80042f8 <HAL_RCC_OscConfig+0x4dc>)
 800422c:	2201      	movs	r2, #1
 800422e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004230:	f7fd fec0 	bl	8001fb4 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004238:	f7fd febc 	bl	8001fb4 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e04d      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424a:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x41c>
 8004256:	e045      	b.n	80042e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <HAL_RCC_OscConfig+0x4dc>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fd fea9 	bl	8001fb4 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004266:	f7fd fea5 	bl	8001fb4 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e036      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004278:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f0      	bne.n	8004266 <HAL_RCC_OscConfig+0x44a>
 8004284:	e02e      	b.n	80042e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e029      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004292:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <HAL_RCC_OscConfig+0x4d8>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d11c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d115      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042ba:	4013      	ands	r3, r2
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d10d      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d106      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40007000 	.word	0x40007000
 80042f4:	40023800 	.word	0x40023800
 80042f8:	42470060 	.word	0x42470060

080042fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0cc      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004310:	4b68      	ldr	r3, [pc, #416]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d90c      	bls.n	8004338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b65      	ldr	r3, [pc, #404]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b63      	ldr	r3, [pc, #396]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0b8      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004350:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a58      	ldr	r2, [pc, #352]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800435a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004368:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	494d      	ldr	r1, [pc, #308]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d044      	beq.n	800441c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d119      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e07f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e06f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ca:	4b3b      	ldr	r3, [pc, #236]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e067      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043da:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4934      	ldr	r1, [pc, #208]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043ec:	f7fd fde2 	bl	8001fb4 <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	e00a      	b.n	800440a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f4:	f7fd fdde 	bl	8001fb4 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e04f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 020c 	and.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	429a      	cmp	r2, r3
 800441a:	d1eb      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d20c      	bcs.n	8004444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e032      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004450:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4916      	ldr	r1, [pc, #88]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	490e      	ldr	r1, [pc, #56]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004482:	f000 f82d 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8004486:	4601      	mov	r1, r0
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	5cd3      	ldrb	r3, [r2, r3]
 8004496:	fa21 f303 	lsr.w	r3, r1, r3
 800449a:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fd fd42 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40023c00 	.word	0x40023c00
 80044b8:	40023800 	.word	0x40023800
 80044bc:	08005664 	.word	0x08005664
 80044c0:	20000008 	.word	0x20000008
 80044c4:	2000000c 	.word	0x2000000c

080044c8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <HAL_RCC_EnableCSS+0x14>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	4247004c 	.word	0x4247004c

080044e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	2300      	movs	r3, #0
 80044f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044f6:	4b63      	ldr	r3, [pc, #396]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d007      	beq.n	8004512 <HAL_RCC_GetSysClockFreq+0x32>
 8004502:	2b08      	cmp	r3, #8
 8004504:	d008      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0x38>
 8004506:	2b00      	cmp	r3, #0
 8004508:	f040 80b4 	bne.w	8004674 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800450c:	4b5e      	ldr	r3, [pc, #376]	; (8004688 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800450e:	60bb      	str	r3, [r7, #8]
       break;
 8004510:	e0b3      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004512:	4b5e      	ldr	r3, [pc, #376]	; (800468c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004514:	60bb      	str	r3, [r7, #8]
      break;
 8004516:	e0b0      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004518:	4b5a      	ldr	r3, [pc, #360]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004520:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004522:	4b58      	ldr	r3, [pc, #352]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d04a      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452e:	4b55      	ldr	r3, [pc, #340]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	f04f 0400 	mov.w	r4, #0
 8004538:	f240 11ff 	movw	r1, #511	; 0x1ff
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	ea03 0501 	and.w	r5, r3, r1
 8004544:	ea04 0602 	and.w	r6, r4, r2
 8004548:	4629      	mov	r1, r5
 800454a:	4632      	mov	r2, r6
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	f04f 0400 	mov.w	r4, #0
 8004554:	0154      	lsls	r4, r2, #5
 8004556:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800455a:	014b      	lsls	r3, r1, #5
 800455c:	4619      	mov	r1, r3
 800455e:	4622      	mov	r2, r4
 8004560:	1b49      	subs	r1, r1, r5
 8004562:	eb62 0206 	sbc.w	r2, r2, r6
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	f04f 0400 	mov.w	r4, #0
 800456e:	0194      	lsls	r4, r2, #6
 8004570:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004574:	018b      	lsls	r3, r1, #6
 8004576:	1a5b      	subs	r3, r3, r1
 8004578:	eb64 0402 	sbc.w	r4, r4, r2
 800457c:	f04f 0100 	mov.w	r1, #0
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	00e2      	lsls	r2, r4, #3
 8004586:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800458a:	00d9      	lsls	r1, r3, #3
 800458c:	460b      	mov	r3, r1
 800458e:	4614      	mov	r4, r2
 8004590:	195b      	adds	r3, r3, r5
 8004592:	eb44 0406 	adc.w	r4, r4, r6
 8004596:	f04f 0100 	mov.w	r1, #0
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	0262      	lsls	r2, r4, #9
 80045a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80045a4:	0259      	lsls	r1, r3, #9
 80045a6:	460b      	mov	r3, r1
 80045a8:	4614      	mov	r4, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	4621      	mov	r1, r4
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f04f 0400 	mov.w	r4, #0
 80045b4:	461a      	mov	r2, r3
 80045b6:	4623      	mov	r3, r4
 80045b8:	f7fb fe06 	bl	80001c8 <__aeabi_uldivmod>
 80045bc:	4603      	mov	r3, r0
 80045be:	460c      	mov	r4, r1
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e049      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c4:	4b2f      	ldr	r3, [pc, #188]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	099b      	lsrs	r3, r3, #6
 80045ca:	f04f 0400 	mov.w	r4, #0
 80045ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	ea03 0501 	and.w	r5, r3, r1
 80045da:	ea04 0602 	and.w	r6, r4, r2
 80045de:	4629      	mov	r1, r5
 80045e0:	4632      	mov	r2, r6
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	f04f 0400 	mov.w	r4, #0
 80045ea:	0154      	lsls	r4, r2, #5
 80045ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045f0:	014b      	lsls	r3, r1, #5
 80045f2:	4619      	mov	r1, r3
 80045f4:	4622      	mov	r2, r4
 80045f6:	1b49      	subs	r1, r1, r5
 80045f8:	eb62 0206 	sbc.w	r2, r2, r6
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	f04f 0400 	mov.w	r4, #0
 8004604:	0194      	lsls	r4, r2, #6
 8004606:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800460a:	018b      	lsls	r3, r1, #6
 800460c:	1a5b      	subs	r3, r3, r1
 800460e:	eb64 0402 	sbc.w	r4, r4, r2
 8004612:	f04f 0100 	mov.w	r1, #0
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	00e2      	lsls	r2, r4, #3
 800461c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004620:	00d9      	lsls	r1, r3, #3
 8004622:	460b      	mov	r3, r1
 8004624:	4614      	mov	r4, r2
 8004626:	195b      	adds	r3, r3, r5
 8004628:	eb44 0406 	adc.w	r4, r4, r6
 800462c:	f04f 0100 	mov.w	r1, #0
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	02a2      	lsls	r2, r4, #10
 8004636:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800463a:	0299      	lsls	r1, r3, #10
 800463c:	460b      	mov	r3, r1
 800463e:	4614      	mov	r4, r2
 8004640:	4618      	mov	r0, r3
 8004642:	4621      	mov	r1, r4
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f04f 0400 	mov.w	r4, #0
 800464a:	461a      	mov	r2, r3
 800464c:	4623      	mov	r3, r4
 800464e:	f7fb fdbb 	bl	80001c8 <__aeabi_uldivmod>
 8004652:	4603      	mov	r3, r0
 8004654:	460c      	mov	r4, r1
 8004656:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	3301      	adds	r3, #1
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	60bb      	str	r3, [r7, #8]
      break;
 8004672:	e002      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004676:	60bb      	str	r3, [r7, #8]
      break;
 8004678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800467a:	68bb      	ldr	r3, [r7, #8]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004684:	40023800 	.word	0x40023800
 8004688:	00f42400 	.word	0x00f42400
 800468c:	007a1200 	.word	0x007a1200

08004690 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469c:	2b80      	cmp	r3, #128	; 0x80
 800469e:	d104      	bne.n	80046aa <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80046a0:	f000 f80a 	bl	80046b8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80046a4:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	701a      	strb	r2, [r3, #0]
  }
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800
 80046b4:	4002380e 	.word	0x4002380e

080046b8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e01d      	b.n	8004714 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7fd fa9b 	bl	8001c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3304      	adds	r3, #4
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f000 fbd5 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b06      	cmp	r3, #6
 8004744:	d007      	beq.n	8004756 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0201 	orr.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e01d      	b.n	80047b2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f815 	bl	80047ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	4619      	mov	r1, r3
 80047a2:	4610      	mov	r0, r2
 80047a4:	f000 fb86 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
	...

080047d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b0c      	cmp	r3, #12
 80047de:	d841      	bhi.n	8004864 <HAL_TIM_IC_Start_IT+0x94>
 80047e0:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <HAL_TIM_IC_Start_IT+0x18>)
 80047e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e6:	bf00      	nop
 80047e8:	0800481d 	.word	0x0800481d
 80047ec:	08004865 	.word	0x08004865
 80047f0:	08004865 	.word	0x08004865
 80047f4:	08004865 	.word	0x08004865
 80047f8:	0800482f 	.word	0x0800482f
 80047fc:	08004865 	.word	0x08004865
 8004800:	08004865 	.word	0x08004865
 8004804:	08004865 	.word	0x08004865
 8004808:	08004841 	.word	0x08004841
 800480c:	08004865 	.word	0x08004865
 8004810:	08004865 	.word	0x08004865
 8004814:	08004865 	.word	0x08004865
 8004818:	08004853 	.word	0x08004853
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0202 	orr.w	r2, r2, #2
 800482a:	60da      	str	r2, [r3, #12]
      break;
 800482c:	e01b      	b.n	8004866 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0204 	orr.w	r2, r2, #4
 800483c:	60da      	str	r2, [r3, #12]
      break;
 800483e:	e012      	b.n	8004866 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0208 	orr.w	r2, r2, #8
 800484e:	60da      	str	r2, [r3, #12]
      break;
 8004850:	e009      	b.n	8004866 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0210 	orr.w	r2, r2, #16
 8004860:	60da      	str	r2, [r3, #12]
      break;
 8004862:	e000      	b.n	8004866 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004864:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2201      	movs	r2, #1
 800486c:	6839      	ldr	r1, [r7, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fe0a 	bl	8005488 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b06      	cmp	r3, #6
 8004884:	d007      	beq.n	8004896 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0201 	orr.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d122      	bne.n	80048fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d11b      	bne.n	80048fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0202 	mvn.w	r2, #2
 80048cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fb ff30 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 80048e8:	e005      	b.n	80048f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fac4 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 facb 	bl	8004e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b04      	cmp	r3, #4
 8004908:	d122      	bne.n	8004950 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b04      	cmp	r3, #4
 8004916:	d11b      	bne.n	8004950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0204 	mvn.w	r2, #4
 8004920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fb ff06 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 800493c:	e005      	b.n	800494a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa9a 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 faa1 	bl	8004e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b08      	cmp	r3, #8
 800495c:	d122      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b08      	cmp	r3, #8
 800496a:	d11b      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0208 	mvn.w	r2, #8
 8004974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2204      	movs	r2, #4
 800497a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fb fedc 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 8004990:	e005      	b.n	800499e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fa70 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fa77 	bl	8004e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b10      	cmp	r3, #16
 80049b0:	d122      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d11b      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0210 	mvn.w	r2, #16
 80049c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2208      	movs	r2, #8
 80049ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fb feb2 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 80049e4:	e005      	b.n	80049f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fa46 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fa4d 	bl	8004e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d10e      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d107      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0201 	mvn.w	r2, #1
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fa20 	bl	8004e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2e:	2b80      	cmp	r3, #128	; 0x80
 8004a30:	d10e      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3c:	2b80      	cmp	r3, #128	; 0x80
 8004a3e:	d107      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fdc8 	bl	80055e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d10e      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d107      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fa12 	bl	8004ea0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d10e      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d107      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0220 	mvn.w	r2, #32
 8004aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fd92 	bl	80055cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_IC_ConfigChannel+0x1a>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e08a      	b.n	8004be0 <HAL_TIM_IC_ConfigChannel+0x130>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d11b      	bne.n	8004b18 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6819      	ldr	r1, [r3, #0]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f000 fb06 	bl	8005100 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 020c 	bic.w	r2, r2, #12
 8004b02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6999      	ldr	r1, [r3, #24]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	619a      	str	r2, [r3, #24]
 8004b16:	e05a      	b.n	8004bce <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d11c      	bne.n	8004b58 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6819      	ldr	r1, [r3, #0]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f000 fb8a 	bl	8005246 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699a      	ldr	r2, [r3, #24]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6999      	ldr	r1, [r3, #24]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	021a      	lsls	r2, r3, #8
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	619a      	str	r2, [r3, #24]
 8004b56:	e03a      	b.n	8004bce <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d11b      	bne.n	8004b96 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6819      	ldr	r1, [r3, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f000 fbd7 	bl	8005320 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 020c 	bic.w	r2, r2, #12
 8004b80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69d9      	ldr	r1, [r3, #28]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	61da      	str	r2, [r3, #28]
 8004b94:	e01b      	b.n	8004bce <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f000 fbf7 	bl	8005398 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004bb8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69d9      	ldr	r1, [r3, #28]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	021a      	lsls	r2, r3, #8
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_TIM_ConfigClockSource+0x18>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e0a6      	b.n	8004d4e <HAL_TIM_ConfigClockSource+0x166>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d067      	beq.n	8004d08 <HAL_TIM_ConfigClockSource+0x120>
 8004c38:	2b40      	cmp	r3, #64	; 0x40
 8004c3a:	d80b      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x6c>
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d073      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0x140>
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d802      	bhi.n	8004c4a <HAL_TIM_ConfigClockSource+0x62>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d06f      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c48:	e078      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d06c      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0x140>
 8004c4e:	2b30      	cmp	r3, #48	; 0x30
 8004c50:	d06a      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c52:	e073      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c54:	2b70      	cmp	r3, #112	; 0x70
 8004c56:	d00d      	beq.n	8004c74 <HAL_TIM_ConfigClockSource+0x8c>
 8004c58:	2b70      	cmp	r3, #112	; 0x70
 8004c5a:	d804      	bhi.n	8004c66 <HAL_TIM_ConfigClockSource+0x7e>
 8004c5c:	2b50      	cmp	r3, #80	; 0x50
 8004c5e:	d033      	beq.n	8004cc8 <HAL_TIM_ConfigClockSource+0xe0>
 8004c60:	2b60      	cmp	r3, #96	; 0x60
 8004c62:	d041      	beq.n	8004ce8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c64:	e06a      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6a:	d066      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x152>
 8004c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c70:	d017      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c72:	e063      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	6899      	ldr	r1, [r3, #8]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f000 fbe0 	bl	8005448 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	609a      	str	r2, [r3, #8]
      break;
 8004ca0:	e04c      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6899      	ldr	r1, [r3, #8]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f000 fbc9 	bl	8005448 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cc4:	609a      	str	r2, [r3, #8]
      break;
 8004cc6:	e039      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6859      	ldr	r1, [r3, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f000 fa87 	bl	80051e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2150      	movs	r1, #80	; 0x50
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 fb96 	bl	8005412 <TIM_ITRx_SetConfig>
      break;
 8004ce6:	e029      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f000 fae3 	bl	80052c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2160      	movs	r1, #96	; 0x60
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fb86 	bl	8005412 <TIM_ITRx_SetConfig>
      break;
 8004d06:	e019      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f000 fa67 	bl	80051e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2140      	movs	r1, #64	; 0x40
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fb76 	bl	8005412 <TIM_ITRx_SetConfig>
      break;
 8004d26:	e009      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f000 fb6d 	bl	8005412 <TIM_ITRx_SetConfig>
      break;
 8004d38:	e000      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_TIM_SlaveConfigSynchro+0x18>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e031      	b.n	8004dd2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f937 	bl	8004ff4 <TIM_SlaveTimer_SetConfig>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e018      	b.n	8004dd2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dbe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b0c      	cmp	r3, #12
 8004dee:	d831      	bhi.n	8004e54 <HAL_TIM_ReadCapturedValue+0x78>
 8004df0:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e2d 	.word	0x08004e2d
 8004dfc:	08004e55 	.word	0x08004e55
 8004e00:	08004e55 	.word	0x08004e55
 8004e04:	08004e55 	.word	0x08004e55
 8004e08:	08004e37 	.word	0x08004e37
 8004e0c:	08004e55 	.word	0x08004e55
 8004e10:	08004e55 	.word	0x08004e55
 8004e14:	08004e55 	.word	0x08004e55
 8004e18:	08004e41 	.word	0x08004e41
 8004e1c:	08004e55 	.word	0x08004e55
 8004e20:	08004e55 	.word	0x08004e55
 8004e24:	08004e55 	.word	0x08004e55
 8004e28:	08004e4b 	.word	0x08004e4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e32:	60fb      	str	r3, [r7, #12]

      break;
 8004e34:	e00f      	b.n	8004e56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3c:	60fb      	str	r3, [r7, #12]

      break;
 8004e3e:	e00a      	b.n	8004e56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e46:	60fb      	str	r3, [r7, #12]

      break;
 8004e48:	e005      	b.n	8004e56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	60fb      	str	r3, [r7, #12]

      break;
 8004e52:	e000      	b.n	8004e56 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004e54:	bf00      	nop
  }

  return tmpreg;
 8004e56:	68fb      	ldr	r3, [r7, #12]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a40      	ldr	r2, [pc, #256]	; (8004fc8 <TIM_Base_SetConfig+0x114>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed2:	d00f      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a3d      	ldr	r2, [pc, #244]	; (8004fcc <TIM_Base_SetConfig+0x118>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a3c      	ldr	r2, [pc, #240]	; (8004fd0 <TIM_Base_SetConfig+0x11c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a3b      	ldr	r2, [pc, #236]	; (8004fd4 <TIM_Base_SetConfig+0x120>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a3a      	ldr	r2, [pc, #232]	; (8004fd8 <TIM_Base_SetConfig+0x124>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d108      	bne.n	8004f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2f      	ldr	r2, [pc, #188]	; (8004fc8 <TIM_Base_SetConfig+0x114>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d02b      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f14:	d027      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2c      	ldr	r2, [pc, #176]	; (8004fcc <TIM_Base_SetConfig+0x118>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d023      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2b      	ldr	r2, [pc, #172]	; (8004fd0 <TIM_Base_SetConfig+0x11c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01f      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a2a      	ldr	r2, [pc, #168]	; (8004fd4 <TIM_Base_SetConfig+0x120>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01b      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a29      	ldr	r2, [pc, #164]	; (8004fd8 <TIM_Base_SetConfig+0x124>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d017      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a28      	ldr	r2, [pc, #160]	; (8004fdc <TIM_Base_SetConfig+0x128>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a27      	ldr	r2, [pc, #156]	; (8004fe0 <TIM_Base_SetConfig+0x12c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00f      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a26      	ldr	r2, [pc, #152]	; (8004fe4 <TIM_Base_SetConfig+0x130>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00b      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <TIM_Base_SetConfig+0x134>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d007      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a24      	ldr	r2, [pc, #144]	; (8004fec <TIM_Base_SetConfig+0x138>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a23      	ldr	r2, [pc, #140]	; (8004ff0 <TIM_Base_SetConfig+0x13c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d108      	bne.n	8004f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a0a      	ldr	r2, [pc, #40]	; (8004fc8 <TIM_Base_SetConfig+0x114>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_Base_SetConfig+0xf8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a0c      	ldr	r2, [pc, #48]	; (8004fd8 <TIM_Base_SetConfig+0x124>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d103      	bne.n	8004fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	615a      	str	r2, [r3, #20]
}
 8004fba:	bf00      	nop
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40010000 	.word	0x40010000
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40000800 	.word	0x40000800
 8004fd4:	40000c00 	.word	0x40000c00
 8004fd8:	40010400 	.word	0x40010400
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800
 8004fe8:	40001800 	.word	0x40001800
 8004fec:	40001c00 	.word	0x40001c00
 8004ff0:	40002000 	.word	0x40002000

08004ff4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f023 0307 	bic.w	r3, r3, #7
 800501e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b30      	cmp	r3, #48	; 0x30
 8005038:	d05c      	beq.n	80050f4 <TIM_SlaveTimer_SetConfig+0x100>
 800503a:	2b30      	cmp	r3, #48	; 0x30
 800503c:	d806      	bhi.n	800504c <TIM_SlaveTimer_SetConfig+0x58>
 800503e:	2b10      	cmp	r3, #16
 8005040:	d058      	beq.n	80050f4 <TIM_SlaveTimer_SetConfig+0x100>
 8005042:	2b20      	cmp	r3, #32
 8005044:	d056      	beq.n	80050f4 <TIM_SlaveTimer_SetConfig+0x100>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d054      	beq.n	80050f4 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800504a:	e054      	b.n	80050f6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800504c:	2b50      	cmp	r3, #80	; 0x50
 800504e:	d03d      	beq.n	80050cc <TIM_SlaveTimer_SetConfig+0xd8>
 8005050:	2b50      	cmp	r3, #80	; 0x50
 8005052:	d802      	bhi.n	800505a <TIM_SlaveTimer_SetConfig+0x66>
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d010      	beq.n	800507a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8005058:	e04d      	b.n	80050f6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800505a:	2b60      	cmp	r3, #96	; 0x60
 800505c:	d040      	beq.n	80050e0 <TIM_SlaveTimer_SetConfig+0xec>
 800505e:	2b70      	cmp	r3, #112	; 0x70
 8005060:	d000      	beq.n	8005064 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8005062:	e048      	b.n	80050f6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68d9      	ldr	r1, [r3, #12]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f000 f9e8 	bl	8005448 <TIM_ETR_SetConfig>
      break;
 8005078:	e03d      	b.n	80050f6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b05      	cmp	r3, #5
 8005080:	d101      	bne.n	8005086 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e038      	b.n	80050f8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6a1a      	ldr	r2, [r3, #32]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ac:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	621a      	str	r2, [r3, #32]
      break;
 80050ca:	e014      	b.n	80050f6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	6899      	ldr	r1, [r3, #8]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	461a      	mov	r2, r3
 80050da:	f000 f885 	bl	80051e8 <TIM_TI1_ConfigInputStage>
      break;
 80050de:	e00a      	b.n	80050f6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6899      	ldr	r1, [r3, #8]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	461a      	mov	r2, r3
 80050ee:	f000 f8e7 	bl	80052c0 <TIM_TI2_ConfigInputStage>
      break;
 80050f2:	e000      	b.n	80050f6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80050f4:	bf00      	nop
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f023 0201 	bic.w	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4a28      	ldr	r2, [pc, #160]	; (80051cc <TIM_TI1_SetConfig+0xcc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01b      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d017      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4a25      	ldr	r2, [pc, #148]	; (80051d0 <TIM_TI1_SetConfig+0xd0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d013      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4a24      	ldr	r2, [pc, #144]	; (80051d4 <TIM_TI1_SetConfig+0xd4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00f      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4a23      	ldr	r2, [pc, #140]	; (80051d8 <TIM_TI1_SetConfig+0xd8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00b      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4a22      	ldr	r2, [pc, #136]	; (80051dc <TIM_TI1_SetConfig+0xdc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a21      	ldr	r2, [pc, #132]	; (80051e0 <TIM_TI1_SetConfig+0xe0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4a20      	ldr	r2, [pc, #128]	; (80051e4 <TIM_TI1_SetConfig+0xe4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d101      	bne.n	800516a <TIM_TI1_SetConfig+0x6a>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <TIM_TI1_SetConfig+0x6c>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0303 	bic.w	r3, r3, #3
 8005176:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e003      	b.n	800518a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	b2db      	uxtb	r3, r3
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f023 030a 	bic.w	r3, r3, #10
 80051a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f003 030a 	and.w	r3, r3, #10
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	621a      	str	r2, [r3, #32]
}
 80051be:	bf00      	nop
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40010400 	.word	0x40010400
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40001800 	.word	0x40001800

080051e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f023 0201 	bic.w	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f023 030a 	bic.w	r3, r3, #10
 8005224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	621a      	str	r2, [r3, #32]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005246:	b480      	push	{r7}
 8005248:	b087      	sub	sp, #28
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f023 0210 	bic.w	r2, r3, #16
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005272:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	031b      	lsls	r3, r3, #12
 800528a:	b29b      	uxth	r3, r3
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005298:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	621a      	str	r2, [r3, #32]
}
 80052b4:	bf00      	nop
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	f023 0210 	bic.w	r2, r3, #16
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	031b      	lsls	r3, r3, #12
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f023 0303 	bic.w	r3, r3, #3
 800534c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800535c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	b2db      	uxtb	r3, r3
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005370:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	621a      	str	r2, [r3, #32]
}
 800538c:	bf00      	nop
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	031b      	lsls	r3, r3, #12
 80053dc:	b29b      	uxth	r3, r3
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80053ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	031b      	lsls	r3, r3, #12
 80053f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	621a      	str	r2, [r3, #32]
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005428:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	f043 0307 	orr.w	r3, r3, #7
 8005434:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	609a      	str	r2, [r3, #8]
}
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005462:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	021a      	lsls	r2, r3, #8
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	431a      	orrs	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4313      	orrs	r3, r2
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	609a      	str	r2, [r3, #8]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2201      	movs	r2, #1
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1a      	ldr	r2, [r3, #32]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	43db      	mvns	r3, r3
 80054aa:	401a      	ands	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a1a      	ldr	r2, [r3, #32]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e05a      	b.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a21      	ldr	r2, [pc, #132]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d022      	beq.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005538:	d01d      	beq.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d018      	beq.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1b      	ldr	r2, [pc, #108]	; (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1a      	ldr	r2, [pc, #104]	; (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00e      	beq.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a18      	ldr	r2, [pc, #96]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d009      	beq.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a17      	ldr	r2, [pc, #92]	; (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d004      	beq.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d10c      	bne.n	8005590 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800557c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	4313      	orrs	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40010400 	.word	0x40010400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40001800 	.word	0x40001800

080055cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <__libc_init_array>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	4e0d      	ldr	r6, [pc, #52]	; (800562c <__libc_init_array+0x38>)
 80055f8:	4c0d      	ldr	r4, [pc, #52]	; (8005630 <__libc_init_array+0x3c>)
 80055fa:	1ba4      	subs	r4, r4, r6
 80055fc:	10a4      	asrs	r4, r4, #2
 80055fe:	2500      	movs	r5, #0
 8005600:	42a5      	cmp	r5, r4
 8005602:	d109      	bne.n	8005618 <__libc_init_array+0x24>
 8005604:	4e0b      	ldr	r6, [pc, #44]	; (8005634 <__libc_init_array+0x40>)
 8005606:	4c0c      	ldr	r4, [pc, #48]	; (8005638 <__libc_init_array+0x44>)
 8005608:	f000 f820 	bl	800564c <_init>
 800560c:	1ba4      	subs	r4, r4, r6
 800560e:	10a4      	asrs	r4, r4, #2
 8005610:	2500      	movs	r5, #0
 8005612:	42a5      	cmp	r5, r4
 8005614:	d105      	bne.n	8005622 <__libc_init_array+0x2e>
 8005616:	bd70      	pop	{r4, r5, r6, pc}
 8005618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800561c:	4798      	blx	r3
 800561e:	3501      	adds	r5, #1
 8005620:	e7ee      	b.n	8005600 <__libc_init_array+0xc>
 8005622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005626:	4798      	blx	r3
 8005628:	3501      	adds	r5, #1
 800562a:	e7f2      	b.n	8005612 <__libc_init_array+0x1e>
 800562c:	08005684 	.word	0x08005684
 8005630:	08005684 	.word	0x08005684
 8005634:	08005684 	.word	0x08005684
 8005638:	08005688 	.word	0x08005688

0800563c <memset>:
 800563c:	4402      	add	r2, r0
 800563e:	4603      	mov	r3, r0
 8005640:	4293      	cmp	r3, r2
 8005642:	d100      	bne.n	8005646 <memset+0xa>
 8005644:	4770      	bx	lr
 8005646:	f803 1b01 	strb.w	r1, [r3], #1
 800564a:	e7f9      	b.n	8005640 <memset+0x4>

0800564c <_init>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr

08005658 <_fini>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	bf00      	nop
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr
